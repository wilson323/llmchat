name: Security Scan and Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每天凌晨2点运行安全扫描
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run security audit
      run: |
        cd backend
        npm run security:audit

    - name: Run security scan
      run: |
        cd backend
        npm run security:scan

    - name: Run security check
      run: |
        cd backend
        npm run security:check

    - name: Check license compliance
      run: |
        cd backend
        npm run security:license

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend/reports/
          backend/security-report.json
          backend/security-report.html
        retention-days: 30

  dependency-update:
    name: Check for Outdated Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Check outdated dependencies
      run: |
        cd backend
        npm run security:outdated

    - name: Comment PR with outdated dependencies
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './backend';

          try {
            const outdatedOutput = execSync('npm outdated --json', {
              encoding: 'utf8',
              cwd: path
            });

            const outdated = JSON.parse(outdatedOutput);

            if (Object.keys(outdated).length > 0) {
              let body = '## 📦 Outdated Dependencies Found\n\n';

              for (const [pkg, info] of Object.entries(outdated)) {
                body += `- **${pkg}**: ${info.current} → ${info.latest}\n`;
              }

              body += '\n⚠️ Please consider updating these dependencies to improve security.';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          } catch (error) {
            console.log('No outdated dependencies found or error checking:', error);
          }

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: typescript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:typescript"

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t llmchat-backend:latest ./backend

    - name: Run Trivy vulnerability scanner on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'llmchat-backend:latest'
        format: 'sarif'
        output: 'trivy-container-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-container-results.sarif'

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-audit, code-security-scan, secrets-scan, container-security-scan]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download security reports
      uses: actions/download-artifact@v4
      with:
        name: security-reports
        path: ./reports

    - name: Generate comprehensive security report
      run: |
        cat > ./reports/SECURITY_SUMMARY.md << 'EOF'
        # Security Scan Report

        ## 📊 Scan Results Summary

        ### Security Audit
        - [x] Dependency vulnerability scan
        - [x] Code security analysis
        - [x] License compliance check
        - [x] Configuration security check

        ### Advanced Security Scans
        - [x] CodeQL static analysis
        - [x] Secrets detection
        - [x] Container security scan

        ## 📋 Findings

        For detailed findings, please refer to the individual scan reports.

        ## 📅 Recommendations

        1. Regularly update dependencies to latest secure versions
        2. Enable all security monitoring and logging features
        3. Implement proper access control and authentication
        4. Use HTTPS and security headers in production
        5. Regular security reviews and penetration testing

        ---
        *Report generated on $(date -u)*
        EOF

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-security-report
        path: ./reports/SECURITY_SUMMARY.md
        retention-days: 90

    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const summary = fs.readFileSync('./reports/SECURITY_SUMMARY.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } catch (error) {
            console.log('Error reading security summary:', error);
          }