[{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/config/AppConfig.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":19,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":19,"endColumn":24},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":42,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":42,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[826,828],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":43,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":43,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[880,882],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":44,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":44,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[950,952],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":45,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":45,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1028,1030],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":46,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":46,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1110,1112],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":54,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":55,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":55,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1260,1262],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":56,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":56,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1313,1315],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":57,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":57,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1361,1363],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":58,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":58,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1421,1423],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":59,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":59,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1469,1471],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1611,1666],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":79,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":79,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":81,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":81,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1923,1925],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":82,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":82,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1978,1980],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":83,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":83,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2042,2044],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":90,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":90,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":111,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":111,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2829,2831],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":112,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":112,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2882,2884],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":115,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":115,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2954,2956],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":116,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":116,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3004,3006],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":117,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":117,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3053,3055],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":120,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":120,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3123,3125],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":121,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":121,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3172,3174],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":129,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":129,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 统一配置服务\n *\n * 原则:\n * - 所有配置从环境变量读取\n * - 无硬编码默认值\n * - 启动时验证配置完整性\n * - 配置源: 根目录 .env\n */\n\nimport { logger } from '@/utils/logger';\nimport { SystemError } from '@/types/errors';\n\nexport class AppConfig {\n  /**\n   * Redis 配置\n   * 从环境变量读取，无默认值\n   */\n  static getRedisConfig() {\n    const host = process.env.REDIS_HOST;\n    const port = process.env.REDIS_PORT;\n\n    if (!host) {\n      throw new SystemError({\n        message: 'REDIS_HOST 未配置，请检查根目录 .env 文件',\n        code: 'MISSING_REDIS_HOST',\n        component: 'AppConfig',\n      });\n    }\n\n    if (!port) {\n      throw new SystemError({\n        message: 'REDIS_PORT 未配置，请检查根目录 .env 文件',\n        code: 'MISSING_REDIS_PORT',\n        component: 'AppConfig',\n      });\n    }\n\n    return {\n      host,\n      port: parseInt(port, 10),\n      password: process.env.REDIS_PASSWORD || undefined,\n      db: parseInt(process.env.REDIS_DB || '0', 10),\n      maxRetries: parseInt(process.env.REDIS_MAX_RETRIES || '3', 10),\n      connectTimeout: parseInt(process.env.REDIS_CONNECT_TIMEOUT || '10000', 10),\n      commandTimeout: parseInt(process.env.REDIS_COMMAND_TIMEOUT || '5000', 10),\n    };\n  }\n\n  /**\n   * PostgreSQL 配置\n   * 从环境变量读取，提供开发环境默认值\n   */\n  static getDatabaseConfig() {\n    const host = process.env.DB_HOST || 'localhost';\n    const port = process.env.DB_PORT || '5432';\n    const user = process.env.DB_USER || 'postgres';\n    const password = process.env.DB_PASSWORD || '';\n    const database = process.env.DB_NAME || 'llmchat';\n\n    // 开发环境警告：使用默认配置\n    if (process.env.NODE_ENV === 'development' && (!process.env.DB_HOST || !process.env.DB_USER)) {\n      console.warn('⚠️  [开发模式] 使用数据库默认配置，生产环境请配置完整的数据库环境变量');\n    }\n\n    return {\n      host,\n      port: parseInt(port, 10),\n      user,\n      password,\n      database,\n      ssl: process.env.DB_SSL === 'true',\n    };\n  }\n\n  /**\n   * 服务器配置\n   */\n  static getServerConfig() {\n    return {\n      port: process.env.PORT || '3001',\n      frontendUrl: process.env.FRONTEND_URL || 'http://localhost:3000',\n      nodeEnv: process.env.NODE_ENV || 'development',\n    };\n  }\n\n  /**\n   * 启动时验证所有必需配置（开发模式：数据库配置可选）\n   */\n  static validate() {\n    // 开发环境：只验证关键配置\n    const required = process.env.NODE_ENV === 'production'\n      ? ['REDIS_HOST', 'REDIS_PORT', 'DB_HOST', 'DB_PORT', 'DB_USER', 'DB_PASSWORD', 'DB_NAME']\n      : ['REDIS_HOST', 'REDIS_PORT']; // 开发环境只要求Redis配置\n\n    const missing = required.filter(key => !process.env[key]);\n\n    if (missing.length > 0) {\n      const error = `缺少必需的环境变量: ${missing.join(', ')}\\n请检查根目录的 .env 文件`;\n      logger.error('配置验证失败', { missing });\n      throw new SystemError({\n        message: error,\n        code: 'CONFIG_VALIDATION_FAILED',\n        component: 'AppConfig',\n      });\n    }\n\n    // 记录配置信息（不记录敏感信息）\n    logger.info('✅ 配置验证通过', {\n      redis: {\n        host: process.env.REDIS_HOST || 'localhost',\n        port: process.env.REDIS_PORT || '6379',\n      },\n      database: {\n        host: process.env.DB_HOST || 'localhost',\n        port: process.env.DB_PORT || '5432',\n        database: process.env.DB_NAME || 'llmchat',\n      },\n      server: {\n        port: process.env.PORT || '3005',\n        nodeEnv: process.env.NODE_ENV || 'development',\n      },\n    });\n  }\n\n  /**\n   * 获取完整的配置摘要（用于日志）\n   */\n  static getSummary() {\n    return {\n      redis: `${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`,\n      database: `${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`,\n      server: `PORT=${process.env.PORT}`,\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/config/EnvManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/config/sentryOptimized.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.05.","line":38,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":38,"endColumn":48},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'beforeSend' has no 'await' expression.","line":42,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":42,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.05.","line":86,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":86,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Sentry from '@sentry/node';\nimport { nodeProfilingIntegration } from '@sentry/profiling-node';\nimport type { Express } from 'express';\nimport logger from '@/utils/logger';\n\n/**\n * 优化后的Sentry初始化\n *\n * 性能优化：\n * - 异步发送事件\n * - 降低采样率（10%）\n * - 批量传输（30个事件）\n * - 过滤低优先级事件\n */\nexport function initSentryOptimized(_app: Express): void {\n  const dsn = process.env.SENTRY_DSN;\n\n  if (!dsn) {\n    logger.info('Sentry: 未配置DSN，跳过初始化');\n    return;\n  }\n\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  Sentry.init({\n    dsn,\n    environment: process.env.NODE_ENV ?? 'development',\n    release: process.env.npm_package_version ?? '1.0.0',\n\n    // ✅ Express集成 (Sentry v10 API - 自动集成，无需参数)\n    integrations: [\n      Sentry.httpIntegration(),\n      Sentry.expressIntegration(),\n      nodeProfilingIntegration(),\n    ],\n\n    // ✅ 采样率配置（降低发送频率）\n    tracesSampleRate: isProduction ? 0.1 : 0.05,  // 生产10%，开发5%\n    profilesSampleRate: 0.05,                      // 性能采样5%\n\n    // ✅ 过滤低优先级事件\n    beforeSend: async (event, _hint) => {\n      // 过滤info和debug级别\n      if (event.level === 'info' || event.level === 'debug') {\n        return null;\n      }\n\n      // 过滤健康检查端点错误\n      if (event.request?.url?.includes('/health')) {\n        return null;\n      }\n\n      // 开发环境记录所有error\n      if (!isProduction) {\n        return event;\n      }\n\n      // 生产环境只发送error和fatal\n      if (event.level === 'error' || event.level === 'fatal') {\n        return event;\n      }\n\n      return null;\n    },\n\n    // ✅ 异步传输配置 (Sentry v10 自动批量发送，无需手动配置)\n    // transport配置已内置优化，默认异步批量发送\n\n    // ✅ 性能配置\n    maxBreadcrumbs: 50,          // 面包屑限制\n    maxValueLength: 1000,        // 值长度限制\n    attachStacktrace: true,      // 附加堆栈\n\n    // ✅ 忽略特定错误\n    ignoreErrors: [\n      'ECONNRESET',\n      'ETIMEDOUT',\n      'ENOTFOUND',\n      'NetworkError',\n      'Non-Error promise rejection',\n    ],\n  });\n\n  logger.info('Sentry: 已初始化（优化模式）', {\n    environment: process.env.NODE_ENV,\n    tracesSampleRate: isProduction ? 0.1 : 0.05,\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/constants/httpStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/constants/intervals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/controllers/AdminController.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 104. Maximum allowed is 100.","line":424,"column":1,"nodeType":"Program","messageId":"max","endLine":424,"endColumn":105},{"ruleId":"complexity","severity":1,"message":"Static async method 'provinceHeatmap' has a complexity of 18. Maximum allowed is 15.","line":660,"column":31,"nodeType":"FunctionExpression","messageId":"complex","endLine":745,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Static async method 'conversationSeries' has a complexity of 16. Maximum allowed is 15.","line":747,"column":34,"nodeType":"FunctionExpression","messageId":"complex","endLine":830,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":914,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":924,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":973,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":977,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1024,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1027,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Request, Response } from 'express';\nimport { AgentConfigService } from '@/services/AgentConfigService';\nimport type { ApiResponse } from '@/types';\nimport { safeLogger as logger } from '@/utils/logSanitizer';\nimport { HTTP_STATUS } from '@/constants/httpStatus';\nimport { TIME_CONSTANTS, TIME_UNITS } from '@/constants/intervals';\nimport type { UserQueryResult, CountResult, LogQueryResult } from '@/types/validation';\nimport {\n  createErrorFromUnknown,\n  AuthenticationError,\n  AuthorizationError,\n  BusinessLogicError,\n} from '@/types/errors';\n\n// 创建服务实例\nconst configService = new AgentConfigService();\n\n/**\n * 管理员控制器\n * 提供管理接口和监控接口\n *\n * @swagger\n * tags:\n *   name: Admin\n *   description: 管理后台接口（需要管理员权限）\n */\n\n/**\n * 获取配置健康状态\n * GET /api/admin/config/health\n *\n * @swagger\n * /api/admin/config/health:\n *   get:\n *     summary: 获取配置健康状态\n *     tags: [Admin]\n *     description: 获取智能体配置的健康状态，包括总数、激活状态、无效配置等统计信息\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: 成功返回配置健康状态\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: number\n *                   example: 200\n *                 message:\n *                   type: string\n *                   example: success\n *                 data:\n *                   type: object\n *                   properties:\n *                     totalConfigs:\n *                       type: number\n *                       description: 总配置数\n *                     activeConfigs:\n *                       type: number\n *                       description: 激活配置数\n *                     inactiveConfigs:\n *                       type: number\n *                       description: 未激活配置数\n *                     invalidConfigs:\n *                       type: number\n *                       description: 无效配置数\n *                     hasUnresolvedPlaceholders:\n *                       type: number\n *                       description: 包含未解析占位符的配置数\n *                     snapshotComparison:\n *                       type: object\n *                       properties:\n *                         isEqual:\n *                           type: boolean\n *                           description: 数据库与文件配置是否一致\n *                         dbOnlyCount:\n *                           type: number\n *                           description: 仅存在于数据库的配置数\n *                         fileOnlyCount:\n *                           type: number\n *                           description: 仅存在于文件的配置数\n *                         differenceCount:\n *                           type: number\n *                           description: 存在差异的配置数\n *       500:\n *         description: 服务器内部错误\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: number\n *                   example: 500\n *                 message:\n *                   type: string\n *                   example: 获取配置健康状态失败\n *                 data:\n *                   type: object\n *                   nullable: true\n *                   example: null\n */\nexport async function getConfigHealth(\n  req: Request,\n  res: Response,\n): Promise<Response> {\n  try {\n    const healthStatus = await configService.getConfigHealthStatus();\n\n    const response: ApiResponse<typeof healthStatus> = {\n      code: 200,\n      message: 'success',\n      data: healthStatus,\n    };\n\n    return res.json(response);\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'AdminController',\n      operation: 'getConfigHealthStatus',\n    });\n    logger.error('[AdminController] 获取配置健康状态失败', error.toLogObject());\n\n    const apiError = error.toApiError();\n    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(apiError);\n  }\n}\n\n/**\n * 执行配置快照对比\n * GET /api/admin/config/compare\n *\n * @swagger\n * /api/admin/config/compare:\n *   get:\n *     summary: 执行配置快照对比\n *     tags: [Admin]\n *     description: 对比数据库和配置文件中的智能体配置\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: 成功返回配置对比结果\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: number\n *                   example: 200\n *                 message:\n *                   type: string\n *                   example: success\n *                 data:\n *                   type: object\n *                   properties:\n *                     isEqual:\n *                       type: boolean\n *                       description: 数据库与文件配置是否一致\n *                     dbOnly:\n *                       type: array\n *                       items:\n *                         $ref: '#/components/schemas/Agent'\n *                       description: 仅存在于数据库的配置\n *                     fileOnly:\n *                       type: array\n *                       items:\n *                         $ref: '#/components/schemas/Agent'\n *                       description: 仅存在于文件的配置\n *                     differences:\n *                       type: array\n *                       items:\n *                         type: object\n *                         properties:\n *                           id:\n *                             type: string\n *                           field:\n *                             type: string\n *                           dbValue:\n *                             type: object\n *                           fileValue:\n *                             type: object\n *                       description: 存在差异的配置项\n *       500:\n *         description: 服务器内部错误\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: number\n *                   example: 500\n *                 message:\n *                   type: string\n *                   example: 配置快照对比失败\n *                 data:\n *                   type: object\n *                   nullable: true\n *                   example: null\n */\nexport async function compareConfigSnapshot(\n  req: Request,\n  res: Response,\n): Promise<Response> {\n  try {\n    const comparisonResult = await configService.compareConfigSnapshot();\n\n    const response: ApiResponse<typeof comparisonResult> = {\n      code: 200,\n      message: 'success',\n      data: comparisonResult,\n    };\n\n    return res.json(response);\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'AdminController',\n      operation: 'compareConfigSnapshot',\n    });\n    logger.error('[AdminController] 配置快照对比失败', error.toLogObject());\n\n    const apiError = error.toApiError();\n    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(apiError);\n  }\n}\n\n/**\n * 清理废弃配置\n * POST /api/admin/config/cleanup\n *\n * @swagger\n * /api/admin/config/cleanup:\n *   post:\n *     summary: 清理废弃配置\n *     tags: [Admin]\n *     description: 删除不再使用的配置项（非激活状态且长时间未更新的配置）\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: 成功清理废弃配置\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: number\n *                   example: 200\n *                 message:\n *                   type: string\n *                   example: 成功清理 2 个废弃配置\n *                 data:\n *                   type: object\n *                   properties:\n *                     deletedCount:\n *                       type: number\n *                       description: 已删除的配置数量\n *                     deletedIds:\n *                       type: array\n *                       items:\n *                         type: string\n *                       description: 已删除的配置ID列表\n *       500:\n *         description: 服务器内部错误\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: number\n *                   example: 500\n *                 message:\n *                   type: string\n *                   example: 清理废弃配置失败\n *                 data:\n *                   type: object\n *                   nullable: true\n *                   example: null\n */\nexport async function cleanupObsoleteConfigs(\n  req: Request,\n  res: Response,\n): Promise<Response> {\n  try {\n    const cleanupResult = await configService.cleanupObsoleteConfigs();\n\n    const response: ApiResponse<typeof cleanupResult> = {\n      code: 200,\n      message: `成功清理 ${cleanupResult.deletedCount} 个废弃配置`,\n      data: cleanupResult,\n    };\n\n    return res.json(response);\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'AdminController',\n      operation: 'cleanupObsoleteConfigs',\n    });\n    logger.error('[AdminController] 清理废弃配置失败', error.toLogObject());\n\n    const response: ApiResponse<null> = {\n      code: HTTP_STATUS.INTERNAL_SERVER_ERROR,\n      message: '清理废弃配置失败',\n      data: null,\n    };\n\n    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(response);\n  }\n}\n\n/**\n * 获取所有配置详情\n * GET /api/admin/config/details\n *\n * @swagger\n * /api/admin/config/details:\n *   get:\n *     summary: 获取所有配置详情\n *     tags: [Admin]\n *     description: 获取所有智能体配置的详细信息\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: 成功返回所有配置详情\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: number\n *                   example: 200\n *                 message:\n *                   type: string\n *                   example: success\n *                 data:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/Agent'\n *       500:\n *         description: 服务器内部错误\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: number\n *                   example: 500\n *                 message:\n *                   type: string\n *                   example: 获取配置详情失败\n *                 data:\n *                   type: object\n *                   nullable: true\n *                   example: null\n */\nexport async function getConfigDetails(\n  req: Request,\n  res: Response,\n): Promise<Response> {\n  try {\n    const configs = await configService.getAllAgents();\n\n    // 获取详细的配置信息\n    const detailedConfigs = [];\n    for (const config of configs) {\n      const fullConfig = await configService.getAgent(config.id);\n      if (fullConfig) {\n        detailedConfigs.push(fullConfig);\n      }\n    }\n\n    const response: ApiResponse<typeof detailedConfigs> = {\n      code: 200,\n      message: 'success',\n      data: detailedConfigs,\n    };\n\n    return res.json(response);\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'AdminController',\n      operation: 'getConfigDetails',\n    });\n    logger.error('[AdminController] 获取配置详情失败', error.toLogObject());\n\n    const apiError = error.toApiError();\n    const response = {\n      ...apiError,\n      data: null,\n    };\n\n    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(response);\n  }\n}\n\nimport os from 'os';\nimport { authService } from '@/services/authInstance';\nimport { withClient, hashPassword } from '@/utils/db';\n// import { analyticsService } from '@/services/analyticsInstance'; // 简化系统，暂时注释\n\n// 使用全局单例的 authService（见 services/authInstance.ts）\n\nasync function ensureAuth(req: Request): Promise<{ id: string; username: string; role?: string }> {\n  const auth = req.headers['authorization'];\n  const token = (auth ?? '').replace(/^Bearer\\s+/i, '').trim();\n  if (!token) {\n    throw new AuthenticationError({\n      message: '未提供认证令牌',\n      code: 'UNAUTHORIZED',\n    });\n  }\n  return authService.profile(token);\n}\n\nasync function ensureAdminAuth(req: Request): Promise<{ id: string; username: string; role?: string }> {\n  const user = await ensureAuth(req);\n  if (!user || user.role !== 'admin') {\n    throw new AuthorizationError({\n      message: '需要管理员权限',\n      code: 'FORBIDDEN',\n      resource: 'admin',\n      action: 'access',\n    });\n  }\n  return user;\n}\n\nfunction parseDateInput(value?: string): Date | null {\n  if (!value) {\n    return null;\n  }\n  const date = new Date(value);\n  if (Number.isNaN(date.getTime())) {\n    return null;\n  }\n  return date;\n}\n\nfunction startOfDay(date: Date): Date {\n  const d = new Date(date);\n  d.setHours(0, 0, 0, 0);\n  return d;\n}\n\nfunction endOfDay(date: Date): Date {\n  const d = new Date(date);\n  d.setHours(\n    TIME_CONSTANTS.END_OF_DAY_HOUR,\n    TIME_CONSTANTS.END_OF_DAY_MINUTE,\n    TIME_CONSTANTS.END_OF_DAY_SECOND,\n    TIME_CONSTANTS.MILLISECOND_OF_DAY,\n  );\n  return d;\n}\n\nexport class AdminController {\n  static async systemInfo(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n      const memTotal = os.totalmem();\n      const memFree = os.freemem();\n      const memUsed = memTotal - memFree;\n      const load = os.loadavg ? os.loadavg() : [0, 0, 0];\n      const cpuCount = os.cpus()?.length ?? 0;\n      const info = {\n        platform: os.platform(),\n        release: os.release(),\n        arch: os.arch(),\n        nodeVersion: process.version,\n        uptimeSec: Math.floor(process.uptime()),\n        memory: {\n          total: memTotal,\n          free: memFree,\n          used: memUsed,\n          rss: process.memoryUsage().rss,\n        },\n        cpu: {\n          count: cpuCount,\n          load1: load[0] ?? 0,\n          load5: load[1] ?? 0,\n          load15: load[2] ?? 0,\n        },\n      };\n      return res.json({ data: info });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AdminController',\n        operation: 'systemInfo',\n      });\n      logger.error('[AdminController] 系统信息获取失败', error.toLogObject());\n\n      return res.status(HTTP_STATUS.UNAUTHORIZED).json({\n        code: 'UNAUTHORIZED',\n        message: '未授权',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  static async users(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n      const data = await withClient(async (client) => {\n        const { rows } = await client.query<UserQueryResult>(\n          'SELECT id, username, role, status, created_at, updated_at FROM users ORDER BY id DESC',\n        );\n        return rows;\n      });\n      return res.json({ data });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AdminController',\n        operation: 'users',\n      });\n      logger.error('[AdminController] 用户列表获取失败', error.toLogObject());\n\n      return res.status(HTTP_STATUS.UNAUTHORIZED).json({\n        code: 'UNAUTHORIZED',\n        message: '未授权',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  static async logs(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n      const {\n        level,\n        start,\n        end,\n        page = '1',\n        pageSize = '20',\n      } = req.query as {\n        level?: string;\n        start?: string;\n        end?: string;\n        page?: string;\n        pageSize?: string;\n      };\n      const conditions: string[] = [];\n      const params: (string | number | Date)[] = [];\n      let idx = 1;\n      if (level) {\n        conditions.push(`level = $${idx++}`);\n        params.push(level);\n      }\n      if (start) {\n        conditions.push(`timestamp >= $${idx++}`);\n        params.push(new Date(start));\n      }\n      if (end) {\n        conditions.push(`timestamp <= $${idx++}`);\n        params.push(new Date(end));\n      }\n      const where = conditions.length\n        ? `WHERE ${conditions.join(' AND ')}`\n        : '';\n\n      const pg = await withClient(async (client) => {\n        const { rows: totalRows } = await client.query<CountResult>(\n          `SELECT COUNT(*)::int AS count FROM logs ${where}`,\n          params,\n        );\n        const total = totalRows[0]?.count ?? 0;\n        const p = Math.max(1, parseInt(String(page), 10) ?? 1);\n        const ps = Math.min(\n          TIME_CONSTANTS.MAX_PAGE_SIZE,\n          Math.max(1, parseInt(String(pageSize), 10) ?? TIME_CONSTANTS.DEFAULT_PAGE_SIZE),\n        );\n        const offset = (p - 1) * ps;\n        const { rows } = await client.query<LogQueryResult>(\n          `SELECT id, timestamp, level, message FROM logs ${where} ORDER BY timestamp DESC LIMIT $${idx} OFFSET $${\n            idx + 1\n          }`,\n          [...params, ps, offset],\n        );\n        return { rows, total, page: p, pageSize: ps };\n      });\n      return res.json({\n        data: pg.rows,\n        total: pg.total,\n        page: pg.page,\n        pageSize: pg.pageSize,\n      });\n    } catch (e: unknown) {\n      return res.status(HTTP_STATUS.UNAUTHORIZED).json({\n        code: 'UNAUTHORIZED',\n        message: '未授权',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  static async logsExport(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n      const { level, start, end } = req.query as {\n        level?: string;\n        start?: string;\n        end?: string;\n      };\n      const conditions: string[] = [];\n      const params: (string | number | Date)[] = [];\n      let idx = 1;\n      if (level) {\n        conditions.push(`level = $${idx++}`);\n        params.push(level);\n      }\n      if (start) {\n        conditions.push(`timestamp >= $${idx++}`);\n        params.push(new Date(start));\n      }\n      if (end) {\n        conditions.push(`timestamp <= $${idx++}`);\n        params.push(new Date(end));\n      }\n      const where = conditions.length\n        ? `WHERE ${conditions.join(' AND ')}`\n        : '';\n\n      const rows = await withClient(async (client) => {\n        const { rows } = await client.query<LogQueryResult>(\n          `SELECT id, timestamp, level, message FROM logs ${where} ORDER BY timestamp DESC LIMIT 50000`,\n          params,\n        );\n        return rows;\n      });\n\n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"logs.csv\"');\n      const header = 'id,timestamp,level,message\\n';\n      const body = rows\n        .map(\n          (r) =>\n            `${r.id},${new Date(r.timestamp).toISOString()},${r.level},\"${(\n              r.message || ''\n            ).replace(/\"/g, '\"\"')}\"`,\n        )\n        .join('\\n');\n      return res.status(HTTP_STATUS.OK).send(header + body);\n    } catch (e: unknown) {\n      return res.status(HTTP_STATUS.UNAUTHORIZED).json({\n        code: 'UNAUTHORIZED',\n        message: '未授权',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  static async provinceHeatmap(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n\n      const {\n        start: startRaw,\n        end: endRaw,\n        agentId,\n      } = req.query as {\n        start?: string;\n        end?: string;\n        agentId?: string;\n      };\n\n      const parsedStart = startRaw ? parseDateInput(startRaw) : null;\n      if (startRaw && !parsedStart) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: 'start 参数格式不合法',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const parsedEnd = endRaw ? parseDateInput(endRaw) : null;\n      if (endRaw && !parsedEnd) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: 'end 参数格式不合法',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const now = new Date();\n      let startDate = parsedStart ? new Date(parsedStart) : startOfDay(now);\n      let endDate = parsedEnd ? new Date(parsedEnd) : endOfDay(now);\n\n      if (!parsedStart) {\n        startDate = startOfDay(startDate);\n      }\n      if (!parsedEnd) {\n        endDate = endOfDay(endDate);\n      }\n\n      if (startDate.getTime() > endDate.getTime()) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: '开始时间必须早于结束时间',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const maxRangeMs = 60 * TIME_UNITS.DAY; // 60 天\n      if (endDate.getTime() - startDate.getTime() > maxRangeMs) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: '时间范围不能超过60天',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const _filterAgentId = agentId && agentId !== 'all' ? agentId : null;\n\n      // 简化系统，返回空数据\n      const data = { provinces: [] };\n\n      return res.json({ data });\n    } catch (unknownError: unknown) {\n      if (unknownError instanceof Error && unknownError.message === 'UNAUTHORIZED') {\n        return res.status(HTTP_STATUS.UNAUTHORIZED).json({\n          code: 'UNAUTHORIZED',\n          message: '未授权',\n          timestamp: new Date().toISOString(),\n        });\n      }\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AdminController',\n        operation: 'provinceHeatmap',\n      });\n      logger.error('[AdminController] provinceHeatmap failed', error.toLogObject());\n      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({\n        code: 'INTERNAL_ERROR',\n        message: '获取地域热点数据失败',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  static async conversationSeries(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n\n      const {\n        start: startRaw,\n        end: endRaw,\n        agentId,\n      } = req.query as {\n        start?: string;\n        end?: string;\n        agentId?: string;\n      };\n\n      const parsedStart = startRaw ? parseDateInput(startRaw) : null;\n      if (startRaw && !parsedStart) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: 'start 参数格式不合法',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const parsedEnd = endRaw ? parseDateInput(endRaw) : null;\n      if (endRaw && !parsedEnd) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: 'end 参数格式不合法',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const now = new Date();\n      let startDate = parsedStart\n        ? new Date(parsedStart)\n        : new Date(now.getFullYear(), now.getMonth(), 1);\n      let endDate = parsedEnd ? new Date(parsedEnd) : endOfDay(now);\n\n      startDate = startOfDay(startDate);\n      endDate = endOfDay(endDate);\n\n      if (startDate.getTime() > endDate.getTime()) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: '开始时间必须早于结束时间',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const maxRangeMs = 90 * TIME_UNITS.DAY; // 最长 90 天\n      if (endDate.getTime() - startDate.getTime() > maxRangeMs) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: '时间范围不能超过90天',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const _filterAgentId = agentId && agentId !== 'all' ? agentId : null;\n\n      // 简化系统，返回空数据\n      const data = { series: [] };\n\n      return res.json({ data });\n    } catch (unknownError: unknown) {\n      if (unknownError instanceof Error && unknownError.message === 'UNAUTHORIZED') {\n        return res.status(HTTP_STATUS.UNAUTHORIZED).json({\n          code: 'UNAUTHORIZED',\n          message: '未授权',\n          timestamp: new Date().toISOString(),\n        });\n      }\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AdminController',\n        operation: 'conversationSeries',\n      });\n      logger.error('[AdminController] conversationSeries failed', error.toLogObject());\n      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({\n        code: 'INTERNAL_ERROR',\n        message: '获取智能体对话趋势失败',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  static async conversationAgents(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n\n      const { start: startRaw, end: endRaw } = req.query as {\n        start?: string;\n        end?: string;\n      };\n\n      const parsedStart = startRaw ? parseDateInput(startRaw) : null;\n      if (startRaw && !parsedStart) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: 'start 参数格式不合法',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const parsedEnd = endRaw ? parseDateInput(endRaw) : null;\n      if (endRaw && !parsedEnd) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: 'end 参数格式不合法',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const now = new Date();\n      let startDate = parsedStart\n        ? new Date(parsedStart)\n        : new Date(now.getFullYear(), now.getMonth(), 1);\n      let endDate = parsedEnd ? new Date(parsedEnd) : endOfDay(now);\n\n      startDate = startOfDay(startDate);\n      endDate = endOfDay(endDate);\n\n      if (startDate.getTime() > endDate.getTime()) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: '开始时间必须早于结束时间',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      const maxRangeMs = 180 * TIME_UNITS.DAY;\n      if (endDate.getTime() - startDate.getTime() > maxRangeMs) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: '时间范围不能超过180天',\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      // 简化系统，返回空数据\n    const data = { totals: [] };\n\n      return res.json({ data });\n    } catch (unknownError: unknown) {\n      if (unknownError instanceof Error && unknownError.message === 'UNAUTHORIZED') {\n        return res.status(HTTP_STATUS.UNAUTHORIZED).json({\n          code: 'UNAUTHORIZED',\n          message: '未授权',\n          timestamp: new Date().toISOString(),\n        });\n      }\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AdminController',\n        operation: 'conversationAgents',\n      });\n      logger.error('[AdminController] conversationAgents failed', error.toLogObject());\n      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({\n        code: 'INTERNAL_ERROR',\n        message: '获取智能体会话对比失败',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  // ========== 用户管理：新增 / 更新 / 重置密码 ==========\n  static async createUser(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n      const {\n        username,\n        password,\n        role = 'user',\n        status = 'active',\n      }: {\n        username?: string;\n        password?: string;\n        role?: string;\n        status?: string;\n      } = req.body || {};\n      if (!username || !password) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: 'username/password 必填',\n          timestamp: new Date().toISOString(),\n        });\n      }\n      const data = await withClient(async (client) => {\n        const exists = await client.query(\n          'SELECT 1 FROM users WHERE username=$1 LIMIT 1',\n          [username],\n        );\n        if (exists.rowCount && exists.rowCount > 0) {\n          throw new BusinessLogicError({\n            message: '用户名已存在',\n            code: 'USER_EXISTS',\n            rule: 'unique_username',\n          });\n        }\n        // 使用安全哈希存储密码\n        const { salt, hash } = hashPassword(password);\n\n        const { rows } = await client.query<UserQueryResult>(\n          'INSERT INTO users(username, password_salt, password_hash, role, status) VALUES ($1,$2,$3,$4,$5) RETURNING id, username, role, status, created_at, updated_at',\n          [username, salt, hash, role, status],\n        );\n        return rows[0];\n      });\n      return res.json({ data });\n    } catch (e: unknown) {\n      if (e instanceof Error && e.message === 'USER_EXISTS') {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'USER_EXISTS',\n          message: '用户名已存在',\n          timestamp: new Date().toISOString(),\n        });\n      }\n      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({\n        code: 'INTERNAL_ERROR',\n        message: '创建用户失败',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  static async updateUser(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n      const { id, role, status }: {\n        id?: string;\n        role?: string;\n        status?: string;\n      } = req.body || {};\n      if (!id) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: 'id 必填',\n          timestamp: new Date().toISOString(),\n        });\n      }\n      const fields: string[] = [];\n      const params: (string | number | Date)[] = [];\n      let idx = 1;\n      if (typeof role === 'string') {\n        fields.push(`role=$${idx++}`);\n        params.push(role);\n      }\n      if (typeof status === 'string') {\n        fields.push(`status=$${idx++}`);\n        params.push(status);\n      }\n      fields.push('updated_at=NOW()');\n      const sql = `UPDATE users SET ${fields.join(\n        ', ',\n      )} WHERE id=$${idx} RETURNING id, username, role, status, created_at, updated_at`;\n      params.push(id);\n      const data = await withClient(async (client) => {\n        const { rows } = await client.query<UserQueryResult>(sql, params);\n        return rows[0];\n      });\n      return res.json({ data });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AdminController',\n        operation: 'updateUser',\n      });\n      logger.error('[AdminController] 更新用户失败', error.toLogObject());\n\n      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({\n        code: 'INTERNAL_ERROR',\n        message: '更新用户失败',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  static async resetUserPassword(req: Request, res: Response): Promise<Response> {\n    try {\n      await ensureAdminAuth(req);\n      const { id, newPassword }: {\n        id?: string;\n        newPassword?: string;\n      } = req.body || {};\n      if (!id) {\n        return res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'BAD_REQUEST',\n          message: 'id 必填',\n          timestamp: new Date().toISOString(),\n        });\n      }\n      const pwd =\n        typeof newPassword === 'string' && newPassword.length >= TIME_CONSTANTS.MIN_PASSWORD_LENGTH\n          ? newPassword\n          : Math.random().toString(36).slice(-TIME_CONSTANTS.RANDOM_RANGE);\n\n      // 使用安全哈希存储密码\n      const { salt, hash } = hashPassword(pwd);\n\n      await withClient(async (client) => {\n        await client.query(\n          'UPDATE users SET password_salt=$1, password_hash=$2, updated_at=NOW() WHERE id=$3',\n          [salt, hash, id],\n        );\n      });\n\n      logger.warn('[AdminController] 管理员重置用户密码', {\n        userId: id,\n        newPasswordLength: pwd.length,\n        timestamp: new Date().toISOString(),\n      });\n\n      return res.json({ ok: true, newPassword: pwd });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AdminController',\n        operation: 'resetUserPassword',\n      });\n      logger.error('[AdminController] 重置密码失败', error.toLogObject());\n\n      return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({\n        code: 'INTERNAL_ERROR',\n        message: '重置密码失败',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n}\n\n/**\n * 获取管理员统计数据\n * GET /api/admin/stats\n *\n * @swagger\n * /api/admin/stats:\n *   get:\n *     summary: 获取管理员统计数据\n *     tags: [Admin]\n *     description: 获取系统统计信息，包括用户数、会话数、智能体使用情况等\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: 成功返回统计数据\n */\nexport async function getAdminStats(\n  req: Request,\n  res: Response,\n): Promise<Response> {\n  try {\n    // 确保管理员权限\n    const adminCheck = req.headers['x-admin-verified'];\n    if (adminCheck !== 'true') {\n      return res.status(HTTP_STATUS.UNAUTHORIZED).json({\n        code: HTTP_STATUS.UNAUTHORIZED,\n        message: '需要管理员权限',\n        data: null,\n      });\n    }\n\n    const now = new Date();\n    const todayStart = startOfDay(now);\n\n    // 定义统计结果接口\n    interface UserStatsResult {\n      total: number;\n      active: number;\n      admins: number;\n    }\n\n    interface SessionStatsResult {\n      total: number;\n      today: number;\n    }\n\n    interface AgentStatsResult {\n      total: number;\n      active: number;\n    }\n\n    interface MessageStatsResult {\n      total: number;\n      today: number;\n    }\n\n    // 获取统计数据\n    const stats = await withClient(async (client) => {\n      // 用户统计\n      const usersResult = await client.query<UserStatsResult>(`\n        SELECT\n          COUNT(*)::int AS total,\n          COUNT(CASE WHEN status = 'active' THEN 1 END)::int AS active,\n          COUNT(CASE WHEN role = 'admin' THEN 1 END)::int AS admins\n        FROM users\n      `);\n\n      // 会话统计\n      const sessionsResult = await client.query<SessionStatsResult>(`\n        SELECT\n          COUNT(*)::int AS total,\n          COUNT(CASE WHEN created_at >= $1 THEN 1 END)::int AS today\n        FROM conversations\n      `, [todayStart]);\n\n      // 智能体统计\n      const agentsResult = await client.query<AgentStatsResult>(`\n        SELECT\n          COUNT(*)::int AS total,\n          COUNT(CASE WHEN is_active = true THEN 1 END)::int AS active\n        FROM agent_configs\n      `);\n\n      // 消息统计\n      const messagesResult = await client.query<MessageStatsResult>(`\n        SELECT\n          COUNT(*)::int AS total,\n          COUNT(CASE WHEN created_at >= $1 THEN 1 END)::int AS today\n        FROM messages\n      `, [todayStart]);\n\n      return {\n        users: usersResult.rows[0] ?? { total: 0, active: 0, admins: 0 },\n        sessions: sessionsResult.rows[0] ?? { total: 0, today: 0 },\n        agents: agentsResult.rows[0] ?? { total: 0, active: 0 },\n        messages: messagesResult.rows[0] ?? { total: 0, today: 0 },\n      };\n    });\n\n    const response: ApiResponse<typeof stats> = {\n      code: 200,\n      message: 'success',\n      data: stats,\n    };\n\n    return res.json(response);\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'AdminController',\n      operation: 'getAdminStats',\n    });\n    logger.error('[AdminController] 获取统计数据失败', error.toLogObject());\n\n    const apiError = error.toApiError();\n    const response = {\n      ...apiError,\n      data: null,\n    };\n\n    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(response);\n  }\n}\n\n/**\n * 获取管理员指标数据\n * GET /api/admin/metrics\n *\n * @swagger\n * /api/admin/metrics:\n *   get:\n *     summary: 获取管理员指标数据\n *     tags: [Admin]\n *     description: 获取系统性能指标，包括CPU、内存、响应时间等\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: 成功返回指标数据\n */\nexport async function getAdminMetrics(\n  req: Request,\n  res: Response,\n): Promise<Response> {\n  try {\n    // 确保管理员权限\n    const adminCheck = req.headers['x-admin-verified'];\n    if (adminCheck !== 'true') {\n      return res.status(HTTP_STATUS.UNAUTHORIZED).json({\n        code: HTTP_STATUS.UNAUTHORIZED,\n        message: '需要管理员权限',\n        data: null,\n      });\n    }\n\n    // 系统指标\n    const memTotal = os.totalmem();\n    const memFree = os.freemem();\n    const memUsed = memTotal - memFree;\n    const load = os.loadavg ? os.loadavg() : [0, 0, 0];\n\n    // 获取数据库指标\n    const dbMetrics = await withClient(async (client) => {\n      const startTime = Date.now();\n      await client.query('SELECT 1');\n      const queryTime = Date.now() - startTime;\n\n      // 获取活动连接数\n      interface ConnectionCountResult {\n        active_connections: number;\n      }\n      const connectionsResult = await client.query<ConnectionCountResult>(`\n        SELECT COUNT(*)::int AS active_connections\n        FROM pg_stat_activity\n        WHERE state = 'active'\n      `);\n\n      return {\n        activeConnections: connectionsResult.rows[0]?.active_connections ?? 0,\n        queryTime,\n      };\n    });\n\n    const metrics = {\n      system: {\n        cpuUsage: load[0] ?? 0,\n        memoryUsage: Math.round((memUsed / memTotal) * 100),\n        uptime: Math.floor(process.uptime()),\n      },\n      performance: {\n        avgResponseTime: 0, // 可以从MetricsService获取\n        requestsPerMinute: 0, // 可以从MetricsService获取\n      },\n      database: {\n        activeConnections: dbMetrics.activeConnections,\n        queryTime: dbMetrics.queryTime,\n      },\n    };\n\n    const response: ApiResponse<typeof metrics> = {\n      code: 200,\n      message: 'success',\n      data: metrics,\n    };\n\n    return res.json(response);\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'AdminController',\n      operation: 'getAdminMetrics',\n    });\n    logger.error('[AdminController] 获取指标数据失败', error.toLogObject());\n\n    const apiError = error.toApiError();\n    const response = {\n      ...apiError,\n      data: null,\n    };\n\n    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(response);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/controllers/AgentController.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 32768.","line":72,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":72,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 32768.","line":103,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":103,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":192,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":192,"endColumn":23},{"ruleId":"max-len","severity":1,"message":"This line has a length of 142. Maximum allowed is 100.","line":218,"column":1,"nodeType":"Program","messageId":"max","endLine":218,"endColumn":143},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":228,"column":59,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":228,"endColumn":65},{"ruleId":"max-len","severity":1,"message":"This line has a length of 157. Maximum allowed is 100.","line":374,"column":1,"nodeType":"Program","messageId":"max","endLine":374,"endColumn":158},{"ruleId":"max-len","severity":1,"message":"This line has a length of 137. Maximum allowed is 100.","line":435,"column":1,"nodeType":"Program","messageId":"max","endLine":435,"endColumn":138},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":444,"column":59,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":444,"endColumn":65,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[15473,15474],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 129. Maximum allowed is 100.","line":483,"column":1,"nodeType":"Program","messageId":"max","endLine":483,"endColumn":130},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":493,"column":53,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":493,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":577,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":577,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4000.","line":578,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":578,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// / <reference path=\"../types/express.d.ts\" />\nimport type { Request, Response, NextFunction } from 'express';\nimport Joi from 'joi';\n\nimport { AgentConfigService, type AgentMutationInput } from '@/services/AgentConfigService';\nimport { ChatProxyService } from '@/services/ChatProxyService';\nimport { ChatInitService } from '@/services/ChatInitService';\nimport { DifyInitService } from '@/services/DifyInitService';\nimport type { ApiError, AgentConfig } from '@/types';\nimport { ApiResponseHandler } from '@/utils/apiResponse';\nimport logger from '@/utils/logger';\nimport { HTTP_STATUS } from '@/constants/httpStatus';\nimport type { JsonValue } from '@/types/dynamic';\nimport { authService } from '@/services/authInstance';\nimport { AuthenticationError, AuthorizationError, ValidationError, createErrorFromUnknown } from '@/types/errors';\nimport type {\n  JoiValidationResult,\n  AgentConfigValidation,\n  AgentImportValidation,\n  DifyConnectionValidation,\n} from '@/types/validation';\nasync function ensureAdminAuth(req: Request) {\n  const auth = req.headers['authorization'];\n  const token = (auth ?? '').replace(/^Bearer\\s+/i, '').trim();\n  if (!token) {\n    throw new AuthenticationError({\n      message: '未提供认证令牌',\n      code: 'UNAUTHORIZED',\n    });\n  }\n  const user = await authService.profile(token);\n  if (!user || user.role !== 'admin') {\n    throw new AuthorizationError({\n      message: '需要管理员权限',\n      code: 'FORBIDDEN',\n      resource: 'admin',\n      action: 'access',\n    });\n  }\n  return user;\n}\n\nfunction handleAdminAuthError(error: unknown, res: Response): boolean {\n  if (error instanceof Error && error.message === 'UNAUTHORIZED') {\n    res.status(HTTP_STATUS.FORBIDDEN).json({\n      code: 'UNAUTHORIZED',\n      message: '需要管理员权限',\n      timestamp: new Date().toISOString(),\n    });\n    return true;\n  }\n  return false;\n}\n\n/**\n * 智能体控制器\n */\nexport class AgentController {\n  private readonly agentService: AgentConfigService;\n  private readonly chatService: ChatProxyService;\n  private readonly chatInitService: ChatInitService;\n  private readonly difyInitService: DifyInitService;\n  private readonly createAgentSchema = Joi.object({\n    id: Joi.string().optional(),\n    name: Joi.string().max(120).required(),\n    description: Joi.string().allow('').default(''),\n    provider: Joi.string().valid('fastgpt', 'openai', 'anthropic', 'dify', 'custom').required(),\n    endpoint: Joi.string().uri({ allowRelative: false }).required(),\n    apiKey: Joi.string().required(),\n    appId: Joi.string().optional(),\n    model: Joi.string().max(120).required(),\n    maxTokens: Joi.number().min(1).max(32768).optional(),\n    temperature: Joi.number().min(0).max(2).optional(),\n    systemPrompt: Joi.string().allow('').optional(),\n    capabilities: Joi.array().items(Joi.string()).default([]),\n    rateLimit: Joi.object({\n      requestsPerMinute: Joi.number().min(0).optional(),\n      tokensPerMinute: Joi.number().min(0).optional(),\n    }).optional(),\n    isActive: Joi.boolean().optional(),\n    features: Joi.object({\n      supportsChatId: Joi.boolean().optional(),\n      supportsStream: Joi.boolean().optional(),\n      supportsDetail: Joi.boolean().optional(),\n      supportsFiles: Joi.boolean().optional(),\n      supportsImages: Joi.boolean().optional(),\n      streamingConfig: Joi.object({\n        enabled: Joi.boolean().optional(),\n        endpoint: Joi.string().valid('same', 'different').optional(),\n        statusEvents: Joi.boolean().optional(),\n        flowNodeStatus: Joi.boolean().optional(),\n      }).optional(),\n    }).optional(),\n  });\n  private readonly updateAgentSchema = Joi.object({\n    name: Joi.string().max(120).optional(),\n    description: Joi.string().allow('').optional(),\n    provider: Joi.string().valid('fastgpt', 'openai', 'anthropic', 'dify', 'custom').optional(),\n    endpoint: Joi.string().uri({ allowRelative: false }).optional(),\n    apiKey: Joi.string().optional(),\n    appId: Joi.string().optional(),\n    model: Joi.string().max(120).optional(),\n    maxTokens: Joi.number().min(1).max(32768).optional(),\n    temperature: Joi.number().min(0).max(2).optional(),\n    systemPrompt: Joi.string().allow('').optional(),\n    capabilities: Joi.array().items(Joi.string()).optional(),\n    rateLimit: Joi.object({\n      requestsPerMinute: Joi.number().min(0).optional(),\n      tokensPerMinute: Joi.number().min(0).optional(),\n    }).optional(),\n    isActive: Joi.boolean().optional(),\n    features: Joi.object({\n      supportsChatId: Joi.boolean().optional(),\n      supportsStream: Joi.boolean().optional(),\n      supportsDetail: Joi.boolean().optional(),\n      supportsFiles: Joi.boolean().optional(),\n      supportsImages: Joi.boolean().optional(),\n      streamingConfig: Joi.object({\n        enabled: Joi.boolean().optional(),\n        endpoint: Joi.string().valid('same', 'different').optional(),\n        statusEvents: Joi.boolean().optional(),\n        flowNodeStatus: Joi.boolean().optional(),\n      }).optional(),\n    }).optional(),\n  });\n  private readonly importSchema = Joi.object({\n    agents: Joi.array().items(this.createAgentSchema).min(1).required(),\n  });\n\n  constructor() {\n    this.agentService = new AgentConfigService();\n    this.chatService = new ChatProxyService(this.agentService);\n    this.chatInitService = new ChatInitService(this.agentService);\n    this.difyInitService = new DifyInitService(this.agentService);\n  }\n\n  /**\n   * 获取可用智能体列表\n   * GET /api/agents\n   */\n  getAgents = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      const includeInactive = req.query.includeInactive === 'true';\n\n      const agents = includeInactive\n        ? await this.agentService.getAllAgents()\n        : await this.agentService.getAvailableAgents();\n\n      ApiResponseHandler.sendSuccess(res, agents, {\n        message: '获取智能体列表成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n        metadata: { extra: { total: agents.length } },\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'getAgents',\n      });\n      logger.error('获取智能体列表失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(apiError);\n    }\n  };\n\n  /**\n   * 获取特定智能体信息\n   * GET /api/agents/:id\n   */\n  getAgent = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      const { id } = req.params;\n\n      if (!id) {\n        const apiError: ApiError = {\n          code: 'INVALID_AGENT_ID',\n          message: '智能体ID不能为空',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS.BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const config = await this.agentService.getAgent(id);\n\n      if (!config) {\n        const apiError: ApiError = {\n          code: 'AGENT_NOT_FOUND',\n          message: `智能体不存在: ${id}`,\n          timestamp: new Date().toISOString(),\n        };\n        res.status(404).json(apiError);\n        return;\n      }\n\n      // 转换为安全的Agent对象（不包含敏感信息）\n      const agent = this.toSafeAgent(config);\n\n      ApiResponseHandler.sendSuccess(res, agent, {\n        message: '获取智能体信息成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'getAgent',\n      });\n      logger.error('获取智能体信息失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(apiError);\n    }\n  };\n\n  createAgent = async (req: Request, res: Response): Promise<void> => {\n    try {\n      await ensureAdminAuth(req);\n      const { error, value } = this.createAgentSchema.validate(req.body, { abortEarly: false }) as JoiValidationResult<AgentConfigValidation>;\n      if (error) {\n        res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'VALIDATION_ERROR',\n          message: error.details.map((d) => d.message).join('; '),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const created = await this.agentService.createAgent(value! as AgentMutationInput);\n      ApiResponseHandler.sendCreated(res, this.toSafeAgent(created), {\n        message: '创建智能体成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      if (handleAdminAuthError(unknownError, res)) {\n        return;\n      }\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'createAgent',\n      });\n      logger.error('创建智能体失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(apiError);\n    }\n  };\n\n  /**\n   * 检查智能体状态\n   * GET /api/agents/:id/status\n   */\n  getAgentStatus = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      const { id } = req.params;\n\n      if (!id) {\n        const apiError: ApiError = {\n          code: 'INVALID_AGENT_ID',\n          message: '智能体ID不能为空',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS.BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const healthStatus = await this.agentService.checkAgentHealth(id);\n\n      ApiResponseHandler.sendSuccess(res, healthStatus, {\n        message: '获取智能体状态成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'getAgentStatus',\n      });\n      logger.error('检查智能体状态失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(apiError);\n    }\n  };\n\n  /**\n   * 重新加载智能体配置\n   * POST /api/agents/reload\n   */\n  reloadAgents = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      await ensureAdminAuth(req);\n      const configs = await this.agentService.reloadAgents();\n\n      ApiResponseHandler.sendSuccess(res, {\n        totalAgents: configs.length,\n        activeAgents: configs.filter(c => c.isActive).length,\n      }, {\n        message: '智能体配置已重新加载',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      if (handleAdminAuthError(unknownError, res)) {\n        return;\n      }\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'reloadAgents',\n      });\n      logger.error('重新加载智能体配置失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(apiError);\n    }\n  };\n\n  /**\n   * 验证智能体配置\n   * GET /api/agents/:id/validate\n   */\n  validateAgent = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      const { id } = req.params;\n\n      if (!id) {\n        const apiError: ApiError = {\n          code: 'INVALID_AGENT_ID',\n          message: '智能体ID不能为空',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS.BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const isValid = await this.chatService.validateAgentConfig(id);\n      const config = await this.agentService.getAgent(id);\n\n      ApiResponseHandler.sendSuccess(res, {\n        agentId: id,\n        isValid,\n        exists: !!config,\n        isActive: config?.isActive ?? false,\n      }, {\n        message: '验证智能体配置成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'validateAgent',\n      });\n      logger.error('验证智能体配置失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n\n      if (process.env.NODE_ENV === 'development' && !apiError.details) {\n        apiError.details = { error: error.message } as JsonValue;\n      }\n\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(apiError);\n    }\n  };\n\n  /**\n   * 更新智能体配置（启用/禁用、编辑）\n   * POST /api/agents/:id/update\n   */\n  updateAgent = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      await ensureAdminAuth(req);\n      const { id } = req.params;\n      if (!id) {\n        res.status(HTTP_STATUS.BAD_REQUEST).json({ code: 'INVALID_AGENT_ID', message: '智能体ID不能为空', timestamp: new Date().toISOString() });\n        return;\n      }\n      const { error, value } = this.updateAgentSchema.validate(req.body ?? {}, { abortEarly: false }) as JoiValidationResult<Partial<AgentConfigValidation>>;\n      if (error) {\n        res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'VALIDATION_ERROR',\n          message: error.details.map((d) => d.message).join('; '),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n      await this.agentService.updateAgent(id, value as Partial<AgentConfig>);\n      const latest = await this.agentService.getAgent(id);\n      ApiResponseHandler.sendSuccess(res, latest ? this.toSafeAgent(latest) : null, {\n        message: '更新智能体成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      if (handleAdminAuthError(unknownError, res)) {\n        return;\n      }\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'updateAgent',\n      });\n      logger.error('更新智能体失败', error.toLogObject());\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({ code: 'UPDATE_AGENT_FAILED', message: '更新智能体失败', timestamp: new Date().toISOString() });\n    }\n  };\n\n  deleteAgent = async (req: Request, res: Response): Promise<void> => {\n    try {\n      await ensureAdminAuth(req);\n      const { id } = req.params;\n      if (!id) {\n        res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'INVALID_AGENT_ID',\n          message: '智能体ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n      await this.agentService.deleteAgent(id);\n      ApiResponseHandler.sendSuccess(res, null, {\n        message: '删除智能体成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      if (handleAdminAuthError(unknownError, res)) {\n        return;\n      }\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'deleteAgent',\n      });\n      logger.error('删除智能体失败', error.toLogObject());\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({ code: 'DELETE_AGENT_FAILED', message: '删除智能体失败', timestamp: new Date().toISOString() });\n    }\n  };\n\n  importAgents = async (req: Request, res: Response): Promise<void> => {\n    try {\n      await ensureAdminAuth(req);\n      const { error, value } = this.importSchema.validate(req.body, { abortEarly: false }) as JoiValidationResult<AgentImportValidation>;\n      if (error) {\n        res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'VALIDATION_ERROR',\n          message: error.details.map((d) => d.message).join('; '),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n      const agents = await this.agentService.importAgents(value!.agents as AgentMutationInput[]);\n      ApiResponseHandler.sendSuccess(res, agents.map((agent) => this.toSafeAgent(agent)), {\n        message: '导入智能体成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      if (handleAdminAuthError(unknownError, res)) {\n        return;\n      }\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'importAgents',\n      });\n      logger.error('导入智能体失败', error.toLogObject());\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({ code: 'IMPORT_AGENT_FAILED', message: '导入智能体失败', timestamp: new Date().toISOString() });\n    }\n  };\n\n  /**\n   * 自动获取智能体信息\n   * POST /api/admin/agents/fetch-info\n   * Body: { provider: 'fastgpt' | 'dify', endpoint: string, apiKey: string, appId?: string }\n   */\n  fetchAgentInfo = async (req: Request, res: Response): Promise<void> => {\n    try {\n      await ensureAdminAuth(req);\n\n      // 验证请求体\n      const schema = Joi.object({\n        provider: Joi.string().valid('fastgpt', 'dify').required(),\n        endpoint: Joi.string().uri({ allowRelative: false }).required(),\n        apiKey: Joi.string().required(),\n        appId: Joi.string().when('provider', {\n          is: 'fastgpt',\n          then: Joi.required(),\n          otherwise: Joi.optional(),\n        }),\n      });\n\n      const { error, value } = schema.validate(req.body, { abortEarly: false }) as JoiValidationResult<DifyConnectionValidation>;\n      if (error) {\n        res.status(HTTP_STATUS.BAD_REQUEST).json({\n          code: 'VALIDATION_ERROR',\n          message: error.details.map((d) => d.message).join('; '),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const { provider, endpoint, apiKey, appId } = value!;\n\n      // 构造临时智能体配置用于API调用\n      const tempAgent: AgentConfig = {\n        id: 'temp-' + Date.now(),\n        name: 'Temporary Agent',\n        description: '',\n        provider: provider as 'fastgpt' | 'dify',\n        endpoint,\n        apiKey,\n        appId: appId ?? '',\n        model: '',\n        isActive: true,\n        capabilities: [],\n        features: {\n          supportsChatId: true,\n          supportsStream: true,\n          supportsDetail: false,\n          supportsFiles: false,\n          supportsImages: false,\n          streamingConfig: {\n            enabled: true,\n            endpoint: 'same',\n            statusEvents: false,\n            flowNodeStatus: false,\n          },\n        },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n\n      let agentInfo: Record<string, JsonValue> = {};\n\n      if (provider === 'fastgpt') {\n        // 调用FastGPT初始化接口\n        // getInitData的第一个参数是agentId（将作为标识查找agent配置）\n        // 因为我们的tempAgent没有在数据库中，所以需要先注册或直接使用appId\n        // 这里我们需要修改实现：直接使用appId调用API\n        if (!appId) {\n          throw new ValidationError({\n            message: 'FastGPT需要提供appId',\n            code: 'MISSING_APP_ID',\n            field: 'appId',\n          });\n        }\n\n        // 临时注册agent用于API调用\n        const agentId = 'temp-fetch-' + Date.now();\n        tempAgent.id = agentId;\n\n        // 临时存储agent配置（不保存到数据库）\n        // 实际实现中，我们应该调用chatInitService内部方法直接使用agent配置\n        // 为了简化，这里我们构造响应数据\n        agentInfo = {\n          name: '请在创建后通过FastGPT控制台查看完整配置',\n          description: '自动获取功能仅支持基本信息',\n          model: '',\n          systemPrompt: '',\n          temperature: 0.7,\n          maxTokens: 4000,\n          capabilities: [],\n          features: {\n            supportsChatId: true,\n            supportsStream: true,\n            supportsDetail: true,\n            supportsFiles: true,\n            supportsImages: false,\n            streamingConfig: {\n              enabled: true,\n              endpoint: 'same',\n              statusEvents: true,\n              flowNodeStatus: true,\n            },\n          },\n        };\n      } else if (provider === 'dify') {\n        // 调用Dify初始化接口\n        const difyInfo = await this.difyInitService.fetchAppInfoByCredentials(endpoint, apiKey);\n\n        agentInfo = {\n          name: difyInfo.name,\n          description: difyInfo.description,\n          model: difyInfo.model,\n          systemPrompt: '',\n          temperature: difyInfo.temperature ?? 0.7,\n          maxTokens: difyInfo.maxTokens ?? 4000,\n          capabilities: difyInfo.capabilities,\n          features: difyInfo.features,\n        };\n      }\n\n      ApiResponseHandler.sendSuccess(res, agentInfo, {\n        message: '获取智能体信息成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      if (handleAdminAuthError(unknownError, res)) {\n        return;\n      }\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentController',\n        operation: 'fetchAgentInfo',\n      });\n      logger.error('获取智能体信息失败', error.toLogObject());\n      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(error.toApiError());\n    }\n  };\n\n  private toSafeAgent(config: AgentConfig) {\n    return {\n      id: config.id,\n      name: config.name,\n      description: config.description,\n      endpoint: config.endpoint,\n      model: config.model,\n      status: config.isActive ? 'active' : 'inactive',\n      capabilities: config.capabilities,\n      provider: config.provider,\n      features: config.features,\n      rateLimit: config.rateLimit,\n      systemPrompt: config.systemPrompt,\n      temperature: config.temperature,\n      maxTokens: config.maxTokens,\n      appId: config.appId,\n      createdAt: config.createdAt,\n      updatedAt: config.updatedAt,\n    };\n  }\n\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/controllers/AnalyticsController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/controllers/AuthController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/controllers/CadController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/controllers/ChatController.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FeedbackRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":147,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":18},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'recordGeoSnapshot' has no 'await' expression.","line":554,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":554,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":634,"column":37,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":634,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":641,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":641,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `ChatRequest`.","line":644,"column":59,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":644,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `ChatRequest`.","line":645,"column":67,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":645,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `ChatAttachmentMetadata[] | null | undefined`.","line":650,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":650,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `VoiceNoteMetadata | null | undefined`.","line":651,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":651,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `ChatAttachmentMetadata[] | null | undefined`.","line":667,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":667,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `VoiceNoteMetadata | null | undefined`.","line":668,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":668,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `ChatAttachmentMetadata[] | null | undefined`.","line":681,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":681,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `VoiceNoteMetadata | null | undefined`.","line":682,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":682,"endColumn":18},{"ruleId":"max-params","severity":1,"message":"Async method 'recordChatActivity' has too many parameters (6). Maximum allowed is 5.","line":780,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":780,"endColumn":35},{"ruleId":"max-params","severity":1,"message":"Async method 'processChatRequest' has too many parameters (8). Maximum allowed is 5.","line":812,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":812,"endColumn":35},{"ruleId":"max-params","severity":1,"message":"Async method 'handleNormalRequest' has too many parameters (8). Maximum allowed is 5.","line":884,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":884,"endColumn":36},{"ruleId":"max-params","severity":1,"message":"Async method 'handleStreamRequest' has too many parameters (8). Maximum allowed is 5.","line":961,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":961,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":1127,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":1127,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1138,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1138,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1140,"column":38,"nodeType":"Property","messageId":"anyAssignment","endLine":1140,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1140,"column":45,"nodeType":"Property","messageId":"anyAssignment","endLine":1140,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1140,"column":53,"nodeType":"Property","messageId":"anyAssignment","endLine":1140,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":1143,"column":54,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":1143,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":1168,"column":49,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":1168,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":1168,"column":56,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":1168,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":1170,"column":49,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":1170,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":1170,"column":56,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":1170,"endColumn":62},{"ruleId":"max-len","severity":1,"message":"This line has a length of 107. Maximum allowed is 100.","line":1328,"column":1,"nodeType":"Program","messageId":"max","endLine":1328,"endColumn":108},{"ruleId":"complexity","severity":1,"message":"Async method 'updateUserFeedback' has a complexity of 17. Maximum allowed is 15.","line":1328,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":1409,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":1330,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":1330,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":1417,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":1417,"endColumn":27},{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":1423,"column":1,"nodeType":"Program","messageId":"max","endLine":1423,"endColumn":106},{"ruleId":"max-len","severity":1,"message":"This line has a length of 123. Maximum allowed is 100.","line":1460,"column":1,"nodeType":"Program","messageId":"max","endLine":1460,"endColumn":124},{"ruleId":"max-len","severity":1,"message":"This line has a length of 107. Maximum allowed is 100.","line":1476,"column":1,"nodeType":"Program","messageId":"max","endLine":1476,"endColumn":108},{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":1495,"column":1,"nodeType":"Program","messageId":"max","endLine":1495,"endColumn":106},{"ruleId":"max-len","severity":1,"message":"This line has a length of 109. Maximum allowed is 100.","line":1509,"column":1,"nodeType":"Program","messageId":"max","endLine":1509,"endColumn":110},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1586,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1586,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[47292,47294],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":1598,"column":39,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":1598,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":1617,"column":50,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":1617,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1664,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1664,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49312,49315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49312,49315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 108. Maximum allowed is 100.","line":1696,"column":1,"nodeType":"Program","messageId":"max","endLine":1696,"endColumn":109},{"ruleId":"@typescript-eslint/return-await","severity":1,"message":"Returning an awaited promise is not allowed in this context.","line":1697,"column":12,"nodeType":"AwaitExpression","messageId":"disallowedPromiseAwait","endLine":1697,"endColumn":78,"fix":{"range":[50192,50198],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":1767,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":1767,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":1834,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":1834,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `WithImplicitCoercion<string>`.","line":1844,"column":34,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":1844,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":1844,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1844,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .size on an `any` value.","line":1854,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1854,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1.2.","line":1854,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":1854,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":1866,"column":46,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":1866,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .filename on an `any` value.","line":1866,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1866,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1874,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1874,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .filename on an `any` value.","line":1874,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1874,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1875,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1875,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .mimeType on an `any` value.","line":1875,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1875,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1878,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1878,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .source on an `any` value.","line":1878,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1878,"endColumn":29},{"ruleId":"complexity","severity":1,"message":"Async method 'getSessionMessages' has a complexity of 18. Maximum allowed is 15.","line":1902,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":1999,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":1916,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":1916,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":2007,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":2007,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":2072,"column":20,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":2072,"endColumn":25},{"ruleId":"max-len","severity":1,"message":"This line has a length of 129. Maximum allowed is 100.","line":2083,"column":1,"nodeType":"Program","messageId":"max","endLine":2083,"endColumn":130},{"ruleId":"max-len","severity":1,"message":"This line has a length of 116. Maximum allowed is 100.","line":2139,"column":1,"nodeType":"Program","messageId":"max","endLine":2139,"endColumn":117},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":2164,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":2164,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":2194,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":2194,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":2197,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":2197,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 408.","line":2200,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":2200,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":2203,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":2203,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":2206,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":2206,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":66,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import type { Request, Response, NextFunction } from 'express';\n\n/**\n * 扩展的 Express Response 接口，包含 flushHeaders 方法\n */\ninterface ExtendedResponse extends Omit<Response, 'flushHeaders'> {\n  flushHeaders(): void;\n}\nimport fs from 'fs/promises';\nimport path from 'path';\nimport Joi from 'joi';\n\n// ===== 常量定义 =====\n/** 最大Token数量限制 */\nconst MAX_TOKENS_LIMIT = 32768;\n/** 最大页面大小限制 */\nconst MAX_PAGE_SIZE = 200;\n/** 文件名最大长度 */\nconst MAX_FILENAME_LENGTH = 256;\n/** MIME类型最大长度 */\nconst MAX_MIMETYPE_LENGTH = 128;\n/** 附件最大大小 (MB) */\nconst MAX_ATTACHMENT_SIZE_MB = 20;\n/** 附件最大大小 (字节) */\nconst MAX_ATTACHMENT_SIZE = MAX_ATTACHMENT_SIZE_MB * 1024 * 1024;\n/** 会话标题最大长度 */\nconst MAX_TITLE_LENGTH = 30;\n/** HTTP 成功状态码（保留用于未来使用） */\nconst _HTTP_STATUS_OK = 200;\n/** HTTP 错误请求状态码 */\nconst HTTP_STATUS_BAD_REQUEST = 400;\n/** HTTP 未授权状态码 */\nconst HTTP_STATUS_UNAUTHORIZED = 401;\n/** HTTP 禁止访问状态码 */\nconst HTTP_STATUS_FORBIDDEN = 403;\n/** HTTP 未找到状态码 */\nconst HTTP_STATUS_NOT_FOUND = 404;\n/** HTTP 请求超时状态码 */\nconst HTTP_STATUS_TIMEOUT = 408;\n/** HTTP 内部服务器错误状态码 */\nconst HTTP_STATUS_INTERNAL_ERROR = 500;\n/** HTTP 服务器错误状态码 */\nconst HTTP_STATUS_SERVER_ERROR = 502;\n/** HTTP 网关超时状态码 */\nconst HTTP_STATUS_GATEWAY_TIMEOUT = 504;\n/** 默认重试延迟（毫秒，保留用于未来使用） */\nconst _DEFAULT_RETRY_DELAY_MS = 50;\n/** 日志预览最大长度 */\nconst LOG_PREVIEW_MAX_LENGTH = 50;\nimport logger from '@/utils/logger';\nimport { ApiResponseHandler } from '@/utils/apiResponse';\n\n/**\n * Joi错误提取工具\n */\nclass ErrorExtractor {\n  /**\n   * 检查是否为已知错误类型\n   */\n  static isKnownError(err: unknown): err is { code: string; httpStatus?: number } {\n    return typeof err === 'object' &&\n           err !== null &&\n           'code' in err &&\n           typeof (err as Record<string, unknown>).code === 'string';\n  }\n\n  /**\n   * 检查是否为Axios错误\n   */\n  static isAxiosError(err: unknown): err is { response?: { status?: number } } {\n    return typeof err === 'object' &&\n           err !== null &&\n           'isAxiosError' in err;\n  }\n\n  /**\n   * 从Joi验证错误中提取错误消息\n   */\n  static extractMessage(error: unknown): string | undefined {\n    if (typeof error === 'object' && error !== null) {\n      const errorObj = error as Record<string, unknown>;\n      if (Array.isArray(errorObj.details) && errorObj.details.length > 0) {\n        const detail = errorObj.details[0] as Record<string, unknown>;\n        if (typeof detail.message === 'string') {\n          return detail.message;\n        }\n      }\n      if (typeof errorObj.message === 'string') {\n        return errorObj.message;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * 从错误中提取错误代码\n   */\n  static extractCode(err: unknown): string | undefined {\n    if (ErrorExtractor.isKnownError(err)) {\n      return err.code;\n    }\n\n    if (err instanceof Error) {\n      return err.name;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * 从错误中提取HTTP状态码\n   */\n  static extractStatus(err: unknown): number | undefined {\n    if (ErrorExtractor.isKnownError(err)) {\n      return err.httpStatus;\n    }\n\n    // 尝试从Axios错误中提取状态码\n    if (ErrorExtractor.isAxiosError(err)) {\n      return err.response?.status;\n    }\n\n    return undefined;\n  }\n}\n\nimport { AgentConfigService } from '@/services/AgentConfigService';\nimport { ChatProxyService } from '@/services/ChatProxyService';\nimport { ChatInitService } from '@/services/ChatInitService';\nimport { ChatHistoryService, type ChatHistoryQueryOptions } from '@/services/ChatHistoryService';\nimport { FastGPTSessionService } from '@/services/FastGPTSessionService';\nimport { authService } from '@/services/authInstance';\nimport type { AuthUser } from '@/services/AuthService';\n// import { analyticsService } from '@/services/analyticsInstance'; // 简化系统，暂时注释\n// import type { ProtectedRequestContext } from '@/services/ProtectionService'; // 已移除保护服务\n// import { getProtectionService } from '@/services/ProtectionService'; // 已移除保护服务\nimport type {\n  ChatMessage,\n  ChatOptions,\n  ChatRequest,\n  ApiError,\n  StreamStatus,\n  ChatAttachmentMetadata,\n  VoiceNoteMetadata,\n  FastGPTChatHistorySummary,\n  FastGPTChatHistoryDetail,\n  FeedbackRequest,\n} from '@/types';\nimport { type JsonValue, SafeAccess, DynamicDataConverter } from '@/types/dynamic';\nimport type { SSEEventData } from '@/types/provider';\nimport { AuthenticationError, createErrorFromUnknown } from '@/types/errors';\nimport { generateId, formatFileSize } from '@/utils/helpers';\n\n/**\n * 认证用户检查函数\n */\nasync function requireAuthenticatedUser(req: ExtendedRequest): Promise<AuthUser> {\n  const authorization = req.headers['authorization'];\n  const token = (authorization ?? '').replace(/^Bearer\\s+/i, '').trim();\n  if (!token) {\n    throw new AuthenticationError({\n      message: '未提供认证令牌',\n      code: 'UNAUTHORIZED',\n    });\n  }\n  try {\n    return await authService.profile(token);\n  } catch (unknownError: unknown) {\n    if (unknownError instanceof Error && unknownError.message === 'TOKEN_EXPIRED') {\n      throw new AuthenticationError({\n        message: '认证令牌已过期',\n        code: 'TOKEN_EXPIRED',\n      });\n    }\n    throw new AuthenticationError({\n      message: '认证失败',\n      code: 'UNAUTHORIZED',\n    });\n  }\n}\n\n/**\n * 扩展的请求接口，包含可选的 requestId\n */\ntype ExtendedRequest = Request & {\n  requestId?: string;\n};\n\n/**\n * 聊天控制器\n */\nexport class ChatController {\n  private readonly agentService: AgentConfigService;\n  private readonly chatService: ChatProxyService;\n  private readonly initService: ChatInitService;\n  private readonly historyService: ChatHistoryService;\n  private readonly fastgptSessionService: FastGPTSessionService;\n  // private readonly protectionService = getProtectionService(); // 已移除保护服务\n  private readonly uploadDir: string;\n  private static readonly supportedHistoryRoles = ['user', 'assistant', 'system'] as const;\n\n  constructor() {\n    this.agentService = new AgentConfigService();\n    this.chatService = new ChatProxyService(this.agentService);\n    this.initService = new ChatInitService(this.agentService);\n    this.historyService = new ChatHistoryService();\n    this.fastgptSessionService = new FastGPTSessionService(this.agentService);\n    this.uploadDir = path.resolve(__dirname, '../../uploads');\n  }\n\n  /**\n   * 聊天初始化请求验证Schema\n   */\n  private readonly chatInitSchema = Joi.object({\n    appId: Joi.string().required().messages({\n      'any.required': '应用ID不能为空',\n      'string.empty': '应用ID不能为空',\n    }),\n    chatId: Joi.string().optional(),\n    stream: Joi.boolean().optional().default(false),\n  });\n\n  /**\n   * 聊天请求验证Schema\n   */\n  private readonly chatRequestSchema = Joi.object({\n    agentId: Joi.string().required().messages({\n      'any.required': '智能体ID不能为空',\n      'string.empty': '智能体ID不能为空',\n    }),\n    messages: Joi.array().items(\n      Joi.object({\n        role: Joi.string().valid('user', 'assistant', 'system').required(),\n        content: Joi.string().required().messages({\n          'any.required': '消息内容不能为空',\n          'string.empty': '消息内容不能为空',\n        }),\n        id: Joi.string().optional(),\n        timestamp: Joi.number().optional(),\n        attachments: Joi.array().items(\n          Joi.object({\n            id: Joi.string().optional(),\n            url: Joi.string().uri().optional(),\n            name: Joi.string().required(),\n            mimeType: Joi.string().required(),\n            size: Joi.number().min(0).required(),\n            source: Joi.string().valid('upload', 'voice', 'external').optional(),\n          }),\n        ).optional(),\n        voiceNote: Joi.object({\n          id: Joi.string().optional(),\n          url: Joi.string().uri().optional(),\n          duration: Joi.number().min(0).required(),\n          mimeType: Joi.string().required(),\n          size: Joi.number().min(0).optional(),\n        }).optional(),\n        metadata: Joi.object().optional(),\n      }),\n    ).min(1).required().messages({\n      'array.min': '至少需要一条消息',\n      'any.required': '消息列表不能为空',\n    }),\n    stream: Joi.boolean().optional().default(false),\n    // 兼容顶层直传（标准FastGPT格式）\n    chatId: Joi.string().optional(),\n    detail: Joi.boolean().optional(),\n    temperature: Joi.number().min(0).max(2).optional(),\n    maxTokens: Joi.number().min(1).max(MAX_TOKENS_LIMIT).optional(),\n    variables: Joi.object().optional(),\n    responseChatItemId: Joi.string().optional(),\n    retainDatasetCite: Joi.boolean().optional(),\n    appId: Joi.string().optional(),\n    // 兼容原有 options 格式\n    options: Joi.object({\n      chatId: Joi.string().optional(),\n      detail: Joi.boolean().optional(),\n      temperature: Joi.number().min(0).max(2).optional(),\n      maxTokens: Joi.number().min(1).max(MAX_TOKENS_LIMIT).optional(),\n      // 允许旧用法把 variables 放到 options 里\n      variables: Joi.object().optional(),\n      responseChatItemId: Joi.string().optional(),\n    }).optional(),\n    attachments: Joi.array().items(\n      Joi.object({\n        id: Joi.string().optional(),\n        url: Joi.string().uri().optional(),\n        name: Joi.string().required(),\n        mimeType: Joi.string().required(),\n        size: Joi.number().min(0).required(),\n        source: Joi.string().valid('upload', 'voice', 'external').optional(),\n      }),\n    ).optional(),\n    voiceNote: Joi.object({\n      id: Joi.string().optional(),\n      url: Joi.string().uri().optional(),\n      duration: Joi.number().min(0).required(),\n      mimeType: Joi.string().required(),\n      size: Joi.number().min(0).optional(),\n    }).optional(),\n  });\n\n  private readonly historyListSchema = Joi.object({\n    agentId: Joi.string().required().messages({\n      'any.required': '智能体ID不能为空',\n      'string.empty': '智能体ID不能为空',\n    }),\n    page: Joi.number().min(1).optional(),\n    pageSize: Joi.number().min(1).max(MAX_PAGE_SIZE).optional(),\n  });\n\n  private readonly historyDetailSchema = Joi.object({\n    agentId: Joi.string().required().messages({\n      'any.required': '智能体ID不能为空',\n      'string.empty': '智能体ID不能为空',\n    }),\n  });\n\n  private readonly historyMessagesSchema = Joi.object({\n    limit: Joi.number().integer().min(1).max(MAX_PAGE_SIZE).optional(),\n    offset: Joi.number().integer().min(0).optional(),\n    role: Joi.alternatives()\n      .try(\n        Joi.string(),\n        Joi.array().items(Joi.string()),\n      )\n      .optional(),\n  });\n\n  private readonly historyDeleteSchema = Joi.object({\n    agentId: Joi.string().required().messages({\n      'any.required': '智能体ID不能为空',\n      'string.empty': '智能体ID不能为空',\n    }),\n  });\n\n  private readonly historyRetrySchema = Joi.object({\n    agentId: Joi.string().required().messages({\n      'any.required': '智能体ID不能为空',\n      'string.empty': '智能体ID不能为空',\n    }),\n    dataId: Joi.string().required().messages({\n      'any.required': '消息ID不能为空',\n      'string.empty': '消息ID不能为空',\n    }),\n    stream: Joi.boolean().optional().default(false),\n    detail: Joi.boolean().optional(),\n  });\n  /**\n   * 点赞/点踩反馈请求验证Schema\n   */\n  private readonly feedbackSchema = Joi.object({\n    agentId: Joi.string().required().messages({\n      'any.required': '智能体ID不能为空',\n      'string.empty': '智能体ID不能为空',\n    }),\n    chatId: Joi.string().required().messages({\n      'any.required': 'chatId不能为空',\n      'string.empty': 'chatId不能为空',\n    }),\n    dataId: Joi.string().required().messages({\n      'any.required': 'dataId不能为空',\n      'string.empty': 'dataId不能为空',\n    }),\n    userGoodFeedback: Joi.string().optional(),\n    userBadFeedback: Joi.string().optional(),\n  });\n  private readonly attachmentUploadSchema = Joi.object({\n    filename: Joi.string().max(MAX_FILENAME_LENGTH).required(),\n    mimeType: Joi.string().max(MAX_MIMETYPE_LENGTH).required(),\n    size: Joi.number().min(1).max(MAX_ATTACHMENT_SIZE).required(),\n    data: Joi.string().required(),\n    source: Joi.string().valid('upload', 'voice', 'external').optional(),\n  });\n\n  private decorateMessages(\n    messages: ChatMessage[],\n    attachments?: ChatAttachmentMetadata[] | null,\n    voiceNote?: VoiceNoteMetadata | null,\n  ): ChatMessage[] {\n    const list = this.cloneMessages(messages);\n\n    // 如果没有附件和语音笔记，直接返回\n    if ((!attachments || attachments.length === 0) && !voiceNote) {\n      return list;\n    }\n\n    const index = this.findLastUserMessageIndex(list);\n    if (index === -1) {\n      return list;\n    }\n\n    const target = list[index];\n    if (!target) {\n      return list;\n    }\n\n    this.mergeAttachments(target, attachments);\n    this.mergeVoiceNote(target, voiceNote);\n    this.updateTargetContent(target, attachments, voiceNote);\n    this.updateTargetMetadata(target, attachments, voiceNote);\n\n    return list;\n  }\n\n  /**\n   * 克隆消息数组，避免修改原始数据\n   */\n  private cloneMessages(messages: ChatMessage[]): ChatMessage[] {\n    return (messages ?? []).map((msg) => {\n      const result: ChatMessage = {\n        ...msg,\n        ...(msg.metadata && { metadata: { ...msg.metadata } }),\n        ...(msg.attachments && { attachments: [...msg.attachments] }),\n      };\n\n      if (msg.voiceNote !== undefined) {\n        result.voiceNote = msg.voiceNote;\n      }\n\n      return result;\n    });\n  }\n\n  /**\n   * 合并附件到目标消息\n   */\n  private mergeAttachments(\n    target: ChatMessage,\n    attachments?: ChatAttachmentMetadata[] | null,\n  ): void {\n    if (!attachments || attachments.length === 0) {\n      return;\n    }\n\n    const mergedAttachments: ChatAttachmentMetadata[] = target.attachments\n      ? [...target.attachments]\n      : [];\n\n    attachments.forEach((att) => {\n      mergedAttachments.push(att);\n    });\n\n    if (mergedAttachments.length > 0) {\n      target.attachments = mergedAttachments;\n    }\n  }\n\n  /**\n   * 合并语音笔记到目标消息\n   */\n  private mergeVoiceNote(\n    target: ChatMessage,\n    voiceNote?: VoiceNoteMetadata | null,\n  ): void {\n    if (!voiceNote) {\n      return;\n    }\n\n    target.voiceNote = voiceNote;\n  }\n\n  /**\n   * 更新目标消息的内容\n   */\n  private updateTargetContent(\n    target: ChatMessage,\n    attachments?: ChatAttachmentMetadata[] | null,\n    voiceNote?: VoiceNoteMetadata | null,\n  ): void {\n    const summary: string[] = [];\n\n    if (attachments && attachments.length > 0) {\n      attachments.forEach((att, idx) => {\n        summary.push(\n          `附件${idx + 1}: ${att.name} (${formatFileSize(att.size)}) -> ${att.url}`,\n        );\n      });\n    }\n\n    if (voiceNote) {\n      summary.push(\n        `语音: ${voiceNote.duration.toFixed(1)} 秒 (${voiceNote.mimeType}) -> ${voiceNote.url}`,\n      );\n    }\n\n    if (summary.length > 0) {\n      target.content = `${target.content}\\n\\n${summary.join('\\n')}`.trim();\n    }\n  }\n\n  /**\n   * 更新目标消息的元数据\n   */\n  private updateTargetMetadata(\n    target: ChatMessage,\n    attachments?: ChatAttachmentMetadata[] | null,\n    voiceNote?: VoiceNoteMetadata | null,\n  ): void {\n    const mergedAttachments = target.attachments ?? [];\n    const finalVoice = voiceNote ?? target.voiceNote;\n\n    const newMetadata: ChatMessage['metadata'] = {\n      ...(target.metadata ?? {}),\n      ...(mergedAttachments.length ? { attachments: mergedAttachments } : {}),\n      ...(finalVoice ? { voiceNote: finalVoice } : {}),\n    };\n\n    if (Object.keys(newMetadata).length > 0) {\n      target.metadata = newMetadata;\n    }\n  }\n\n  private findLastUserMessageIndex(messages: ChatMessage[]): number {\n    for (let i = messages.length - 1; i >= 0; i -= 1) {\n      if (messages[i]?.role === 'user') {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private findLastUserMessage(messages: ChatMessage[]): ChatMessage | null {\n    const index = this.findLastUserMessageIndex(messages);\n    return index >= 0 && messages[index] ? messages[index] : null;\n  }\n\n  private resolveClientIp(req: ExtendedRequest): string | null {\n    const forwarded = req.headers['x-forwarded-for'];\n    if (Array.isArray(forwarded) && forwarded.length > 0) {\n      return forwarded[0] ?? null;\n    }\n    if (typeof forwarded === 'string' && forwarded.trim()) {\n      return forwarded;\n    }\n\n    const realIp = req.headers['x-real-ip'];\n    if (Array.isArray(realIp) && realIp.length > 0) {\n      return realIp[0] ?? null;\n    }\n    if (typeof realIp === 'string' && realIp.trim()) {\n      return realIp;\n    }\n\n    if (typeof req.ip === 'string' && req.ip.trim()) {\n      return req.ip;\n    }\n\n    const socketAddress = req.socket && typeof req.socket.remoteAddress === 'string'\n      ? req.socket.remoteAddress\n      : null;\n    return socketAddress;\n  }\n\n  private async recordGeoSnapshot(\n    req: ExtendedRequest,\n    agentId: string,\n    _sessionId?: string | null,\n  ): Promise<void> {\n    try {\n      const ip = this.resolveClientIp(req);\n      // 简化系统，暂时移除分析服务\n      logger.info('[ChatController] 记录代理请求', { agentId, ip });\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'recordGeoSnapshot',\n        agentId,\n      });\n      logger.warn('[ChatController] 记录地域分析失败', { error: typedError.message });\n    }\n  }\n\n  private buildSessionTitle(messages: ChatMessage[]): string {\n    const lastUser = this.findLastUserMessage(messages);\n    if (!lastUser) {\n      return '新对话';\n    }\n    const content = (lastUser.content ?? '').replace(/\\s+/g, ' ').trim();\n    if (!content) {\n      return '新对话';\n    }\n    return content.length > MAX_TITLE_LENGTH ? `${content.slice(0, MAX_TITLE_LENGTH)}...` : content;\n  }\n\n  private async recordUserHistory(\n    sessionId: string,\n    agentId: string,\n    messages: ChatMessage[],\n    attachments?: ChatAttachmentMetadata[] | null,\n    voiceNote?: VoiceNoteMetadata | null,\n  ): Promise<void> {\n    const lastUser = this.findLastUserMessage(messages);\n    if (!lastUser) {\n      return;\n    }\n    try {\n      await this.historyService.appendMessage({\n        sessionId,\n        agentId,\n        role: 'user',\n        content: lastUser.content,\n        ...((attachments?.length ?? 0) > 0 || voiceNote ? {\n          metadata: {\n            attachments: attachments?.length ? attachments : undefined,\n            voiceNote: voiceNote ?? null,\n          },\n        } : {}),\n        ...(lastUser.id ? { messageId: lastUser.id } : {}),\n        titleHint: this.buildSessionTitle(messages),\n      });\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'recordUserHistory',\n        sessionId,\n        agentId,\n      });\n      logger.warn('[ChatController] 记录用户消息失败', { error: typedError.message });\n    }\n  }\n\n  /**\n   * 发送聊天请求\n   * POST /api/chat/completions\n   */\n  chatCompletions = async (\n    req: ExtendedRequest,\n    res: Response,\n    _next: NextFunction,\n  ): Promise<void> => {\n    try {\n      // 验证请求数据\n      const validation = this.chatRequestSchema.validate(req.body);\n    const { error: validationError, value } = validation;\n      if (validationError) {\n        this.sendValidationError(res, validationError);\n        return;\n      }\n\n      const { agentId, messages, stream } = value as ChatRequest;\n      const { attachments, voiceNote } = value;\n\n      // 归一化选项\n      const normalizedOptions = this.normalizeChatOptions(value);\n      const sessionId = this.generateSessionId(normalizedOptions, value);\n      normalizedOptions.chatId = sessionId;\n\n      const decoratedMessages = this.decorateMessages(\n        Array.isArray(messages) ? messages : [],\n        attachments,\n        voiceNote,\n      );\n\n      // 验证智能体\n      const { error: agentError } = await this.validateAgent(agentId, res);\n      if (agentError) {\n        return; // 错误已在 validateAgent 中处理\n      }\n\n      // 初始化会话和历史\n      await this.initializeChatSession(sessionId, agentId, decoratedMessages);\n      await this.recordChatActivity(\n        req,\n        agentId,\n        sessionId,\n        decoratedMessages,\n        attachments,\n        voiceNote,\n      );\n\n      this.logChatRequest(agentId, stream ?? false, normalizedOptions, decoratedMessages);\n\n      // 处理请求\n      await this.processChatRequest(\n        res,\n        stream ?? false,\n        agentId,\n        decoratedMessages,\n        normalizedOptions,\n        sessionId,\n        attachments,\n        voiceNote,\n      );\n    } catch (unknownError) {\n      this.handleChatRequestError(res, unknownError, req);\n    }\n  };\n\n  /**\n   * 发送验证错误响应\n   */\n  private sendValidationError(res: Response, error: unknown): void {\n    const apiError: ApiError = {\n      code: 'VALIDATION_ERROR',\n      message: ErrorExtractor.extractMessage(error) ?? '请求参数校验失败',\n      timestamp: new Date().toISOString(),\n    };\n    res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n  }\n\n  /**\n   * 归一化聊天选项\n   */\n  private normalizeChatOptions(value: ChatRequest): ChatOptions {\n    const { attachments, voiceNote, options } = value;\n\n    return {\n      ...(options ?? {}),\n      ...(value.chatId ? { chatId: value.chatId } : {}),\n      ...(typeof value.detail === 'boolean' ? { detail: value.detail } : {}),\n      ...(typeof value.temperature === 'number' ? { temperature: value.temperature } : {}),\n      ...(typeof value.maxTokens === 'number' ? { maxTokens: value.maxTokens } : {}),\n      ...(value.variables ? { variables: value.variables } : {}),\n      ...(value.responseChatItemId ? { responseChatItemId: value.responseChatItemId } : {}),\n      ...(attachments ? { attachments } : {}),\n      ...(voiceNote ? { voiceNote } : {}),\n    };\n  }\n\n  /**\n   * 生成会话ID\n   */\n  private generateSessionId(normalizedOptions: ChatOptions, value: ChatRequest): string {\n    return normalizedOptions.chatId ?? value.chatId ?? generateId();\n  }\n\n  /**\n   * 验证智能体并返回验证结果\n   */\n  private async validateAgent(\n    agentId: string,\n    res?: Response,\n  ): Promise<{ error: boolean }> {\n    const agent = await this.agentService.getAgent(agentId);\n    if (!agent) {\n      if (res) {\n        const apiError: ApiError = {\n          code: 'AGENT_NOT_FOUND',\n          message: `智能体不存在: ${agentId}`,\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_NOT_FOUND).json(apiError);\n      }\n      return { error: true };\n    }\n\n    if (!agent.isActive) {\n      if (res) {\n        const apiError: ApiError = {\n          code: 'AGENT_INACTIVE',\n          message: `智能体未激活: ${agentId}`,\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n      }\n      return { error: true };\n    }\n\n    return { error: false };\n  }\n\n  /**\n   * 初始化聊天会话\n   */\n  private async initializeChatSession(\n    sessionId: string,\n    agentId: string,\n    decoratedMessages: ChatMessage[],\n  ): Promise<void> {\n    await this.historyService.ensureSession(\n      sessionId,\n      agentId,\n      this.buildSessionTitle(decoratedMessages),\n    );\n  }\n\n  /**\n   * 记录聊天活动\n   */\n  private async recordChatActivity(\n    req: ExtendedRequest,\n    agentId: string,\n    sessionId: string,\n    decoratedMessages: ChatMessage[],\n    attachments?: ChatAttachmentMetadata[] | null,\n    voiceNote?: VoiceNoteMetadata | null,\n  ): Promise<void> {\n    await this.recordGeoSnapshot(req, agentId, sessionId);\n    await this.recordUserHistory(sessionId, agentId, decoratedMessages, attachments, voiceNote);\n  }\n\n  /**\n   * 记录聊天请求日志\n   */\n  private logChatRequest(\n    agentId: string,\n    stream: boolean,\n    normalizedOptions: ChatOptions,\n    decoratedMessages: ChatMessage[],\n  ): void {\n    logger.debug('🧪 [chatCompletions] 入参(归一化)', {\n      agentId,\n      stream,\n      options: normalizedOptions,\n      messagesCount: decoratedMessages.length,\n    });\n  }\n\n  /**\n   * 处理聊天请求\n   */\n  private async processChatRequest(\n    res: Response,\n    stream: boolean,\n    agentId: string,\n    decoratedMessages: ChatMessage[],\n    normalizedOptions: ChatOptions,\n    sessionId: string,\n    attachments?: ChatAttachmentMetadata[] | null,\n    voiceNote?: VoiceNoteMetadata | null,\n  ): Promise<void> {\n    // 简化版本 - 移除保护上下文\n    const protectionContext = undefined;\n\n    if (stream) {\n      await this.handleStreamRequest(\n        res,\n        agentId,\n        decoratedMessages,\n        normalizedOptions,\n        sessionId,\n        attachments,\n        voiceNote ?? null,\n        protectionContext,\n      );\n    } else {\n      await this.handleNormalRequest(\n        res,\n        agentId,\n        decoratedMessages,\n        normalizedOptions,\n        sessionId,\n        attachments,\n        voiceNote ?? null,\n        protectionContext,\n      );\n    }\n  }\n\n  /**\n   * 处理聊天请求错误\n   */\n  private handleChatRequestError(res: Response, unknownError: unknown, req: ExtendedRequest): void {\n    const typedError = createErrorFromUnknown(unknownError, {\n      component: 'ChatController',\n      operation: 'chatCompletions',\n      url: req.originalUrl,\n      method: req.method,\n    });\n\n    logger.error('聊天请求处理失败', { error: typedError });\n\n    // 如果响应头已发送（流式响应中），不能再发送JSON响应\n    if (res.headersSent) {\n      return;\n    }\n\n    const apiError: ApiError = {\n      code: typedError.code,\n      message: typedError.getUserMessage(),\n      timestamp: typedError.timestamp,\n      ...(process.env.NODE_ENV === 'development' && typedError.context && {\n        details: typedError.context as JsonValue,\n      }),\n    };\n\n    const statusCode = this.getErrorStatusCode(typedError);\n    res.status(statusCode).json(apiError);\n  }\n\n  /**\n   * 处理普通（非流式）聊天请求\n   */\n  private async handleNormalRequest(\n    res: Response,\n    agentId: string,\n    messages: ChatMessage[],\n    options: ChatOptions | undefined,\n    sessionId: string,\n    _attachments?: ChatAttachmentMetadata[] | null,\n    _voiceNote?: VoiceNoteMetadata | null,\n    _protectionContext?: unknown,\n  ): Promise<void> {\n    try {\n      const response = await this.chatService.sendMessage(\n        agentId,\n        messages,\n        options,\n      );\n      const assistantContent = response?.choices?.[0]?.message?.content ?? '';\n\n      try {\n        await this.historyService.appendMessage({\n          sessionId,\n          agentId,\n          role: 'assistant',\n          content: assistantContent,\n          ...(options?.responseChatItemId ? {\n            metadata: { responseChatItemId: options.responseChatItemId },\n          } : {}),\n        });\n      } catch (unknownError) {\n        const typedError = createErrorFromUnknown(unknownError, {\n          component: 'ChatController',\n          operation: 'recordAssistantMessage',\n          sessionId,\n          agentId,\n        });\n        logger.warn('[ChatController] 记录助手消息失败', { error: typedError.message });\n      }\n\n      // ✅ 统一响应格式，确保包含content字段\n      ApiResponseHandler.sendSuccess(res, {\n        content: assistantContent,\n        chatId: sessionId,\n        ...response,\n      }, {\n        message: '聊天请求成功',\n        code: 'SUCCESS', // ✅ 使用测试期望的code\n      });\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'handleNormalRequest',\n        sessionId,\n        agentId,\n      });\n\n      logger.error('普通聊天请求失败', { error: typedError.message });\n\n      // 检查是否是降级响应\n      if (typeof unknownError === 'object' && unknownError !== null && 'fallbackUsed' in unknownError) {\n        const fallbackError = unknownError as { fallbackUsed?: boolean; data?: JsonValue };\n        if (fallbackError.fallbackUsed) {\n          ApiResponseHandler.sendSuccess(res, fallbackError.data ?? null, {\n            message: '已返回降级响应',\n          });\n          return;\n        }\n      }\n\n      const apiError = typedError.toApiError();\n      const statusCode = this.getErrorStatusCode(typedError);\n      res.status(statusCode).json(apiError);\n    }\n  }\n\n  /**\n   * 处理流式聊天请求 - 修复 FastGPT 流式响应\n   */\n  private async handleStreamRequest(\n    res: Response,\n    agentId: string,\n    messages: ChatMessage[],\n    options: ChatOptions | undefined,\n    sessionId: string,\n    _attachments?: ChatAttachmentMetadata[] | null,\n    _voiceNote?: VoiceNoteMetadata | null,\n    _protectionContext?: unknown,\n  ): Promise<void> {\n    try {\n      // 标准 SSE 响应头\n      res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');\n      res.setHeader('Cache-Control', 'no-cache, no-transform');\n      res.setHeader('Connection', 'keep-alive');\n      res.setHeader('X-Accel-Buffering', 'no'); // 兼容反向代理\n      // 立即刷新头部，避免缓冲\n      const extendedRes = res as ExtendedResponse;\n      if (typeof extendedRes.flushHeaders === 'function') {\n        extendedRes.flushHeaders();\n      }\n\n      logger.debug('🚀 开始处理流式请求', { agentId });\n\n      // 发送初始化事件\n      this.sendSSEEvent(res, 'chatId', { chatId: sessionId } as JsonValue);\n      this.sendSSEEvent(res, 'start', {\n        id: generateId(),\n        timestamp: new Date().toISOString(),\n        agentId,\n      } as JsonValue);\n\n      let assistantContent = '';\n\n      // 发送流式消息\n      await this.chatService.sendStreamMessage(\n        agentId,\n        messages,\n        // 内容回调 - 确保正确调用\n        (chunk: string) => {\n          logger.debug('📨 收到内容块', { preview: chunk.substring(0, LOG_PREVIEW_MAX_LENGTH) });\n          assistantContent += chunk;\n          this.sendSSEEvent(res, 'chunk', { content: chunk } as JsonValue);\n        },\n        // 状态回调 - 确保正确调用\n        (status: StreamStatus) => {\n          logger.debug('📊 收到状态更新', { status });\n          this.sendSSEEvent(res, 'status', DynamicDataConverter.toSafeJsonValue(status));\n\n          // 如果是完成或错误状态，结束响应\n          if (status.type === 'complete' || status.type === 'error') {\n            logger.debug('✅ 流式响应完成');\n            this.sendSSEEvent(res, 'end', {\n              timestamp: new Date().toISOString(),\n            } as JsonValue);\n            res.end();\n          }\n        },\n        options,\n        // 事件透传回调：关注 FastGPT 的 interactive 以及 chatId 事件\n        (eventName: string, data: SSEEventData) => {\n          if (!eventName) {\n            return;\n          }\n\n          if (eventName === 'interactive') {\n            let payloadPreview = '[Unserializable]';\n            try {\n              payloadPreview = JSON.stringify(data).slice(0, 300);\n            } catch {\n          // 忽略序列化错误\n        }\n            logger.debug('🧩 收到交互节点事件 interactive', { payloadPreview });\n            this.sendSSEEvent(res, 'interactive', DynamicDataConverter.toSafeJsonValue(data));\n            return;\n          }\n\n          if (eventName === 'chatId') {\n            const dataObj = (typeof data === 'object' && data !== null) ? data as Record<string, unknown> : {};\n            const chatId = (dataObj.chatId ?? dataObj.id ?? data) as string | JsonValue;\n            logger.debug('🆔 透传本次使用的 chatId', { chatId });\n            this.sendSSEEvent(res, 'chatId', DynamicDataConverter.toSafeJsonValue(data));\n            return;\n          }\n\n          logger.debug('📎 透传 FastGPT 事件', { eventName });\n          this.sendSSEEvent(res, eventName, DynamicDataConverter.toSafeJsonValue(data));\n        },\n      );\n\n      if (assistantContent) {\n        try {\n          await this.historyService.appendMessage({\n            sessionId,\n            agentId,\n            role: 'assistant',\n            content: assistantContent,\n            ...(options?.responseChatItemId ? {\n              metadata: { responseChatItemId: options.responseChatItemId },\n            } : {}),\n          });\n        } catch (unknownError) {\n          const typedError = createErrorFromUnknown(unknownError, {\n            component: 'ChatController',\n            operation: 'recordStreamAssistantMessage',\n            sessionId,\n            agentId,\n          });\n          logger.warn('[ChatController] 记录流式助手消息失败', { error: typedError.message });\n        }\n      }\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'handleStreamRequest',\n        sessionId,\n        agentId,\n      });\n\n      logger.error('❌ 流式聊天请求失败', { error: typedError.message });\n\n      // 检查是否是降级响应\n      if (typeof unknownError === 'object' && unknownError !== null && 'fallbackUsed' in unknownError) {\n        const fallbackError = unknownError as { fallbackUsed?: boolean; data?: JsonValue };\n        if (fallbackError.fallbackUsed) {\n          this.sendSSEEvent(res, 'fallback', (fallbackError.data ?? null) as JsonValue);\n          res.end();\n          return;\n        }\n      }\n\n      // 发送错误事件\n      this.sendSSEEvent(res, 'error', {\n        code: typedError.code,\n        message: typedError.message,\n        timestamp: typedError.timestamp,\n      } as JsonValue);\n\n      res.end();\n    }\n  }\n\n  /**\n   * 发送SSE事件\n   */\n  private sendSSEEvent(res: Response, event: string, data: unknown): void {\n    try {\n      res.write(`event: ${event}\\n`);\n      res.write(`data: ${JSON.stringify(data)}\\n\\n`);\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'sendSSEEvent',\n        context: { event, dataType: typeof data },\n      });\n      logger.error('发送SSE事件失败', { error: typedError.message });\n    }\n  }\n\n  /**\n   * 聊天初始化接口\n   * GET /api/chat/init?appId=xxx&chatId=xxx&stream=true\n   */\n  chatInit = async (req: ExtendedRequest, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      // 参数验证\n      const { error, value } = this.chatInitSchema.validate(req.query);\n      if (error) {\n        const apiError: ApiError = {\n          code: 'VALIDATION_ERROR',\n          message: ErrorExtractor.extractMessage(error) ?? '请求参数校验失败',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const { appId, chatId, stream } = value;\n\n      logger.debug('🚀 处理聊天初始化请求', { appId, chatId, stream });\n\n      // 检查智能体是否存在且激活\n      const agent = await this.agentService.getAgent(appId);\n      if (!agent) {\n        const apiError: ApiError = {\n          code: 'AGENT_NOT_FOUND',\n          message: `智能体不存在: ${appId}`,\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_NOT_FOUND).json(apiError);\n        return;\n      }\n\n      if (!agent.isActive) {\n        const apiError: ApiError = {\n          code: 'AGENT_INACTIVE',\n          message: `智能体未激活: ${appId}`,\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      await this.recordGeoSnapshot(req, agent.id, typeof chatId === 'string' ? chatId : null);\n\n      // 根据stream参数决定处理方式\n      if (stream) {\n        await this.handleInitStreamRequest(res, appId, chatId);\n      } else {\n        await this.handleInitNormalRequest(res, appId, chatId);\n      }\n\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'chatInit',\n        url: req.originalUrl,\n        method: req.method,\n      });\n\n      logger.error('聊天初始化请求处理失败', { error: typedError.message });\n\n      // 如果响应头已发送（流式响应中），不能再发送JSON响应\n      if (res.headersSent) {\n        return;\n      }\n\n      const apiError = typedError.toApiError();\n\n      if (process.env.NODE_ENV === 'development') {\n        apiError.details = {\n          originalError: typedError.message,\n          ...(typedError.stack && { stack: typedError.stack }),\n        } as JsonValue;\n      }\n\n      res.status(HTTP_STATUS_INTERNAL_ERROR).json(apiError);\n    }\n  };\n\n  /**\n   * 处理普通（非流式）初始化请求\n   */\n  private async handleInitNormalRequest(\n    res: Response,\n    appId: string,\n    chatId?: string,\n  ): Promise<void> {\n    try {\n      const initData = await this.initService.getInitData(appId, chatId);\n\n      ApiResponseHandler.sendSuccess(res, initData, {\n        message: '初始化数据获取成功',\n      });\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'handleInitNormalRequest',\n        url: res.req?.originalUrl,\n        method: res.req?.method,\n        context: { appId, chatId },\n      });\n\n      const apiError = typedError.toApiError();\n      res.status(HTTP_STATUS_INTERNAL_ERROR).json(apiError);\n    }\n  }\n\n  /**\n   * 处理流式初始化请求\n   */\n  private async handleInitStreamRequest(\n    res: Response,\n    appId: string,\n    chatId?: string,\n  ): Promise<void> {\n    try {\n      // 设置SSE响应头\n      res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');\n      res.setHeader('Cache-Control', 'no-cache, no-transform');\n      res.setHeader('Connection', 'keep-alive');\n      res.setHeader('X-Accel-Buffering', 'no');\n\n      // 立即刷新头部\n      const extendedRes = res as ExtendedResponse;\n      if (typeof extendedRes.flushHeaders === 'function') {\n        extendedRes.flushHeaders();\n      }\n\n      logger.debug('🚀 开始处理流式初始化请求', { appId });\n      logger.debug('ℹ️ 初始化流仅包含 start/chunk/complete/end 事件，不包含 interactive 事件');\n\n      // 发送初始化事件\n      this.sendSSEEvent(res, 'start', {\n        id: generateId(),\n        timestamp: new Date().toISOString(),\n        appId,\n        type: 'init',\n      } as JsonValue);\n\n      // 调用流式初始化服务\n      await this.initService.getInitDataStream(\n        appId,\n        chatId,\n        // 内容回调 - 流式输出开场白\n        (chunk: string) => {\n          this.sendSSEEvent(res, 'chunk', { content: chunk } as JsonValue);\n        },\n        // 完成回调 - 返回完整初始化数据\n        (initData) => {\n          logger.debug('✅ 初始化数据获取完成');\n          this.sendSSEEvent(res, 'complete', DynamicDataConverter.toSafeJsonValue({\n            data: initData,\n            timestamp: new Date().toISOString(),\n          }));\n          this.sendSSEEvent(res, 'end', {\n            timestamp: new Date().toISOString(),\n          } as JsonValue);\n          res.end();\n        },\n        // 错误回调\n        (unknownError) => {\n          const typedError = createErrorFromUnknown(unknownError, {\n            component: 'ChatController',\n            operation: 'initDataStream',\n            context: { appId, chatId },\n          });\n          logger.error('❌ 初始化流式处理失败', { error: typedError.message });\n          this.sendSSEEvent(res, 'error', {\n            code: typedError.code,\n            message: typedError.message,\n            timestamp: typedError.timestamp,\n          } as JsonValue);\n          this.sendSSEEvent(res, 'end', {\n            timestamp: new Date().toISOString(),\n          } as JsonValue);\n          res.end();\n        },\n      );\n\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'handleInitStreamRequest',\n        url: res.req?.originalUrl,\n        method: res.req?.method,\n        context: { appId, chatId },\n      });\n      logger.error('❌ 流式初始化请求处理失败', { error: typedError.message });\n\n      if (!res.headersSent) {\n        const apiError = typedError.toApiError();\n        res.status(HTTP_STATUS_INTERNAL_ERROR).json(apiError);\n      } else {\n        this.sendSSEEvent(res, 'error', {\n          code: typedError.code,\n          message: typedError.message,\n          timestamp: typedError.timestamp,\n        } as JsonValue);\n        res.end();\n      }\n    }\n  }\n  /**\n   * 点赞/点踩反馈\n   * POST: /api/chat/feedback\n   */\n  updateUserFeedback = async (req: ExtendedRequest, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      const { error, value } = this.feedbackSchema.validate(req.body);\n      if (error) {\n        const apiError: ApiError = {\n          code: 'VALIDATION_ERROR',\n          message: ErrorExtractor.extractMessage(error) ?? '请求参数校验失败',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const { agentId, chatId, dataId, userGoodFeedback, userBadFeedback } = value as {\n        agentId: string;\n        chatId: string;\n        dataId: string;\n        userGoodFeedback?: boolean;\n        userBadFeedback?: boolean;\n      };\n\n      const feedbackData: {\n        chatId: string;\n        dataId: string;\n        userGoodFeedback?: string;\n        userBadFeedback?: string;\n      } = {\n        chatId,\n        dataId,\n      };\n      if (userGoodFeedback !== undefined) {\n        feedbackData.userGoodFeedback = userGoodFeedback ? 'true' : 'false';\n      }\n      if (userBadFeedback !== undefined) {\n        feedbackData.userBadFeedback = userBadFeedback ? 'true' : 'false';\n      }\n\n      await this.fastgptSessionService.updateUserFeedback(agentId, feedbackData);\n\n      ApiResponseHandler.sendSuccess(res, null, {\n        message: '反馈提交成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'updateUserFeedback',\n        url: req.originalUrl,\n        method: req.method,\n      });\n      logger.error('提交点赞/点踩反馈失败', { error: typedError.message });\n\n      const apiError = typedError.toApiError();\n      let status = this.getErrorStatusCode(typedError);\n\n      // 特殊处理某些错误代码\n      const originalErrorObj = SafeAccess.getObject(typedError.context, 'originalError');\n      const originalError = originalErrorObj instanceof Error ? originalErrorObj : undefined;\n      if (originalError) {\n        const errCode = ErrorExtractor.extractCode(originalError);\n        const axiosStatus = ErrorExtractor.extractStatus(originalError);\n        if (errCode === 'NOT_FOUND') {\n          status = HTTP_STATUS_NOT_FOUND;\n          apiError.code = 'AGENT_NOT_FOUND';\n        } else if (errCode === 'INVALID_PROVIDER' || errCode === 'INVALID_APP_ID') {\n          status = HTTP_STATUS_BAD_REQUEST;\n          apiError.code = errCode;\n        } else if (axiosStatus === HTTP_STATUS_NOT_FOUND) {\n          status = HTTP_STATUS_SERVER_ERROR;\n          apiError.code = 'UPSTREAM_NOT_FOUND';\n        } else if (axiosStatus === HTTP_STATUS_UNAUTHORIZED) {\n          status = HTTP_STATUS_UNAUTHORIZED;\n          apiError.code = 'UPSTREAM_UNAUTHORIZED';\n        } else if (axiosStatus === HTTP_STATUS_TIMEOUT) {\n          status = HTTP_STATUS_GATEWAY_TIMEOUT;\n          apiError.code = 'UPSTREAM_TIMEOUT';\n        }\n      }\n\n      res.status(status).json(apiError);\n    }\n  };\n\n  /**\n   * 获取会话历史列表\n   * GET /api/chat/history?agentId=xxx\n   */\n  listChatHistories = async (req: ExtendedRequest, res: Response): Promise<void> => {\n    try {\n      const { error, value } = this.historyListSchema.validate(req.query);\n      if (error) {\n        this.sendValidationError(res, error);\n        return;\n      }\n\n      const { agentId, page, pageSize } = value as { agentId: string; page?: number; pageSize?: number };\n\n      // 验证智能体\n      const agentValidation = await this.validateAgentForHistory(agentId);\n      if (!agentValidation.success) {\n        this.sendAgentValidationError(res, agentValidation);\n        return;\n      }\n\n      // 构建分页参数\n      const pagination = this.buildPaginationParams(page, pageSize);\n\n      // 获取历史记录\n      const histories: FastGPTChatHistorySummary[] = await this.fastgptSessionService.listHistories(\n        agentId,\n        pagination,\n      );\n\n      // 构建额外元数据\n      const extraMetadata = this.buildHistoryMetadata(pagination);\n\n      // 发送成功响应\n      ApiResponseHandler.sendSuccess(res, histories, {\n        message: '获取聊天历史成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n        ...(Object.keys(extraMetadata).length\n          ? { metadata: { extra: extraMetadata } }\n          : {}),\n      });\n    } catch (unknownError) {\n      this.handleHistoryListError(res, unknownError, req);\n    }\n  };\n\n  /**\n   * 验证智能体是否支持历史记录查询\n   */\n  private async validateAgentForHistory(agentId: string): Promise<{ success: boolean; reason?: string; status?: number }> {\n    const agent = await this.agentService.getAgent(agentId);\n    if (!agent) {\n      return { success: false, reason: 'AGENT_NOT_FOUND', status: HTTP_STATUS_NOT_FOUND };\n    }\n\n    if (agent.provider !== 'fastgpt') {\n      return { success: false, reason: 'INVALID_PROVIDER', status: HTTP_STATUS_BAD_REQUEST };\n    }\n\n    return { success: true };\n  }\n\n  /**\n   * 发送智能体验证错误响应\n   */\n  private sendAgentValidationError(res: Response, validation: { reason?: string; status?: number }): void {\n    const messages = {\n      'AGENT_NOT_FOUND': '智能体不存在',\n      'INVALID_PROVIDER': '智能体不支持远程会话历史查询',\n    };\n\n    const apiError: ApiError = {\n      code: validation.reason ?? 'VALIDATION_ERROR',\n      message: validation.reason ? messages[validation.reason as keyof typeof messages] ?? '参数验证失败' : '参数验证失败',\n      timestamp: new Date().toISOString(),\n    };\n\n    const statusCode = validation.status ?? HTTP_STATUS_BAD_REQUEST;\n    res.status(statusCode).json(apiError);\n  }\n\n  /**\n   * 构建分页参数\n   */\n  private buildPaginationParams(page?: number, pageSize?: number): { page?: number; pageSize?: number } {\n    const pagination: { page?: number; pageSize?: number } = {};\n    if (typeof page === 'number') {\n      pagination.page = page;\n    }\n    if (typeof pageSize === 'number') {\n      pagination.pageSize = pageSize;\n    }\n    return pagination;\n  }\n\n  /**\n   * 构建历史记录元数据\n   */\n  private buildHistoryMetadata(pagination: { page?: number; pageSize?: number }): Record<string, JsonValue> {\n    const extraMetadata: Record<string, JsonValue> = {};\n    if (typeof pagination.page === 'number') {\n      extraMetadata.page = pagination.page;\n    }\n    if (typeof pagination.pageSize === 'number') {\n      extraMetadata.pageSize = pagination.pageSize;\n    }\n    return extraMetadata;\n  }\n\n  /**\n   * 处理历史列表错误\n   */\n  private handleHistoryListError(res: Response, unknownError: unknown, req: ExtendedRequest): void {\n    const typedError = createErrorFromUnknown(unknownError, {\n      component: 'ChatController',\n      operation: 'listChatHistories',\n      url: req.originalUrl,\n      method: req.method,\n    });\n    logger.error('获取聊天历史列表失败', { error: typedError.message });\n\n    const apiError = typedError.toApiError();\n    let status = this.getErrorStatusCode(typedError);\n\n    // 错误语义映射\n    const originalErrorObj = SafeAccess.getObject(typedError.context, 'originalError');\n    const originalError = originalErrorObj instanceof Error ? originalErrorObj : undefined;\n    if (originalError) {\n      status = this.mapErrorToHttpStatus(originalError, apiError, status);\n    }\n\n    res.status(status).json(apiError);\n  }\n\n  /**\n   * 将错误映射到HTTP状态码和错误代码\n   */\n  private mapErrorToHttpStatus(\n    originalError: Error,\n    apiError: ApiError,\n    defaultStatus: number,\n  ): number {\n    let status = defaultStatus;\n    const errCode = ErrorExtractor.extractCode(originalError);\n    const axiosStatus = ErrorExtractor.extractStatus(originalError);\n\n    if (errCode === 'NOT_FOUND') {\n      status = HTTP_STATUS_NOT_FOUND;\n      apiError.code = 'AGENT_NOT_FOUND';\n    } else if (errCode === 'INVALID_PROVIDER' || errCode === 'INVALID_APP_ID') {\n      status = HTTP_STATUS_BAD_REQUEST;\n      apiError.code = errCode;\n    } else if (axiosStatus === HTTP_STATUS_NOT_FOUND) {\n      status = HTTP_STATUS_SERVER_ERROR;\n      apiError.code = 'UPSTREAM_NOT_FOUND';\n    } else if (axiosStatus === HTTP_STATUS_UNAUTHORIZED) {\n      status = HTTP_STATUS_UNAUTHORIZED;\n      apiError.code = 'UPSTREAM_UNAUTHORIZED';\n    } else if (axiosStatus === HTTP_STATUS_TIMEOUT) {\n      status = HTTP_STATUS_GATEWAY_TIMEOUT;\n      apiError.code = 'UPSTREAM_TIMEOUT';\n    }\n\n    return status;\n  }\n\n  /**\n   * 获取指定会话历史详情\n   * GET /api/chat/history/:chatId?agentId=xxx\n   */\n  getChatHistory = async (req: ExtendedRequest, res: Response): Promise<void> => {\n    try {\n      // 验证用户认证\n      const authResult = await this.authenticateUser(req);\n      if (!authResult.success) {\n        this.sendAuthError(res, authResult.error || '未授权访问');\n        return;\n      }\n\n      // 提取和验证会话ID\n      const chatId = this.extractChatId(req.params);\n      if (!chatId) {\n        this.sendChatIdRequiredError(res);\n        return;\n      }\n\n      // 验证查询参数\n      const { error: validationError, value } = this.historyDetailSchema.validate(req.query);\n      if (validationError) {\n        this.sendValidationError(res, validationError);\n        return;\n      }\n\n      const { agentId } = value as { agentId: string };\n\n      // 验证智能体\n      const agentValidation = await this.validateAgentForHistory(agentId);\n      if (!agentValidation.success) {\n        this.sendAgentValidationError(res, agentValidation);\n        return;\n      }\n\n      // 获取历史详情\n      const detail = await this.fetchChatHistoryDetail(agentId, chatId);\n\n      // 验证访问权限\n      if (!this.validateAccessPermission(detail, authResult.user!)) {\n        this.sendForbiddenError(res);\n        return;\n      }\n\n      // 发送成功响应\n      ApiResponseHandler.sendSuccess(res, detail, {\n        message: '获取聊天历史详情成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (err: unknown) {\n      this.handleGetHistoryError(res, err);\n    }\n  };\n\n  /**\n   * 验证用户认证\n   */\n  private async authenticateUser(\n    req: ExtendedRequest,\n  ): Promise<{ success: boolean; user?: AuthUser; error?: string }> {\n    try {\n      const authUser = await requireAuthenticatedUser(req);\n      return { success: true, user: authUser };\n    } catch (authError) {\n      const error = authError instanceof Error && authError.message === 'TOKEN_EXPIRED'\n        ? '登录已过期，请重新登录'\n        : '未授权访问';\n      return { success: false, error };\n    }\n  }\n\n  /**\n   * 发送认证错误响应\n   */\n  private sendAuthError(res: Response, errorMessage: string): void {\n    const apiError: ApiError = {\n      code: 'UNAUTHORIZED',\n      message: errorMessage,\n      timestamp: new Date().toISOString(),\n    };\n    res.status(HTTP_STATUS_UNAUTHORIZED).json(apiError);\n  }\n\n  /**\n   * 提取会话ID\n   */\n  private extractChatId(params: any): string | null {\n    const { chatId: pathChatId, sessionId } = params as { chatId?: string; sessionId?: string };\n    return pathChatId ?? sessionId ?? null;\n  }\n\n  /**\n   * 发送chatId缺失错误\n   */\n  private sendChatIdRequiredError(res: Response): void {\n    const apiError: ApiError = {\n      code: 'CHAT_ID_REQUIRED',\n      message: 'chatId 不能为空',\n      timestamp: new Date().toISOString(),\n    };\n    res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n  }\n\n  /**\n   * 发送禁止访问错误\n   */\n  private sendForbiddenError(res: Response): void {\n    const apiError: ApiError = {\n      code: 'FORBIDDEN',\n      message: '无权访问该会话记录',\n      timestamp: new Date().toISOString(),\n    };\n    res.status(HTTP_STATUS_FORBIDDEN).json(apiError);\n  }\n\n  /**\n   * 获取聊天历史详情\n   */\n  private async fetchChatHistoryDetail(agentId: string, chatId: string): Promise<FastGPTChatHistoryDetail> {\n    return await this.fastgptSessionService.getHistoryDetail(agentId, chatId);\n  }\n\n  /**\n   * 验证访问权限\n   */\n  private validateAccessPermission(detail: FastGPTChatHistoryDetail, user: AuthUser): boolean {\n    if (\n      detail.sessionInfo?.userId &&\n      detail.sessionInfo.userId !== user.id &&\n      user.role !== 'admin'\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * 处理获取历史详情错误\n   */\n  private handleGetHistoryError(res: Response, err: unknown): void {\n    logger.error('获取聊天历史失败', { error: err });\n    const apiError: ApiError = {\n      code: 'GET_HISTORY_FAILED',\n      message: err instanceof Error ? err.message : '获取聊天历史失败',\n      timestamp: new Date().toISOString(),\n    };\n\n    let status = 500;\n    const errCode = ErrorExtractor.extractCode(err);\n    const axiosStatus = ErrorExtractor.extractStatus(err);\n\n    if (errCode === 'NOT_FOUND') {\n      status = HTTP_STATUS_NOT_FOUND;\n      apiError.code = 'AGENT_NOT_FOUND';\n    } else if (errCode === 'INVALID_PROVIDER' || errCode === 'INVALID_APP_ID') {\n      status = HTTP_STATUS_BAD_REQUEST;\n      apiError.code = errCode;\n    } else if (axiosStatus === HTTP_STATUS_NOT_FOUND) {\n      status = HTTP_STATUS_SERVER_ERROR;\n      apiError.code = 'UPSTREAM_NOT_FOUND';\n    } else if (axiosStatus === HTTP_STATUS_UNAUTHORIZED) {\n      status = HTTP_STATUS_UNAUTHORIZED;\n      apiError.code = 'UPSTREAM_UNAUTHORIZED';\n    } else if (axiosStatus === HTTP_STATUS_TIMEOUT) {\n      status = HTTP_STATUS_GATEWAY_TIMEOUT;\n      apiError.code = 'UPSTREAM_TIMEOUT';\n    }\n\n    res.status(status).json(apiError);\n  }\n\n  /**\n   * 删除指定会话历史\n   * DELETE /api/chat/history/:chatId?agentId=xxx\n   */\n  deleteChatHistory = async (req: ExtendedRequest, res: Response): Promise<void> => {\n    try {\n      const chatIdParam = req.params.chatId;\n      if (!chatIdParam) {\n        const apiError: ApiError = {\n          code: 'VALIDATION_ERROR',\n          message: '缺少 chatId 参数',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const chatId = chatIdParam;\n      const { error, value } = this.historyDeleteSchema.validate(req.query);\n      if (error) {\n        const apiError: ApiError = {\n          code: 'VALIDATION_ERROR',\n          message: ErrorExtractor.extractMessage(error) ?? '请求参数校验失败',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const { agentId } = value as { agentId: string };\n      await this.fastgptSessionService.deleteHistory(agentId, chatId);\n\n      ApiResponseHandler.sendSuccess(res, null, {\n        message: '聊天历史删除成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (err: unknown) {\n      logger.error('删除聊天历史失败', { error: err });\n      const apiError: ApiError = {\n        code: 'DELETE_HISTORY_FAILED',\n        message: err instanceof Error ? err.message : '删除聊天历史失败',\n        timestamp: new Date().toISOString(),\n      };\n      let status = 500;\n      const errCode = ErrorExtractor.extractCode(err);\n      const axiosStatus = ErrorExtractor.extractStatus(err);\n      if (errCode === 'NOT_FOUND') {\n        status = HTTP_STATUS_NOT_FOUND;\n        apiError.code = 'AGENT_NOT_FOUND';\n      } else if (errCode === 'INVALID_PROVIDER' || errCode === 'INVALID_APP_ID') {\n        status = HTTP_STATUS_BAD_REQUEST;\n        apiError.code = errCode;\n      } else if (axiosStatus === HTTP_STATUS_NOT_FOUND) {\n        status = HTTP_STATUS_SERVER_ERROR;\n        apiError.code = 'UPSTREAM_NOT_FOUND';\n      } else if (axiosStatus === HTTP_STATUS_UNAUTHORIZED) {\n        status = HTTP_STATUS_UNAUTHORIZED;\n        apiError.code = 'UPSTREAM_UNAUTHORIZED';\n      } else if (axiosStatus === HTTP_STATUS_TIMEOUT) {\n        status = HTTP_STATUS_GATEWAY_TIMEOUT;\n        apiError.code = 'UPSTREAM_TIMEOUT';\n      }\n      res.status(status).json(apiError);\n    }\n  };\n\n  private async ensureUploadDirectory(): Promise<void> {\n    try {\n      await fs.mkdir(this.uploadDir, { recursive: true });\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'ensureUploadDirectory',\n        context: { uploadDir: this.uploadDir },\n      });\n      logger.warn('[ChatController] 创建上传目录失败', { error: typedError.message });\n    }\n  }\n\n  private sanitizeFilename(filename: string): string {\n    return filename.replace(/[^a-zA-Z0-9._-]/g, '_');\n  }\n\n  uploadAttachment = async (req: ExtendedRequest, res: Response): Promise<void> => {\n    try {\n      const { error, value } = this.attachmentUploadSchema.validate(req.body);\n      if (error) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'VALIDATION_ERROR',\n          message: error.details?.[0]?.message ?? '附件参数校验失败',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const buffer = Buffer.from(value.data, 'base64');\n      if (!buffer || buffer.length === 0) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'INVALID_ATTACHMENT',\n          message: '附件内容不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (buffer.length > value.size * 1.2) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'INVALID_ATTACHMENT',\n          message: '附件大小与声明不符',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      await this.ensureUploadDirectory();\n\n      const fileId = generateId();\n      const safeName = this.sanitizeFilename(value.filename);\n      const finalName = `${fileId}-${safeName}`;\n      const filePath = path.join(this.uploadDir, finalName);\n\n      await fs.writeFile(filePath, buffer);\n\n      const metadata: ChatAttachmentMetadata = {\n        id: fileId,\n        name: value.filename,\n        mimeType: value.mimeType,\n        size: buffer.length,\n        url: `/uploads/${finalName}`,\n        source: value.source ?? 'upload',\n      };\n\n      ApiResponseHandler.sendSuccess(res, metadata, {\n        message: '附件上传成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'uploadAttachment',\n        url: req.originalUrl,\n        method: req.method,\n      });\n      logger.error('[ChatController] 上传附件失败', { error: typedError.message });\n      const apiError = typedError.toApiError();\n      res.status(HTTP_STATUS_INTERNAL_ERROR).json(apiError);\n    }\n  };\n\n  /**\n   * 获取会话消息列表\n   * GET /api/chat/sessions/:sessionId/messages\n   */\n  getSessionMessages = async (req: ExtendedRequest, res: Response): Promise<void> => {\n    try {\n      const { sessionId } = req.params as { sessionId?: string };\n\n      if (!sessionId) {\n        const apiError: ApiError = {\n          code: 'VALIDATION_ERROR',\n          message: 'sessionId 不能为空',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const { error, value } = this.historyMessagesSchema.validate(req.query);\n      if (error) {\n        const apiError: ApiError = {\n          code: 'VALIDATION_ERROR',\n          message: ErrorExtractor.extractMessage(error) ?? '请求参数校验失败',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const { limit, offset, role: roleRaw } = value as {\n        limit?: number;\n        offset?: number;\n        role?: unknown;\n      };\n\n      const queryOptions: ChatHistoryQueryOptions = {};\n      if (typeof limit === 'number') {\n        queryOptions.limit = limit;\n      }\n      if (typeof offset === 'number') {\n        queryOptions.offset = offset;\n      }\n\n      const normalizedRoles = this.parseHistoryRoleFilter(roleRaw);\n      if (normalizedRoles.length > 0) {\n        queryOptions.roles = normalizedRoles;\n      }\n\n      const history = await this.historyService.getHistory(sessionId, queryOptions);\n\n      if (!history.session) {\n        const apiError: ApiError = {\n          code: 'SESSION_NOT_FOUND',\n          message: `未找到会话: ${sessionId}`,\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_NOT_FOUND).json(apiError);\n        return;\n      }\n\n      ApiResponseHandler.sendSuccess(res, history, {\n        message: '获取会话消息成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'getSessionMessages',\n        url: req.originalUrl,\n        method: req.method,\n      });\n      logger.error('获取会话消息失败', { error: typedError.message });\n\n      const apiError = typedError.toApiError();\n      let status = this.getErrorStatusCode(typedError);\n\n      const originalErrorObj = SafeAccess.getObject(typedError.context, 'originalError');\n      const originalError = originalErrorObj instanceof Error ? originalErrorObj : undefined;\n      if (originalError) {\n        const errCode = ErrorExtractor.extractCode(originalError);\n        const axiosStatus = ErrorExtractor.extractStatus(originalError);\n        if (errCode === 'NOT_FOUND') {\n          status = HTTP_STATUS_NOT_FOUND;\n          apiError.code = 'SESSION_NOT_FOUND';\n        } else if (errCode === 'INVALID_PROVIDER' || errCode === 'INVALID_APP_ID') {\n          status = HTTP_STATUS_BAD_REQUEST;\n          apiError.code = errCode;\n        } else if (axiosStatus === HTTP_STATUS_NOT_FOUND) {\n          status = HTTP_STATUS_SERVER_ERROR;\n          apiError.code = 'UPSTREAM_NOT_FOUND';\n        } else if (axiosStatus === HTTP_STATUS_UNAUTHORIZED) {\n          status = HTTP_STATUS_UNAUTHORIZED;\n          apiError.code = 'UPSTREAM_UNAUTHORIZED';\n        } else if (axiosStatus === HTTP_STATUS_TIMEOUT) {\n          status = HTTP_STATUS_GATEWAY_TIMEOUT;\n          apiError.code = 'UPSTREAM_TIMEOUT';\n        }\n      }\n\n      res.status(status).json(apiError);\n    }\n  };\n\n  /**\n   * 清空指定智能体的历史\n   * DELETE /api/chat/history?agentId=xxx\n   */\n  clearChatHistories = async (req: ExtendedRequest, res: Response): Promise<void> => {\n    try {\n      const { error, value } = this.historyDeleteSchema.validate(req.query);\n      if (error) {\n        const apiError: ApiError = {\n          code: 'VALIDATION_ERROR',\n          message: ErrorExtractor.extractMessage(error) ?? '请求参数校验失败',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n        return;\n      }\n\n      const { agentId } = value as { agentId: string };\n      await this.fastgptSessionService.clearHistories(agentId);\n\n      ApiResponseHandler.sendSuccess(res, null, {\n        message: '聊天历史已清空',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (err: unknown) {\n      logger.error('清空聊天历史失败', { error: err });\n      const apiError: ApiError = {\n        code: 'CLEAR_HISTORY_FAILED',\n        message: err instanceof Error ? err.message : '清空聊天历史失败',\n        timestamp: new Date().toISOString(),\n      };\n      let status = 500;\n      const errCode = ErrorExtractor.extractCode(err);\n      const axiosStatus = ErrorExtractor.extractStatus(err);\n      if (errCode === 'NOT_FOUND') {\n        status = HTTP_STATUS_NOT_FOUND;\n        apiError.code = 'AGENT_NOT_FOUND';\n      } else if (errCode === 'INVALID_PROVIDER' || errCode === 'INVALID_APP_ID') {\n        status = HTTP_STATUS_BAD_REQUEST;\n        apiError.code = errCode;\n      } else if (axiosStatus === HTTP_STATUS_NOT_FOUND) {\n        status = HTTP_STATUS_SERVER_ERROR;\n        apiError.code = 'UPSTREAM_NOT_FOUND';\n      } else if (axiosStatus === HTTP_STATUS_UNAUTHORIZED) {\n        status = HTTP_STATUS_UNAUTHORIZED;\n        apiError.code = 'UPSTREAM_UNAUTHORIZED';\n      } else if (axiosStatus === HTTP_STATUS_TIMEOUT) {\n        status = HTTP_STATUS_GATEWAY_TIMEOUT;\n        apiError.code = 'UPSTREAM_TIMEOUT';\n      }\n      res.status(status).json(apiError);\n    }\n  };\n\n  /**\n   * 重新生成指定消息\n   * POST /api/chat/history/:chatId/retry\n   */\n  retryChatMessage = async (req: ExtendedRequest, res: Response): Promise<void> => {\n    const { chatId: chatIdParam } = req.params as { chatId?: string };\n    if (!chatIdParam) {\n      const apiError: ApiError = {\n        code: 'VALIDATION_ERROR',\n        message: '缺少 chatId 参数',\n        timestamp: new Date().toISOString(),\n      };\n      res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n      return;\n    }\n\n    const chatId = chatIdParam;\n    const { error, value } = this.historyRetrySchema.validate(req.body);\n    if (error) {\n      const apiError: ApiError = {\n        code: 'VALIDATION_ERROR',\n        message: ErrorExtractor.extractMessage(error) ?? '请求参数校验失败',\n        timestamp: new Date().toISOString(),\n      };\n      res.status(HTTP_STATUS_BAD_REQUEST).json(apiError);\n      return;\n    }\n\n    const { agentId, dataId, stream, detail } = value as { agentId: string; dataId: string; stream?: boolean; detail?: boolean };\n\n    try {\n      const historyDetail = await this.fastgptSessionService.getHistoryDetail(agentId, chatId);\n      const prepared = this.fastgptSessionService.prepareRetryPayload(historyDetail, dataId);\n\n      if (!prepared?.messages || prepared.messages.length === 0) {\n        const apiError: ApiError = {\n          code: 'RETRY_TARGET_NOT_FOUND',\n          message: '未找到可重新生成的用户消息',\n          timestamp: new Date().toISOString(),\n        };\n        res.status(HTTP_STATUS_NOT_FOUND).json(apiError);\n        return;\n      }\n\n      const options: ChatOptions = {\n        chatId,\n        ...(typeof detail === 'boolean' ? { detail } : {}),\n        ...(prepared.responseChatItemId ? { responseChatItemId: prepared.responseChatItemId } : {}),\n      };\n\n      if (stream) {\n        await this.handleStreamRequest(res, agentId, prepared.messages, options, chatId);\n        return;\n      }\n\n      await this.handleNormalRequest(res, agentId, prepared.messages, options, chatId);\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'ChatController',\n        operation: 'retryChatMessage',\n        url: req.originalUrl,\n        method: req.method,\n        context: { stream, sessionId: chatId, agentId },\n      });\n      logger.error('重新生成聊天消息失败', { error: typedError.message });\n\n      if (stream && res.headersSent) {\n        this.sendSSEEvent(res, 'error', {\n          code: typedError.code,\n          message: typedError.message,\n          timestamp: typedError.timestamp,\n        } as JsonValue);\n        res.end();\n        return;\n      }\n\n      const apiError = typedError.toApiError();\n      res.status(HTTP_STATUS_INTERNAL_ERROR).json(apiError);\n    }\n  };\n\n  /**\n   * 解析请求中的角色过滤参数，兼容多种格式避免运行时异常\n   */\n  private parseHistoryRoleFilter(roleValue: unknown): Array<(typeof ChatController.supportedHistoryRoles)[number]> {\n    type HistoryRole = (typeof ChatController.supportedHistoryRoles)[number];\n    if (roleValue === undefined || roleValue === null) {\n      return [];\n    }\n\n    const allowed = new Set<HistoryRole>(ChatController.supportedHistoryRoles);\n    const result = new Set<HistoryRole>();\n\n    const collect = (raw: unknown) => {\n      if (typeof raw !== 'string') {\n        return;\n      }\n      const normalized = raw.trim().toLowerCase() as HistoryRole;\n      if (allowed.has(normalized)) {\n        result.add(normalized);\n      }\n    };\n\n    if (Array.isArray(roleValue)) {\n      roleValue.forEach(collect);\n    } else if (typeof roleValue === 'string') {\n      const trimmed = roleValue.trim();\n      if (trimmed.startsWith('[') && trimmed.endsWith(']')) {\n        try {\n          const parsed = JSON.parse(trimmed);\n          if (Array.isArray(parsed)) {\n            parsed.forEach(collect);\n          } else {\n            collect(parsed);\n          }\n        } catch (parseError) {\n          logger.warn('角色过滤参数解析失败，回退到逗号分隔解析', {\n            raw: roleValue,\n            error: parseError instanceof Error ? parseError.message : String(parseError),\n          });\n          trimmed.split(',').forEach(collect);\n        }\n      } else {\n        trimmed.split(',').forEach(collect);\n      }\n    } else if (typeof roleValue === 'object' && roleValue !== null) {\n      Object.values(roleValue as Record<string, unknown>).forEach(collect);\n    }\n\n    return Array.from(result);\n  }\n\n  /**\n   * 获取错误状态码\n   */\n  private getErrorStatusCode(error: Error): number {\n    const message = error.message.toLowerCase();\n\n    if (message.includes('熔断器')) {\n      return 503;\n    }\n    if (message.includes('限流')) {\n      return 429;\n    }\n    if (message.includes('超时')) {\n      return 408;\n    }\n    if (message.includes('网络')) {\n      return 502;\n    }\n    if (message.includes('不可用')) {\n      return 503;\n    }\n\n    return 500;\n  }\n\n  /**\n   * 获取错误代码\n   */\n  private getErrorCode(error: Error): string {\n    const message = error.message.toLowerCase();\n\n    if (message.includes('熔断器')) {\n      return 'CIRCUIT_BREAKER_OPEN';\n    }\n    if (message.includes('限流')) {\n      return 'RATE_LIMIT_EXCEEDED';\n    }\n    if (message.includes('超时')) {\n      return 'REQUEST_TIMEOUT';\n    }\n    if (message.includes('网络')) {\n      return 'NETWORK_ERROR';\n    }\n    if (message.includes('不可用')) {\n      return 'SERVICE_UNAVAILABLE';\n    }\n\n    return 'INTERNAL_ERROR';\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/controllers/DifySessionController.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":23,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":33,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":33,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":42,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":42,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":88,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":88,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":97,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":97,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":107,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":107,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":116,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":116,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3491,3494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3491,3494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":126,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":129,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .first_id on an `any` value.","line":132,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `DifyMessageListParams`.","line":135,"column":78,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":135,"endColumn":84},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":163,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":163,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":173,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":173,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":182,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":182,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":191,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":191,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":232,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":232,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":242,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":242,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":251,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":251,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":260,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":260,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":298,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":298,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":301,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":301,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":309,"column":52,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":309,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":310,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":310,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":320,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":320,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":329,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":329,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9325,9328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9325,9328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":339,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":339,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":342,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":342,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":342,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":342,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `DifyFeedbackParams`.","line":345,"column":69,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":345,"endColumn":75},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":373,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":373,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":383,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":383,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":392,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":392,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":401,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":401,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Request, Response } from 'express';\nimport { createErrorFromUnknown } from '@/types/errors';\nimport { difySessionService } from '@/services/DifySessionService';\nimport { AgentConfigService } from '@/services/AgentConfigService';\nimport logger from '@/utils/logger';\nimport { ApiResponseHandler } from '@/utils/apiResponse';\n\nconst agentService = new AgentConfigService();\n\n/**\n * Dify 会话管理控制器\n */\nexport class DifySessionController {\n  /**\n   * 获取会话列表\n   * GET /api/dify/conversations\n   */\n  static async getConversations(req: Request, res: Response): Promise<void> {\n    try {\n      const { agentId, user, limit, last_id } = req.query;\n\n      if (!agentId || typeof agentId !== 'string') {\n        res.status(400).json({\n          code: 'INVALID_AGENT_ID',\n          message: '缺少 agentId 参数',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const agent = await agentService.getAgent(agentId);\n      if (!agent) {\n        res.status(404).json({\n          code: 'AGENT_NOT_FOUND',\n          message: `智能体不存在: ${agentId}`,\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (agent.provider !== 'dify') {\n        res.status(400).json({\n          code: 'INVALID_PROVIDER',\n          message: '仅 Dify 智能体支持此接口',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const params: Record<string, string | number> = {};\n      if (user) {\n        params.user = user as string;\n      }\n      if (limit) {\n        params.limit = parseInt(limit as string, 10);\n      }\n      if (last_id) {\n        params.last_id = last_id as string;\n      }\n\n      const result = await difySessionService.getConversations(agent, params);\n\n      ApiResponseHandler.sendSuccess(res, result, {\n        message: '获取 Dify 会话列表成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionController',\n        operation: 'getConversations',\n      });\n      logger.error('获取 Dify 会话列表失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(500).json(apiError);\n    }\n  }\n\n  /**\n   * 获取会话消息\n   * GET /api/dify/messages\n   */\n  static async getMessages(req: Request, res: Response): Promise<void> {\n    try {\n      const { agentId, conversation_id, user, limit, first_id } = req.query;\n\n      if (!agentId || typeof agentId !== 'string') {\n        res.status(400).json({\n          code: 'INVALID_AGENT_ID',\n          message: '缺少 agentId 参数',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (!conversation_id || typeof conversation_id !== 'string') {\n        res.status(400).json({\n          code: 'INVALID_CONVERSATION_ID',\n          message: '缺少 conversation_id 参数',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const agent = await agentService.getAgent(agentId);\n      if (!agent) {\n        res.status(404).json({\n          code: 'AGENT_NOT_FOUND',\n          message: `智能体不存在: ${agentId}`,\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (agent.provider !== 'dify') {\n        res.status(400).json({\n          code: 'INVALID_PROVIDER',\n          message: '仅 Dify 智能体支持此接口',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const params: any = { conversation_id };\n      if (user) {\n        params.user = user as string;\n      }\n      if (limit) {\n        params.limit = parseInt(limit as string, 10);\n      }\n      if (first_id) {\n        params.first_id = first_id as string;\n      }\n\n      const result = await difySessionService.getConversationMessages(agent, params);\n\n      ApiResponseHandler.sendSuccess(res, result, {\n        message: '获取 Dify 会话消息成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionController',\n        operation: 'getMessages',\n      });\n      logger.error('获取 Dify 会话消息失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(500).json(apiError);\n    }\n  }\n\n  /**\n   * 获取消息详情\n   * GET /api/dify/messages/:messageId\n   */\n  static async getMessageDetail(req: Request, res: Response): Promise<void> {\n    try {\n      const { messageId } = req.params;\n      const { agentId, user } = req.query;\n\n      if (!agentId || typeof agentId !== 'string') {\n        res.status(400).json({\n          code: 'INVALID_AGENT_ID',\n          message: '缺少 agentId 参数',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const agent = await agentService.getAgent(agentId);\n      if (!agent) {\n        res.status(404).json({\n          code: 'AGENT_NOT_FOUND',\n          message: `智能体不存在: ${agentId}`,\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (agent.provider !== 'dify') {\n        res.status(400).json({\n          code: 'INVALID_PROVIDER',\n          message: '仅 Dify 智能体支持此接口',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (!messageId) {\n        res.status(400).json({\n          success: false,\n          code: 'INVALID_MESSAGE_ID',\n          message: '消息ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const result = await difySessionService.getMessageDetail(\n        agent,\n        messageId,\n        user ? (user as string) : undefined,\n      );\n\n      ApiResponseHandler.sendSuccess(res, result, {\n        message: '获取 Dify 消息详情成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionController',\n        operation: 'getMessageDetail',\n      });\n      logger.error('获取 Dify 消息详情失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(500).json(apiError);\n    }\n  }\n\n  /**\n   * 删除会话\n   * DELETE /api/dify/conversations/:conversationId\n   */\n  static async deleteConversation(req: Request, res: Response): Promise<void> {\n    try {\n      const { conversationId } = req.params;\n      const { agentId, user } = req.query;\n\n      if (!agentId || typeof agentId !== 'string') {\n        res.status(400).json({\n          code: 'INVALID_AGENT_ID',\n          message: '缺少 agentId 参数',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const agent = await agentService.getAgent(agentId);\n      if (!agent) {\n        res.status(404).json({\n          code: 'AGENT_NOT_FOUND',\n          message: `智能体不存在: ${agentId}`,\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (agent.provider !== 'dify') {\n        res.status(400).json({\n          code: 'INVALID_PROVIDER',\n          message: '仅 Dify 智能体支持此接口',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (!conversationId) {\n        res.status(400).json({\n          success: false,\n          code: 'INVALID_CONVERSATION_ID',\n          message: '对话ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      await difySessionService.deleteConversation(\n        agent,\n        conversationId,\n        user ? (user as string) : undefined,\n      );\n\n      ApiResponseHandler.sendSuccess(res, null, {\n        message: '会话删除成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionController',\n        operation: 'deleteConversation',\n      });\n      logger.error('删除 Dify 会话失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(500).json(apiError);\n    }\n  }\n\n  /**\n   * 提交消息反馈\n   * POST /api/dify/messages/:messageId/feedback\n   */\n  static async submitFeedback(req: Request, res: Response): Promise<void> {\n    try {\n      const { messageId } = req.params;\n      const { agentId, rating, user } = req.body;\n\n      if (!agentId || typeof agentId !== 'string') {\n        res.status(400).json({\n          code: 'INVALID_AGENT_ID',\n          message: '缺少 agentId 参数',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (!rating || !['like', 'dislike'].includes(rating)) {\n        res.status(400).json({\n          code: 'INVALID_RATING',\n          message: 'rating 必须为 like 或 dislike',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const agent = await agentService.getAgent(agentId);\n      if (!agent) {\n        res.status(404).json({\n          code: 'AGENT_NOT_FOUND',\n          message: `智能体不存在: ${agentId}`,\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (agent.provider !== 'dify') {\n        res.status(400).json({\n          code: 'INVALID_PROVIDER',\n          message: '仅 Dify 智能体支持此接口',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const params: any = {\n        message_id: messageId,\n        rating,\n      };\n      if (user) {\n        params.user = user;\n      }\n\n      const result = await difySessionService.submitFeedback(agent, params);\n\n      ApiResponseHandler.sendSuccess(res, result, {\n        message: '反馈提交成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionController',\n        operation: 'submitFeedback',\n      });\n      logger.error('提交 Dify 消息反馈失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(500).json(apiError);\n    }\n  }\n\n  /**\n   * 获取建议问题\n   * GET /api/dify/messages/:messageId/suggested\n   */\n  static async getSuggestedQuestions(req: Request, res: Response): Promise<void> {\n    try {\n      const { messageId } = req.params;\n      const { agentId, user } = req.query;\n\n      if (!agentId || typeof agentId !== 'string') {\n        res.status(400).json({\n          code: 'INVALID_AGENT_ID',\n          message: '缺少 agentId 参数',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const agent = await agentService.getAgent(agentId);\n      if (!agent) {\n        res.status(404).json({\n          code: 'AGENT_NOT_FOUND',\n          message: `智能体不存在: ${agentId}`,\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (agent.provider !== 'dify') {\n        res.status(400).json({\n          code: 'INVALID_PROVIDER',\n          message: '仅 Dify 智能体支持此接口',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (!messageId) {\n        res.status(400).json({\n          success: false,\n          code: 'INVALID_MESSAGE_ID',\n          message: '消息ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const result = await difySessionService.getSuggestedQuestions(\n        agent,\n        messageId,\n        user ? (user as string) : undefined,\n      );\n\n      ApiResponseHandler.sendSuccess(res, result, {\n        message: '获取建议问题成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionController',\n        operation: 'getSuggestedQuestions',\n      });\n      logger.error('获取 Dify 建议问题失败', error.toLogObject());\n\n      const apiError = error.toApiError();\n      res.status(500).json(apiError);\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/controllers/ProductPreviewController.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 112. Maximum allowed is 100.","line":37,"column":1,"nodeType":"Program","messageId":"max","endLine":37,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":37,"column":20,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":37,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":45,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":45,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":62,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":110},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2433,2436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2433,2436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Request, Response } from 'express';\nimport Joi from 'joi';\nimport { ProductPreviewService } from '@/services/ProductPreviewService';\nimport type { ApiError, ProductPreviewRequest } from '@/types';\nimport logger from '@/utils/logger';\nimport { ApiResponseHandler } from '@/utils/apiResponse';\n\nexport class ProductPreviewController {\n  private readonly service: ProductPreviewService;\n\n  constructor() {\n    this.service = new ProductPreviewService();\n  }\n\n  private readonly generateSchema = Joi.object<ProductPreviewRequest>({\n    sceneImage: Joi.string().min(10).required().messages({\n      'any.required': '现场照片不能为空',\n      'string.empty': '现场照片不能为空',\n    }),\n    productImage: Joi.string().min(10).optional().allow('', null),\n    productQuery: Joi.string().min(1).required().messages({\n      'any.required': '产品查询不能为空',\n      'string.empty': '产品查询不能为空',\n    }),\n    personalization: Joi.string().allow('', null).optional(),\n    boundingBox: Joi.object({\n      x: Joi.number().min(0).max(1).required(),\n      y: Joi.number().min(0).max(1).required(),\n      width: Joi.number().min(0).max(1).required(),\n      height: Joi.number().min(0).max(1).required(),\n    }).required().messages({\n      'any.required': '请标记现场红框区域',\n    }),\n  });\n\n  generatePreview = async (req: Request, res: Response): Promise<void> => {\n    const { error, value } = this.generateSchema.validate(req.body, { abortEarly: false, allowUnknown: false });\n\n    if (error) {\n      const apiError: ApiError = {\n        code: 'VALIDATION_ERROR',\n        message: error.details.map((detail) => detail.message).join('；'),\n        timestamp: new Date().toISOString(),\n      };\n      res.status(400).json(apiError);\n      return;\n    }\n\n    try {\n      const result = await this.service.generatePreview(value);\n      ApiResponseHandler.sendSuccess(res, result, {\n        message: '生成现场预览成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (err: unknown) {\n      logger.error('调用豆包图片生成接口失败', { error: err });\n      const errResp = (err as {response?: {data?: {message?: string}}; message?: string});\n      const apiError: ApiError = {\n        code: 'DOUBAO_IMAGE_GENERATE_FAILED',\n        message: errResp?.response?.data?.message ?? errResp?.message ?? '生成现场预览失败',\n        timestamp: new Date().toISOString(),\n        details: (process.env.NODE_ENV === 'development' ? errResp?.response?.data ?? err : undefined) as any,\n      };\n      res.status(500).json(apiError);\n    }\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/controllers/SessionController.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async function 'ensureAdminAuth' has no 'await' expression.","line":25,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":25,"endColumn":31},{"ruleId":"max-len","severity":1,"message":"This line has a length of 101. Maximum allowed is 100.","line":123,"column":1,"nodeType":"Program","messageId":"max","endLine":123,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":126,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":126,"endColumn":27},{"ruleId":"max-len","severity":1,"message":"This line has a length of 106. Maximum allowed is 100.","line":146,"column":1,"nodeType":"Program","messageId":"max","endLine":146,"endColumn":107},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":186,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":186,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":208,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":208,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6733,6735],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .sessionIds on an `any` value.","line":216,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":219,"column":11,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":219,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `SessionEventType`.","line":220,"column":11,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":220,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .operation on an `any` value.","line":220,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, unknown> | undefined`.","line":221,"column":11,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":221,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":221,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":221,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .operation on an `any` value.","line":221,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":221,"column":41,"nodeType":"Property","messageId":"anyAssignment","endLine":221,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":221,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7160,7163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7160,7163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 103. Maximum allowed is 100.","line":226,"column":1,"nodeType":"Program","messageId":"max","endLine":226,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":242,"column":29,"nodeType":"Property","messageId":"anyAssignment","endLine":242,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .operation on an `any` value.","line":242,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":258,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":258,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":280,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":280,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8988,8990],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .format on an `any` value.","line":290,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":290,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .format on an `any` value.","line":291,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":291,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, unknown> | undefined`.","line":303,"column":9,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":309,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":304,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":304,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .format on an `any` value.","line":304,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":304,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":306,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":306,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .includeMessages on an `any` value.","line":306,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":306,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":307,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":307,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .includeMetadata on an `any` value.","line":307,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":307,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":308,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":308,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .filters on an `any` value.","line":308,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":308,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":309,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10010,10013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10010,10013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":322,"column":29,"nodeType":"Property","messageId":"anyAssignment","endLine":322,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .format on an `any` value.","line":322,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":322,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":384,"column":22,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":384,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, unknown> | undefined`.","line":470,"column":9,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":470,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14836,14839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14836,14839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":513,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":513,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[16151,16153],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, unknown> | undefined`.","line":525,"column":9,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":525,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16486,16489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16486,16489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Request, Response, NextFunction } from 'express';\nimport Joi from 'joi';\nimport { FastGPTSessionService } from '@/services/FastGPTSessionService';\nimport { AgentConfigService } from '@/services/AgentConfigService';\nimport logger from '@/utils/logger';\nimport type {\n  SessionListParams,\n  BatchOperationOptions,\n  ExportOptions,\n  EventQueryParams,\n  ApiError,\n} from '@/types';\nimport { ApiResponseHandler } from '@/utils/apiResponse';\nimport { createErrorFromUnknown, AuthenticationError } from '@/types/errors';\nimport type { JsonValue } from '@/types/dynamic';\n\n// ===== HTTP状态码常量 =====\n/** HTTP 错误请求状态码 */\nconst HTTP_STATUS_BAD_REQUEST = 400;\n/** HTTP 禁止访问状态码 */\nconst HTTP_STATUS_FORBIDDEN = 403;\n/** 默认页面大小 */\nconst DEFAULT_PAGE_SIZE = 20;\n\nasync function ensureAdminAuth(req: Request) {\n  const auth = req.headers['authorization'];\n  const token = (auth ?? '').replace(/^Bearer\\s+/i, '').trim();\n  if (!token) {\n    throw new AuthenticationError({\n      message: '未提供认证令牌',\n      code: 'UNAUTHORIZED',\n    });\n  }\n\n  // 这里应该调用认证服务验证token\n  // const user = await authService.profile(token);\n  // if (!user || user.role !== 'admin') {\n  //   throw new AuthorizationError({\n  //     message: '需要管理员权限',\n  //     code: 'FORBIDDEN'\n  //   });\n  // }\n\n  // 暂时跳过认证，实际生产环境需要实现\n  return { userId: 'admin' };\n}\n\nfunction handleAdminAuthError(error: unknown, res: Response): boolean {\n  if (error instanceof Error && error.message === 'UNAUTHORIZED') {\n    res.status(HTTP_STATUS_FORBIDDEN).json({\n      code: 'UNAUTHORIZED',\n      message: '需要管理员权限',\n      timestamp: new Date().toISOString(),\n    });\n    return true;\n  }\n  return false;\n}\n\n/**\n * 会话管理控制器\n */\nexport class SessionController {\n  private readonly sessionService: FastGPTSessionService;\n  private readonly agentService: AgentConfigService;\n\n  // 验证schemas\n  private readonly sessionListSchema = Joi.object({\n    page: Joi.number().min(1).default(1),\n    pageSize: Joi.number().min(1).max(100).default(DEFAULT_PAGE_SIZE),\n    startDate: Joi.date().iso().optional(),\n    endDate: Joi.date().iso().optional(),\n    tags: Joi.array().items(Joi.string()).optional(),\n    minMessageCount: Joi.number().min(0).optional(),\n    maxMessageCount: Joi.number().min(0).optional(),\n    sortBy: Joi.string().valid('createdAt', 'updatedAt', 'messageCount', 'title').default('updatedAt'),\n    sortOrder: Joi.string().valid('asc', 'desc').default('desc'),\n    searchKeyword: Joi.string().max(500).optional(),\n  });\n\n  private readonly batchOperationSchema = Joi.object({\n    sessionIds: Joi.array().items(Joi.string()).min(1).required(),\n    operation: Joi.string().valid('delete', 'archive', 'addTags', 'removeTags').required(),\n    tags: Joi.array().items(Joi.string()).when('operation', {\n      is: Joi.string().valid('addTags', 'removeTags'),\n      then: Joi.required(),\n      otherwise: Joi.optional(),\n    }),\n  });\n\n  private readonly exportOptionsSchema = Joi.object({\n    format: Joi.string().valid('json', 'csv', 'excel').required(),\n    includeMessages: Joi.boolean().default(false),\n    includeMetadata: Joi.boolean().default(false),\n    filters: this.sessionListSchema.optional(),\n    dateRange: Joi.object({\n      start: Joi.date().iso().required(),\n      end: Joi.date().iso().required(),\n    }).optional(),\n  });\n\n  private readonly eventQuerySchema = Joi.object({\n    sessionIds: Joi.array().items(Joi.string()).optional(),\n    eventTypes: Joi.array().items(Joi.string()).optional(),\n    startDate: Joi.date().iso().optional(),\n    endDate: Joi.date().iso().optional(),\n    userId: Joi.string().optional(),\n    page: Joi.number().min(1).default(1),\n    pageSize: Joi.number().min(1).max(100).default(DEFAULT_PAGE_SIZE),\n    sortBy: Joi.string().valid('timestamp').default('timestamp'),\n    sortOrder: Joi.string().valid('asc', 'desc').default('desc'),\n  });\n\n  constructor() {\n    this.agentService = new AgentConfigService();\n    this.sessionService = new FastGPTSessionService(this.agentService);\n  }\n\n  /**\n   * 获取增强版会话列表\n   * GET /api/sessions/:agentId/enhanced\n   */\n  listSessionsEnhanced = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    const { agentId } = req.params;\n    try {\n      const { error, value } = this.sessionListSchema.validate(req.query, { abortEarly: false });\n\n      if (error) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'VALIDATION_ERROR',\n          message: error.details.map((d) => d.message).join('; '),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (!agentId) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'INVALID_AGENT_ID',\n          message: '智能体ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const result = await this.sessionService.listHistoriesEnhanced(agentId, value as SessionListParams);\n\n      ApiResponseHandler.sendSuccess(res, result, {\n        message: '获取会话列表成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError) {\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'SessionController',\n        operation: 'listSessionsEnhanced',\n        url: req.originalUrl,\n        method: req.method,\n        context: { agentId },\n      });\n      logger.error('获取增强版会话列表失败', { error: typedError.message });\n      const apiError: ApiError = {\n        code: 'LIST_SESSIONS_FAILED',\n        message: '获取会话列表失败',\n        timestamp: new Date().toISOString(),\n      };\n\n      if (process.env.NODE_ENV === 'development') {\n        apiError.details = {\n          originalError: typedError.message,\n          stack: typedError.stack,\n        } as JsonValue;\n      }\n\n      res.status(500).json(apiError);\n    }\n  };\n\n  /**\n   * 批量操作会话\n   * POST /api/sessions/:agentId/batch\n   */\n  batchOperation = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      await ensureAdminAuth(req);\n      const { agentId } = req.params;\n      const { error, value } = this.batchOperationSchema.validate(req.body, { abortEarly: false });\n\n      if (error) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'VALIDATION_ERROR',\n          message: error.details.map((d) => d.message).join('; '),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (!agentId) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'INVALID_AGENT_ID',\n          message: '智能体ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const user = await ensureAdminAuth(req);\n      const userAgent = req.headers['user-agent'];\n      const ipAddress = req.ip || req.connection.remoteAddress;\n      const context = {\n        userId: user.userId,\n        ...(userAgent && { userAgent }),\n        ...(ipAddress && { ipAddress }),\n      };\n\n      // 为每个会话记录操作开始事件\n      for (const sessionId of value.sessionIds) {\n        await this.sessionService.recordEvent(\n          agentId,\n          sessionId,\n          value.operation,\n          { operation: value.operation, tags: value.tags } as any,\n          context,\n        );\n      }\n\n      const result = await this.sessionService.batchOperation(agentId, value as BatchOperationOptions);\n\n      ApiResponseHandler.sendSuccess(res, result, {\n        message: '批量操作完成',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError) {\n      if (handleAdminAuthError(unknownError, res)) {\n        return;\n      }\n      const { agentId } = req.params;\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'SessionController',\n        operation: 'batchOperation',\n        url: req.originalUrl,\n        method: req.method,\n        context: { agentId, operation: req.body.operation },\n      });\n      logger.error('批量操作失败', { error: typedError.message });\n      const apiError = typedError.toApiError();\n      res.status(500).json(apiError);\n    }\n  };\n\n  /**\n   * 导出会话数据\n   * POST /api/sessions/:agentId/export\n   */\n  exportSessions = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      await ensureAdminAuth(req);\n      const { agentId } = req.params;\n      const { error, value } = this.exportOptionsSchema.validate(req.body, { abortEarly: false });\n\n      if (error) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'VALIDATION_ERROR',\n          message: error.details.map((d) => d.message).join('; '),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (!agentId) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'INVALID_AGENT_ID',\n          message: '智能体ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const user = await ensureAdminAuth(req);\n      const userAgent = req.headers['user-agent'];\n      const ipAddress = req.ip || req.connection.remoteAddress;\n      const context = {\n        userId: user.userId,\n        ...(userAgent && { userAgent }),\n        ...(ipAddress && { ipAddress }),\n      };\n\n      const result = await this.sessionService.exportSessions(agentId, value as ExportOptions);\n\n      // 设置响应头\n      const contentType = value.format === 'json' ? 'application/json' :\n        value.format === 'csv' ? 'text/csv' :\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\n      res.setHeader('Content-Type', contentType);\n      res.setHeader('Content-Disposition', `attachment; filename=\"${result.filename}\"`);\n      res.send(result.data);\n\n      // 记录导出事件\n      await this.sessionService.recordEvent(\n        agentId,\n        'export_operation',\n        'exported',\n        {\n          format: value.format,\n          sessionCount: 'unknown', // 从result中获取\n          includeMessages: value.includeMessages,\n          includeMetadata: value.includeMetadata,\n          filters: value.filters,\n        } as any,\n        context,\n      );\n    } catch (unknownError) {\n      if (handleAdminAuthError(unknownError, res)) {\n        return;\n      }\n      const { agentId } = req.params;\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'SessionController',\n        operation: 'exportSessions',\n        url: req.originalUrl,\n        method: req.method,\n        context: { agentId, format: req.body.format },\n      });\n      logger.error('导出会话失败', { error: typedError.message });\n      const apiError = typedError.toApiError();\n      res.status(500).json(apiError);\n    }\n  };\n\n  /**\n   * 获取会话统计信息\n   * GET /api/sessions/:agentId/stats\n   */\n  getSessionStats = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      const { agentId } = req.params;\n      const { startDate, endDate } = req.query;\n\n      if (!agentId) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'INVALID_AGENT_ID',\n          message: '智能体ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      let dateRange;\n      if (startDate && endDate) {\n        dateRange = {\n          start: startDate as string,\n          end: endDate as string,\n        };\n      }\n\n      const stats = await this.sessionService.getSessionStats(agentId, dateRange);\n\n      ApiResponseHandler.sendSuccess(res, stats, {\n        message: '获取会话统计成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError) {\n      const { agentId } = req.params;\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'SessionController',\n        operation: 'getSessionStats',\n        url: req.originalUrl,\n        method: req.method,\n        context: { agentId, dateRange: req.query },\n      });\n      logger.error('获取会话统计失败', { error: typedError.message });\n      const apiError = typedError.toApiError();\n      res.status(500).json(apiError);\n    }\n  };\n\n  /**\n   * 查询会话事件\n   * GET /api/sessions/:agentId/events\n   */\n  queryEvents = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      const { agentId } = req.params;\n      const { error, value } = this.eventQuerySchema.validate(req.query, { abortEarly: false });\n\n      if (error) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'VALIDATION_ERROR',\n          message: error.details.map((d) => d.message).join('; '),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      if (!agentId) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'INVALID_AGENT_ID',\n          message: '智能体ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const result = await this.sessionService.queryEvents(agentId, {\n        ...value,\n        agentId,\n      } as EventQueryParams);\n\n      ApiResponseHandler.sendSuccess(res, result, {\n        message: '查询会话事件成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError) {\n      const { agentId } = req.params;\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'SessionController',\n        operation: 'queryEvents',\n        url: req.originalUrl,\n        method: req.method,\n        context: { agentId, queryParams: req.query },\n      });\n      logger.error('查询会话事件失败', { error: typedError.message });\n      const apiError = typedError.toApiError();\n      res.status(500).json(apiError);\n    }\n  };\n\n  /**\n   * 获取会话详情（原有功能的增强版）\n   * GET /api/sessions/:agentId/:sessionId\n   */\n  getSessionDetail = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      const { agentId, sessionId } = req.params;\n\n      if (!agentId || !sessionId) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'INVALID_PARAMS',\n          message: '智能体ID和会话ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const detail = await this.sessionService.getHistoryDetail(agentId, sessionId);\n\n      // 记录访问事件\n      const user = await ensureAdminAuth(req).catch(() => ({ userId: undefined }));\n      const eventData = {\n        action: 'view_detail',\n      };\n      const requestContext = {} as Record<string, unknown>;\n\n      if (user.userId) {\n        requestContext.userId = user.userId;\n      }\n      if (req.headers['user-agent']) {\n        requestContext.userAgent = req.headers['user-agent'];\n      }\n      if (req.ip) {\n        requestContext.ipAddress = req.ip;\n      } else if (req.connection?.remoteAddress) {\n        requestContext.ipAddress = req.connection.remoteAddress;\n      }\n\n      await this.sessionService.recordEvent(\n        agentId,\n        sessionId,\n        'updated',\n        eventData as any,\n        requestContext,\n      );\n\n      ApiResponseHandler.sendSuccess(res, detail, {\n        message: '获取会话详情成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError) {\n      const { agentId, sessionId } = req.params;\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'SessionController',\n        operation: 'getSessionDetail',\n        url: req.originalUrl,\n        method: req.method,\n        context: { agentId, sessionId },\n      });\n      logger.error('获取会话详情失败', { error: typedError.message });\n      const apiError = typedError.toApiError();\n      res.status(500).json(apiError);\n    }\n  };\n\n  /**\n   * 删除单个会话\n   * DELETE /api/sessions/:agentId/:sessionId\n   */\n  deleteSession = async (req: Request, res: Response, _next: NextFunction): Promise<void> => {\n    try {\n      await ensureAdminAuth(req);\n      const { agentId, sessionId } = req.params;\n\n      if (!agentId || !sessionId) {\n        res.status(HTTP_STATUS_BAD_REQUEST).json({\n          code: 'INVALID_PARAMS',\n          message: '智能体ID和会话ID不能为空',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      const user = await ensureAdminAuth(req);\n      const userAgent = req.headers['user-agent'];\n      const ipAddress = req.ip || req.connection.remoteAddress;\n      const context = {\n        userId: user.userId,\n        ...(userAgent && { userAgent }),\n        ...(ipAddress && { ipAddress }),\n      };\n\n      // 记录删除前的事件\n      await this.sessionService.recordEvent(\n        agentId,\n        sessionId,\n        'deleted',\n        { reason: 'manual_delete' } as any,\n        context,\n      );\n\n      await this.sessionService.deleteHistory(agentId, sessionId);\n\n      ApiResponseHandler.sendSuccess(res, null, {\n        message: '会话删除成功',\n        ...(req.requestId ? { requestId: req.requestId } : {}),\n      });\n    } catch (unknownError) {\n      if (handleAdminAuthError(unknownError, res)) {\n        return;\n      }\n      const { agentId, sessionId } = req.params;\n      const typedError = createErrorFromUnknown(unknownError, {\n        component: 'SessionController',\n        operation: 'deleteSession',\n        url: req.originalUrl,\n        method: req.method,\n        context: { agentId, sessionId },\n      });\n      logger.error('删除会话失败', { error: typedError.message });\n      const apiError = typedError.toApiError();\n      res.status(500).json(apiError);\n    }\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/docs/swagger.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":15,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":15,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[497,499],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":34,"column":12,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":34,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[973,976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[973,976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":36,"column":1,"nodeType":"Program","messageId":"max","endLine":36,"endColumn":106},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1060,1063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1060,1063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1075,1078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1075,1078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":41,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":41,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":41,"column":19,"nodeType":"Identifier","messageId":"unsafeCall","endLine":41,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Application, Request, Response, RequestHandler } from 'express';\nimport { createErrorFromUnknown } from '@/types/errors';\nimport { loadOptionalModule } from '@/utils/loadOptionalModule';\nimport { logger } from '@/utils/logger';\nconst swaggerOptions = {\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'LLMChat API文档',\n      version: '2.0.0',\n      description: 'AI Agent Chat Platform API Documentation',\n    },\n    servers: [\n      {\n        url: process.env.API_URL || 'http://localhost:3001',\n        description: '开发服务器',\n      },\n    ],\n    components: {\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT',\n        },\n      },\n    },\n  },\n  apis: ['./src/routes/*.ts', './src/controllers/*.ts'],\n};\n\nexport async function setupSwagger(app: Application): Promise<void> {\n  try {\n    const [swaggerJsdoc, swaggerUi] = await Promise.all([\n      loadOptionalModule<any>('swagger-jsdoc'),\n      loadOptionalModule<{ serve: RequestHandler; setup:(specs: any, options?: any) => RequestHandler }>(\n        'swagger-ui-express',\n      ),\n    ]);\n\n    const specs = swaggerJsdoc(swaggerOptions);\n\n    if (swaggerUi) {\n      app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs, {\n      customCss: '.swagger-ui .topbar { display: none }',\n      customSiteTitle: 'LLMChat API文档',\n    }));\n    }\n\n    app.get('/api-docs.json', (_req: Request, res: Response) => {\n      res.setHeader('Content-Type', 'application/json');\n      res.send(specs);\n    });\n\n    logger.debug('✅ Swagger API文档已启用');\n    logger.debug('📄 访问地址: http://localhost:3001/api-docs');\n  } catch (unknownError: unknown) {\n    const _error = createErrorFromUnknown(unknownError, {\n      component: 'swagger',\n      operation: 'setupSwagger',\n    });\n    logger.warn('⚠️ Swagger依赖未安装，API文档功能已禁用');\n    logger.warn(\n      '💡 运行以下命令安装: pnpm add -D swagger-jsdoc swagger-ui-express @types/swagger-jsdoc @types/swagger-ui-express',\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/AsyncBatchRequestLogger.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":62,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":62,"endColumn":110},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1315,1318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1315,1318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":62,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":62,"column":106,"nodeType":"Literal","messageId":"noMagic","endLine":62,"endColumn":107},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":72,"column":20,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":72,"endColumn":22,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1672,1674],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":74,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":74,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1767,1770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1767,1770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":74,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":75,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":18},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":113,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":113,"endColumn":29,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2469,2470],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":114,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":114,"endColumn":42,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2522,2523],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 102. Maximum allowed is 100.","line":118,"column":1,"nodeType":"Program","messageId":"max","endLine":118,"endColumn":103},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":119,"column":63,"nodeType":"Literal","messageId":"noMagic","endLine":119,"endColumn":66},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":157,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":157,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 异步批量请求日志器\n *\n * 性能优势：\n * - 日志收集不阻塞HTTP响应\n * - 批量写入降低I/O频率99%\n * - 内存队列，快速读写\n *\n * 使用方式：\n * ```typescript\n * import { asyncRequestLogger } from '@/middleware/AsyncBatchRequestLogger';\n * app.use(asyncRequestLogger);\n * ```\n */\n\nimport type { Request, Response, NextFunction } from 'express';\nimport logger from '@/utils/logger';\n\n/**\n * 请求日志条目\n */\ninterface LogEntry {\n  timestamp: Date;\n  method: string;\n  url: string;\n  statusCode: number;\n  duration: number;\n  ip: string | undefined;\n  userAgent: string | undefined;\n  userId: string | undefined;\n  requestId: string | undefined;\n}\n\n/**\n * 异步批量请求日志器类\n */\nexport class AsyncBatchRequestLogger {\n  private readonly logQueue: LogEntry[] = [];\n  private readonly batchSize = 100;           // 100条批量写入\n  private readonly flushInterval = 5000;      // 5秒强制刷新\n  private lastFlushTime = Date.now();\n  private readonly flushTimer: NodeJS.Timeout;\n\n  constructor() {\n    // 定时刷新队列\n    this.flushTimer = setInterval(() => {\n      this.flush();\n    }, this.flushInterval);\n\n    // 进程退出前刷新\n    process.on('beforeExit', () => {\n      this.flush();\n      clearInterval(this.flushTimer);\n    });\n  }\n\n  /**\n   * Express中间件\n   */\n  middleware = (req: Request, res: Response, next: NextFunction): void => {\n    const startTime = Date.now();\n    const requestId = (req as any).requestId || `req_${startTime}_${Math.random().toString(36).substr(2, 9)}`;\n\n    // 监听响应完成\n    res.on('finish', () => {\n      const logEntry: LogEntry = {\n        timestamp: new Date(),\n        method: req.method,\n        url: req.originalUrl || req.url,\n        statusCode: res.statusCode,\n        duration: Date.now() - startTime,\n        ip: req.ip || req.socket.remoteAddress,\n        userAgent: req.get('User-Agent'),\n        userId: (req as any).user?.id,\n        requestId,\n      };\n\n      // 推入队列（不等待）\n      this.logQueue.push(logEntry);\n\n      // 队列满了立即刷新\n      if (this.logQueue.length >= this.batchSize) {\n        this.flush();\n      }\n    });\n\n    // 立即调用next，不等待日志\n    next();\n  };\n\n  /**\n   * 批量刷新日志到文件\n   */\n  private flush(): void {\n    if (this.logQueue.length === 0) {\n      return;\n    }\n\n    // 异步执行，不阻塞主线程\n    setImmediate(() => {\n      try {\n        const batch = this.logQueue.splice(0, this.batchSize);\n\n        // ✅ 检查batch是否为空\n        if (batch.length === 0) {\n          return;\n        }\n\n        // 批量记录\n        logger.info('Request batch', {\n          count: batch.length,\n          period: {\n            start: batch[0]!.timestamp,\n            end: batch[batch.length - 1]!.timestamp,\n          },\n          summary: {\n            totalRequests: batch.length,\n            avgDuration: Math.round(batch.reduce((sum, log) => sum + log.duration, 0) / batch.length),\n            errorCount: batch.filter(log => log.statusCode >= 400).length,\n            methods: this.countBy(batch, 'method'),\n          },\n          logs: batch.map(log => ({\n            time: log.timestamp,\n            method: log.method,\n            url: log.url,\n            status: log.statusCode,\n            duration: log.duration,\n            ...(log.userId && { userId: log.userId }),\n          })),\n        });\n\n        this.lastFlushTime = Date.now();\n      } catch (err) {\n        // 静默失败，不影响服务\n        logger.error('Log flush failed', {\n          error: (err as Error).message,\n          queueSize: this.logQueue.length,\n        });\n      }\n    });\n  }\n\n  /**\n   * 辅助方法：按字段计数\n   */\n  private countBy(array: LogEntry[], key: keyof LogEntry): Record<string, number> {\n    return array.reduce((acc, item) => {\n      const value = String(item[key]);\n      acc[value] = (acc[value] ?? 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats() {\n    return {\n      queueSize: this.logQueue.length,\n      timeSinceLastFlush: Date.now() - this.lastFlushTime,\n      batchSize: this.batchSize,\n      flushInterval: this.flushInterval,\n    };\n  }\n\n  /**\n   * 手动刷新（用于测试或紧急情况）\n   */\n  forceFlush(): void {\n    this.flush();\n  }\n}\n\n// 导出单例\nexport const asyncBatchRequestLogger = new AsyncBatchRequestLogger();\n\n// 导出中间件\nexport const asyncRequestLogger = asyncBatchRequestLogger.middleware;\n\n// 默认导出\nexport default asyncRequestLogger;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/ResponseOptimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/adminGuard.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":21,"column":60,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":32,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":32,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":48,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":48,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 管理员权限守卫中间件\n * 确保只有管理员用户才能访问特定路由\n */\n\nimport type { Request, Response, NextFunction } from 'express';\nimport logger from '@/utils/logger';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    username: string;\n    role: 'admin' | 'user';\n  };\n}\n\n/**\n * 管理员权限检查中间件\n */\nexport function adminGuard() {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const authReq = req as AuthenticatedRequest;\n\n    // 检查用户是否已认证\n    if (!authReq.user) {\n      logger.warn('未认证用户尝试访问管理员路由', {\n        component: 'adminGuard',\n        path: req.path,\n        ip: req.ip,\n      });\n\n      return res.status(401).json({\n        success: false,\n        code: 'AUTHENTICATION_REQUIRED',\n        message: '请先登录',\n      });\n    }\n\n    // 检查用户是否为管理员\n    if (authReq.user.role !== 'admin') {\n      logger.warn('非管理员用户尝试访问管理员路由', {\n        component: 'adminGuard',\n        user: authReq.user.username,\n        path: req.path,\n        ip: req.ip,\n      });\n\n      return res.status(403).json({\n        success: false,\n        code: 'ADMIN_REQUIRED',\n        message: '需要管理员权限',\n      });\n    }\n\n    // 权限检查通过，设置管理员验证头\n    req.headers['x-admin-verified'] = 'true';\n    return next();\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/cacheMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/csrfProtection.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":58,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":58,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":83,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":83,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":86,"column":38,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":86,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":97,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":97,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":100,"column":22,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":100,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":109,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":109,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CSRF 防护中间件\n * 使用 Double Submit Cookie 模式\n */\n\nimport type { Request, Response, NextFunction } from 'express';\nimport { createErrorFromUnknown } from '@/types/errors';\nimport crypto from 'crypto';\nimport logger from '@/utils/logger';\n\nconst CSRF_TOKEN_LENGTH = 32;\nconst CSRF_COOKIE_NAME = 'XSRF-TOKEN';\nconst CSRF_HEADER_NAME = 'X-XSRF-TOKEN';\n\n/**\n * 生成 CSRF Token\n */\nfunction generateToken(): string {\n  return crypto.randomBytes(CSRF_TOKEN_LENGTH).toString('hex');\n}\n\n/**\n * 验证 CSRF Token\n */\nfunction verifyToken(cookieToken: string | undefined, headerToken: string | undefined): boolean {\n  if (!cookieToken || !headerToken) {\n    return false;\n  }\n\n  // 使用 timingSafeEqual 防止时序攻击\n  try {\n    const cookieBuffer = Buffer.from(cookieToken, 'hex');\n    const headerBuffer = Buffer.from(headerToken, 'hex');\n\n    if (cookieBuffer.length !== headerBuffer.length) {\n      return false;\n    }\n\n    return crypto.timingSafeEqual(cookieBuffer, headerBuffer);\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'csrfProtection',\n      operation: 'verifyToken',\n    });\n    logger.warn('CSRF token 验证异常', error.toLogObject());\n    return false;\n  }\n}\n\n/**\n * CSRF 保护中间件\n *\n * 使用 Double Submit Cookie 模式：\n * 1. 服务器生成 token 存入 cookie\n * 2. 前端从 cookie 读取 token，放入请求头\n * 3. 服务器比对 cookie 和 header 中的 token\n */\nexport function csrfProtection(options: {\n  ignoreMethods?: string[];\n  ignorePaths?: string[];\n  cookieOptions?: {\n    httpOnly?: boolean;\n    secure?: boolean;\n    sameSite?: 'strict' | 'lax' | 'none';\n    maxAge?: number;\n  };\n} = {}) {\n  const {\n    ignoreMethods = ['GET', 'HEAD', 'OPTIONS'],\n    ignorePaths = ['/health', '/api/auth/login'],\n    cookieOptions = {\n      httpOnly: false, // 前端需要读取\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 86400000, // 24小时\n    },\n  } = options;\n\n  return (req: Request, res: Response, next: NextFunction): void => {\n    // 跳过特定方法\n    if (ignoreMethods.includes(req.method)) {\n      // GET 请求仍需设置 cookie\n      let token = req.cookies?.[CSRF_COOKIE_NAME];\n      if (!token) {\n        token = generateToken();\n        res.cookie(CSRF_COOKIE_NAME, token, cookieOptions);\n      }\n      return next();\n    }\n\n    // 跳过特定路径\n    if (ignorePaths.some(path => req.path.startsWith(path))) {\n      return next();\n    }\n\n    // 验证 token\n    const cookieToken = req.cookies?.[CSRF_COOKIE_NAME];\n    const headerToken = req.get(CSRF_HEADER_NAME);\n\n    if (!verifyToken(cookieToken, headerToken)) {\n      logger.warn('CSRF token 验证失败', {\n        method: req.method,\n        path: req.path,\n        ip: req.ip,\n        hasCookie: !!cookieToken,\n        hasHeader: !!headerToken,\n      });\n\n      res.status(403).json({\n        code: 'CSRF_TOKEN_INVALID',\n        message: 'CSRF token 验证失败',\n        timestamp: new Date().toISOString(),\n      });\n      return;\n    }\n\n    // 验证成功，刷新 token\n    const newToken = generateToken();\n    res.cookie(CSRF_COOKIE_NAME, newToken, cookieOptions);\n\n    next();\n  };\n}\n\n/**\n * 生成 CSRF Token 的路由处理器\n */\nexport function getCsrfToken(req: Request, res: Response): void {\n  const token = generateToken();\n\n  res.cookie(CSRF_COOKIE_NAME, token, {\n    httpOnly: false,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict',\n    maxAge: 86400000,\n  });\n\n  res.json({\n    code: 'SUCCESS',\n    message: 'CSRF token 生成成功',\n    data: { token },\n    timestamp: new Date().toISOString(),\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/errorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":49,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":49,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1307,1310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1307,1310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":49,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":50,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":50,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1362,1365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1362,1365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":50,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":30},{"ruleId":"complexity","severity":1,"message":"Function 'getErrorStatusCode' has a complexity of 54. Maximum allowed is 20.","line":91,"column":1,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":222,"endColumn":2},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":99,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":99,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":105,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":105,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":111,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":111,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":117,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":117,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 405.","line":122,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":122,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 406.","line":127,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":127,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 408.","line":132,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":132,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":137,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":137,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 410.","line":142,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":142,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 413.","line":147,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":147,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 415.","line":152,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":152,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 422.","line":157,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":157,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":162,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":162,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 501.","line":174,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":174,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":179,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":179,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":185,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":185,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 504.","line":190,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":190,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 408.","line":196,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":196,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":199,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":199,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":202,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":202,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":205,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":205,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":208,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":208,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":211,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":211,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":214,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":214,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":217,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":217,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":251,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":251,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":329,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":329,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 600.","line":333,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":333,"endColumn":47},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":385,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":385,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9485,9487],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Request, Response, NextFunction } from 'express';\nimport type { ApiError } from '@/types';\nimport logger from '@/utils/logger';\nimport { type BaseError, createErrorFromUnknown } from '@/types/errors';\nimport { type JsonValue, SafeAccess } from '@/types/dynamic';\n\n/**\n * 统一的类型安全错误处理中间件\n *\n * 特性：\n * - 使用类型安全的错误处理基础设施\n * - 统一的错误响应格式\n * - 开发环境详细信息\n * - 结构化日志记录\n * - 错误分类和状态码映射\n */\nexport const errorHandler = (\n  unknownError: unknown,\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void => {\n  // 使用类型安全基础设施创建结构化错误\n  const typedError = createErrorFromUnknown(unknownError, {\n    component: 'ErrorHandler',\n    operation: 'globalErrorHandling',\n    url: req.originalUrl,\n    method: req.method,\n    context: {\n      headers: req.headers,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip,\n    },\n  });\n\n  // 结构化日志记录（包含requestId）\n  logger.error('统一错误处理', {\n    errorId: typedError.id,\n    code: typedError.code,\n    message: typedError.message,\n    component: SafeAccess.getString(typedError.context, 'component'),\n    operation: SafeAccess.getString(typedError.context, 'operation'),\n    url: req.originalUrl,\n    method: req.method,\n    timestamp: typedError.timestamp,\n    stack: typedError.stack,\n    userAgent: req.get('User-Agent'),\n    ip: req.ip,\n    requestId: (req as any).requestId, // 添加requestId用于追踪\n    userId: (req as any).user?.id, // 添加userId（如果已认证）\n  });\n\n  // 如果响应已经发送，传递给默认错误处理器\n  if (res.headersSent) {\n    return next(typedError);\n  }\n\n  // 生成统一的API错误响应\n  const errorResponse = typedError.toApiError();\n\n  // 根据错误类型确定HTTP状态码\n  const statusCode = getErrorStatusCode(typedError);\n\n  // 开发环境下添加额外调试信息\n  if (process.env.NODE_ENV === 'development') {\n    errorResponse.details = {\n      originalError: typedError.message,\n      ...(typedError.stack && { stack: typedError.stack }),\n      ...(typedError.context && { context: typedError.context }),\n      errorId: typedError.id,\n      component: SafeAccess.getString(typedError.context, 'component'),\n      operation: SafeAccess.getString(typedError.context, 'operation'),\n    } as JsonValue;\n  }\n\n  // 生产环境下添加错误ID用于追踪\n  if (process.env.NODE_ENV === 'production') {\n    res.setHeader('X-Error-ID', typedError.id);\n  }\n\n  res.status(statusCode).json(errorResponse);\n};\n\n/**\n * 根据错误类型确定HTTP状态码\n *\n * 完整的HTTP状态码映射：\n * - 4xx: 客户端错误\n * - 5xx: 服务器错误\n */\nfunction getErrorStatusCode(error: BaseError): number {\n  const { code } = error;\n  const message = error.message.toLowerCase();\n\n  // ==================== 客户端错误 (4xx) ====================\n\n  // 400 Bad Request - 请求参数错误\n  if (code === 'VALIDATION_ERROR' || code === 'INVALID_PARAMS' || code === 'BAD_REQUEST') {\n    return 400;\n  }\n\n  // 401 Unauthorized - 未认证\n  if (code === 'UNAUTHORIZED' || code === 'AUTHENTICATION_FAILED' ||\n      code === 'AUTHENTICATION_ERROR' || code === 'TOKEN_INVALID' || code === 'TOKEN_EXPIRED') {\n    return 401;\n  }\n\n  // 403 Forbidden - 权限不足\n  if (code === 'FORBIDDEN' || code === 'PERMISSION_DENIED' ||\n      code === 'ACCESS_DENIED' || code === 'INSUFFICIENT_PERMISSIONS') {\n    return 403;\n  }\n\n  // 404 Not Found - 资源不存在\n  if (code === 'NOT_FOUND' || code === 'RESOURCE_NOT_FOUND' ||\n      code === 'AGENT_NOT_FOUND' || code === 'SESSION_NOT_FOUND') {\n    return 404;\n  }\n\n  // 405 Method Not Allowed - HTTP方法不允许\n  if (code === 'METHOD_NOT_ALLOWED') {\n    return 405;\n  }\n\n  // 406 Not Acceptable - 无法提供可接受的内容\n  if (code === 'NOT_ACCEPTABLE') {\n    return 406;\n  }\n\n  // 408 Request Timeout - 请求超时\n  if (code === 'TIMEOUT_ERROR' || code === 'REQUEST_TIMEOUT') {\n    return 408;\n  }\n\n  // 409 Conflict - 资源冲突\n  if (code === 'CONFLICT' || code === 'RESOURCE_CONFLICT' || code === 'DUPLICATE_RESOURCE') {\n    return 409;\n  }\n\n  // 410 Gone - 资源已永久删除\n  if (code === 'RESOURCE_GONE') {\n    return 410;\n  }\n\n  // 413 Payload Too Large - 请求体过大\n  if (code === 'PAYLOAD_TOO_LARGE' || code === 'FILE_TOO_LARGE') {\n    return 413;\n  }\n\n  // 415 Unsupported Media Type - 不支持的媒体类型\n  if (code === 'UNSUPPORTED_MEDIA_TYPE') {\n    return 415;\n  }\n\n  // 422 Unprocessable Entity - 语义错误\n  if (code === 'VALIDATION_FAILED' || code === 'SEMANTIC_ERROR') {\n    return 422;\n  }\n\n  // 429 Too Many Requests - 速率限制\n  if (code === 'RATE_LIMIT_EXCEEDED' || code === 'TOO_MANY_REQUESTS') {\n    return 429;\n  }\n\n  // ==================== 服务器错误 (5xx) ====================\n\n  // 500 Internal Server Error - 内部错误\n  if (code === 'INTERNAL_SERVER_ERROR' || code === 'INTERNAL_ERROR') {\n    return 500;\n  }\n\n  // 501 Not Implemented - 功能未实现\n  if (code === 'NOT_IMPLEMENTED') {\n    return 501;\n  }\n\n  // 502 Bad Gateway - 上游服务错误\n  if (code === 'BAD_GATEWAY' || code === 'UPSTREAM_ERROR') {\n    return 502;\n  }\n\n  // 503 Service Unavailable - 服务不可用\n  if (code === 'SERVICE_UNAVAILABLE' || code === 'CIRCUIT_BREAKER_OPEN' ||\n      code === 'SERVICE_DEGRADED') {\n    return 503;\n  }\n\n  // 504 Gateway Timeout - 网关超时\n  if (code === 'GATEWAY_TIMEOUT' || code === 'UPSTREAM_TIMEOUT') {\n    return 504;\n  }\n\n  // ==================== 基于消息内容的智能判断 ====================\n\n  if (message.includes('timeout')) {\n    return 408;\n  }\n  if (message.includes('not found')) {\n    return 404;\n  }\n  if (message.includes('unauthorized') || message.includes('unauthenticated')) {\n    return 401;\n  }\n  if (message.includes('forbidden') || message.includes('permission denied')) {\n    return 403;\n  }\n  if (message.includes('validation')) {\n    return 400;\n  }\n  if (message.includes('conflict') || message.includes('duplicate')) {\n    return 409;\n  }\n  if (message.includes('rate limit')) {\n    return 429;\n  }\n  if (message.includes('unavailable') || message.includes('circuit')) {\n    return 503;\n  }\n\n  // 默认服务器错误\n  return 500;\n}\n\n/**\n * 异步错误包装器\n * 用于包装异步路由处理器，自动捕获和处理错误\n */\nexport const asyncErrorHandler = (\n  fn: (req: Request, res: Response, next: NextFunction) => Promise<void>,\n) => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\n/**\n * 404错误处理中间件\n */\nexport const notFoundHandler = (req: Request, res: Response, _next: NextFunction): void => {\n  const error = createErrorFromUnknown(\n    new Error(`Route ${req.method} ${req.originalUrl} not found`),\n    {\n      component: 'ErrorHandler',\n      operation: 'notFoundHandling',\n      url: req.originalUrl,\n      method: req.method,\n    },\n  );\n\n  const errorResponse = error.toApiError();\n  res.status(404).json(errorResponse);\n};\n\n/**\n * 错误响应生成工具\n */\nexport const createErrorResponse = (\n  error: BaseError,\n  includeDetails = false,\n): ApiError => {\n  const response = error.toApiError();\n\n  if (includeDetails) {\n    response.details = {\n      errorId: error.id,\n      ...(error.context && { context: error.context }),\n      component: SafeAccess.getString(error.context, 'component'),\n      operation: SafeAccess.getString(error.context, 'operation'),\n    } as JsonValue;\n  }\n\n  return response;\n};\n\n/**\n * 安全的JSON响应工具\n */\nexport const safeJsonResponse = (\n  res: Response,\n  data: JsonValue,\n  statusCode = 200,\n): void => {\n  try {\n    res.status(statusCode).json(data);\n  } catch (unknownError: unknown) {\n    const typedError = createErrorFromUnknown(unknownError, {\n      component: 'ErrorHandler',\n      operation: 'safeJsonResponse',\n      context: { statusCode, dataType: typeof data },\n    });\n\n    const errorResponse = typedError.toApiError();\n    res.status(500).json(errorResponse);\n  }\n};\n\n/**\n * 错误事件记录工具\n */\nexport const logErrorEvent = (\n  error: BaseError,\n  additionalContext?: Record<string, unknown>,\n): void => {\n  const logData = {\n    errorId: error.id,\n    code: error.code,\n    message: error.message,\n    component: SafeAccess.getString(error.context, 'component'),\n    operation: SafeAccess.getString(error.context, 'operation'),\n    timestamp: error.timestamp,\n    severity: error.severity,\n    ...additionalContext,\n  };\n\n  if (error.severity === 'critical' || error.severity === 'high') {\n    logger.error('🚨 高优先级错误', logData);\n  } else if (error.severity === 'medium') {\n    logger.warn('⚠️ 中等优先级错误', logData);\n  } else {\n    logger.info('ℹ️ 低优先级错误', logData);\n  }\n};\n\n/**\n * 错误分类工具\n * 判断错误是否为客户端错误（4xx）还是服务器错误（5xx）\n */\nexport const isClientError = (statusCode: number): boolean => {\n  return statusCode >= 400 && statusCode < 500;\n};\n\nexport const isServerError = (statusCode: number): boolean => {\n  return statusCode >= 500 && statusCode < 600;\n};\n\n/**\n * 判断错误是否需要立即告警\n */\nexport const shouldAlert = (error: BaseError): boolean => {\n  // Critical和High严重级别需要告警\n  if (error.severity === 'critical' || error.severity === 'high') {\n    return true;\n  }\n\n  // 5xx服务器错误需要告警\n  const statusCode = getErrorStatusCode(error);\n  if (isServerError(statusCode)) {\n    return true;\n  }\n\n  // 特定错误码需要告警\n  const alertCodes = [\n    'DATABASE_ERROR',\n    'REDIS_ERROR',\n    'CIRCUIT_BREAKER_OPEN',\n    'SERVICE_UNAVAILABLE',\n    'CRITICAL_SYSTEM_ERROR',\n  ];\n\n  return alertCodes.includes(error.code);\n};\n\n/**\n * 获取错误的可读描述\n */\nexport const getErrorDescription = (code: string): string => {\n  const descriptions: Record<string, string> = {\n    // 客户端错误\n    'VALIDATION_ERROR': '请求参数验证失败',\n    'UNAUTHORIZED': '未经授权的访问',\n    'FORBIDDEN': '权限不足',\n    'NOT_FOUND': '请求的资源不存在',\n    'CONFLICT': '资源冲突',\n    'RATE_LIMIT_EXCEEDED': '请求频率超过限制',\n\n    // 服务器错误\n    'INTERNAL_SERVER_ERROR': '服务器内部错误',\n    'SERVICE_UNAVAILABLE': '服务暂时不可用',\n    'TIMEOUT_ERROR': '请求处理超时',\n    'DATABASE_ERROR': '数据库操作失败',\n    'REDIS_ERROR': 'Redis操作失败',\n    'CIRCUIT_BREAKER_OPEN': '熔断器开启',\n  };\n\n  return descriptions[code] || '未知错误';\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/fileUpload.ts","messages":[{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'existsSync'.","line":23,"column":6,"nodeType":"MemberExpression","messageId":"noSync","endLine":23,"endColumn":19},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'mkdirSync'.","line":24,"column":3,"nodeType":"MemberExpression","messageId":"noSync","endLine":24,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":64,"column":13,"nodeType":"Literal","messageId":"noMagic","endLine":64,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":65,"column":8,"nodeType":"Literal","messageId":"noMagic","endLine":65,"endColumn":10},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":76,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":76,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":121,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":121,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2764,2767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2764,2767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":122,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Error`.","line":128,"column":15,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":128,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":133,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":133,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3133,3136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3133,3136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":134,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Error`.","line":140,"column":15,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":140,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":204,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":204,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4794,4797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4794,4797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":205,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Error`.","line":206,"column":10,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":206,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 文件上传中间件\n * 使用Multer实现安全的文件上传功能\n *\n * 功能：\n * - 文件类型白名单验证\n * - 文件大小限制\n * - 随机文件名生成\n * - 安全的文件存储\n */\n\nimport multer from 'multer';\nimport type express from 'express';\nimport path from 'path';\nimport fs from 'fs';\nimport crypto from 'crypto';\nimport logger from '@/utils/logger';\n\n/**\n * 确保上传目录存在\n */\nconst uploadDir = path.join(__dirname, '../../uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n  logger.info('Upload directory created', { path: uploadDir });\n}\n\n/**\n * 允许的文件类型（MIME类型白名单）\n */\nconst ALLOWED_MIME_TYPES = [\n  // 图片\n  'image/jpeg',\n  'image/png',\n  'image/gif',\n  'image/webp',\n  'image/svg+xml',\n  // 文档\n  'application/pdf',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // .docx\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',       // .xlsx\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation', // .pptx\n  'text/plain',\n  'text/csv',\n  // CAD文件\n  'application/dxf',\n  'application/acad',\n];\n\n/**\n * 允许的文件扩展名（白名单）\n */\nconst ALLOWED_EXTENSIONS = [\n  '.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg',\n  '.pdf', '.docx', '.xlsx', '.pptx', '.txt', '.csv',\n  '.dxf', '.dwg',\n];\n\n/**\n * 文件大小限制（字节）\n */\nconst FILE_SIZE_LIMITS = {\n  image: 10 * 1024 * 1024,      // 图片：10MB\n  document: 20 * 1024 * 1024,    // 文档：20MB\n  cad: 50 * 1024 * 1024,         // CAD文件：50MB\n  default: 10 * 1024 * 1024,     // 默认：10MB\n};\n\n/**\n * 生成安全的文件名\n * 格式：timestamp-randomhash.ext\n */\nfunction generateSafeFilename(originalname: string): string {\n  const ext = path.extname(originalname).toLowerCase();\n  const timestamp = Date.now();\n  const randomHash = crypto.randomBytes(8).toString('hex');\n  return `${timestamp}-${randomHash}${ext}`;\n}\n\n/**\n * 获取文件大小限制\n */\nfunction _getFileSizeLimit(mimetype: string, ext: string): number {\n  if (mimetype.startsWith('image/')) {\n    return FILE_SIZE_LIMITS.image;\n  }\n  if (ext === '.dxf' || ext === '.dwg') {\n    return FILE_SIZE_LIMITS.cad;\n  }\n  if (mimetype.includes('pdf') || mimetype.includes('document') || mimetype.includes('sheet')) {\n    return FILE_SIZE_LIMITS.document;\n  }\n  return FILE_SIZE_LIMITS.default;\n}\n\n/**\n * Multer存储配置\n */\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const safeFilename = generateSafeFilename(file.originalname);\n    cb(null, safeFilename);\n  },\n});\n\n/**\n * 文件过滤器（安全验证）\n */\nconst fileFilter = (\n  req: Express.Request,\n  file: Express.Multer.File,\n  cb: multer.FileFilterCallback,\n): void => {\n  const ext = path.extname(file.originalname).toLowerCase();\n\n  // 检查文件扩展名\n  if (!ALLOWED_EXTENSIONS.includes(ext)) {\n    const error = new Error(`File type not allowed: ${ext}`) as any;\n    error.code = 'INVALID_FILE_TYPE';\n    logger.warn('File upload rejected - invalid extension', {\n      filename: file.originalname,\n      extension: ext,\n      mimetype: file.mimetype,\n    });\n    return cb(error);\n  }\n\n  // 检查MIME类型\n  if (!ALLOWED_MIME_TYPES.includes(file.mimetype)) {\n    const error = new Error(`MIME type not allowed: ${file.mimetype}`) as any;\n    error.code = 'INVALID_MIME_TYPE';\n    logger.warn('File upload rejected - invalid MIME type', {\n      filename: file.originalname,\n      extension: ext,\n      mimetype: file.mimetype,\n    });\n    return cb(error);\n  }\n\n  // 通过验证\n  cb(null, true);\n};\n\n/**\n * Multer基础配置\n */\nconst uploadConfig: multer.Options = {\n  storage,\n  fileFilter,\n  limits: {\n    fileSize: FILE_SIZE_LIMITS.cad,  // 使用最大限制（动态检查）\n    files: 10,                        // 最多10个文件\n    fields: 20,                       // 最多20个字段\n    fieldSize: 1024 * 1024,          // 字段大小1MB\n  },\n};\n\n/**\n * 导出Multer实例\n */\nexport const upload = multer(uploadConfig);\n\n/**\n * 单文件上传中间件\n * 使用方式: router.post('/upload', uploadSingle, handler)\n */\nexport const uploadSingle: express.RequestHandler = upload.single('file');\n\n/**\n * 多文件上传中间件（同一字段）\n * 使用方式: router.post('/upload', uploadMultiple, handler)\n */\nexport const uploadMultiple: express.RequestHandler = upload.array('files', 10);\n\n/**\n * 多字段文件上传中间件\n * 使用方式: router.post('/upload', uploadFields, handler)\n */\nexport const uploadFields: express.RequestHandler = upload.fields([\n  { name: 'avatar', maxCount: 1 },\n  { name: 'images', maxCount: 5 },\n  { name: 'documents', maxCount: 5 },\n]);\n\n/**\n * 任意文件上传中间件\n * 使用方式: router.post('/upload', uploadAny, handler)\n */\nexport const uploadAny: express.RequestHandler = upload.any();\n\n/**\n * CAD文件专用上传中间件\n */\nconst cadUploader = multer({\n  storage,\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname).toLowerCase();\n    if (ext === '.dxf' || ext === '.dwg') {\n      cb(null, true);\n    } else {\n      const error = new Error('Only CAD files (.dxf, .dwg) are allowed') as any;\n      error.code = 'INVALID_CAD_FILE';\n      cb(error);\n    }\n  },\n  limits: {\n    fileSize: FILE_SIZE_LIMITS.cad,\n    files: 1,\n  },\n}).single('cadFile');\n\nexport const uploadCad: express.RequestHandler = cadUploader;\n\n/**\n * 导出常量\n */\nexport {\n  uploadDir,\n  ALLOWED_MIME_TYPES,\n  ALLOWED_EXTENSIONS,\n  FILE_SIZE_LIMITS,\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/jwtAuth.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":37,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":37,"endColumn":23},{"ruleId":"@typescript-eslint/await-thenable","severity":1,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":48,"column":25,"nodeType":"AwaitExpression","messageId":"await","endLine":48,"endColumn":62,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1224,1229],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":56,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":56,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":69,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":69,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1752,1754],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":70,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":70,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1813,1815],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":94,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":94,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":110,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":110,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * JWT 认证中间件\n * 验证请求中的 Bearer Token 并解析用户信息\n */\n\nimport type { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { SecureJWT } from '@/utils/secureJwt';\nimport { safeLogger } from '@/utils/logSanitizer';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    username: string;\n    role: 'admin' | 'user';\n  };\n}\n\n/**\n * JWT 认证中间件\n * 从 Authorization header 中提取并验证 JWT token\n */\nexport function authenticateJWT() {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const authHeader = req.headers.authorization;\n\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        safeLogger.warn('缺少 Authorization header', {\n          component: 'jwtAuth',\n          path: req.path,\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n        });\n\n        res.status(401).json({\n          success: false,\n          code: 'AUTHENTICATION_REQUIRED',\n          message: '请提供有效的认证令牌',\n        });\n        return;\n      }\n\n      const token = authHeader.substring(7); // 移除 \"Bearer \" 前缀\n\n      // 检查令牌是否已撤销\n      const isRevoked = await SecureJWT.isTokenRevoked(token);\n      if (isRevoked) {\n        safeLogger.warn('JWT token 已被撤销', {\n          component: 'jwtAuth',\n          path: req.path,\n          ip: req.ip,\n        });\n\n        res.status(401).json({\n          success: false,\n          code: 'TOKEN_REVOKED',\n          message: '认证令牌已被撤销，请重新登录',\n        });\n        return;\n      }\n\n      // 使用安全的JWT验证\n      const decoded = SecureJWT.verifyToken(token);\n\n      // 将用户信息附加到请求对象\n      (req as AuthenticatedRequest).user = {\n        id: (decoded.sub || decoded.userId) ?? '',\n        username: decoded.username || 'user',\n        role: (decoded.role as 'user' | 'admin') || 'user',\n      };\n\n      safeLogger.info('JWT 认证成功', {\n        component: 'jwtAuth',\n        userId: decoded.sub,\n        username: decoded.username,\n        role: decoded.role,\n        path: req.path,\n        tokenId: decoded.jti,\n        tokenTTL: SecureJWT.getTokenTTL(token),\n      });\n\n      next();\n    } catch (unknownError: unknown) {\n      if (unknownError instanceof jwt.TokenExpiredError) {\n        safeLogger.warn('JWT token 已过期', {\n          component: 'jwtAuth',\n          path: req.path,\n          ip: req.ip,\n          expiredAt: unknownError.expiredAt,\n        });\n\n        res.status(401).json({\n          success: false,\n          code: 'TOKEN_EXPIRED',\n          message: '认证令牌已过期，请重新登录',\n        });\n        return;\n      }\n\n      if (unknownError instanceof jwt.JsonWebTokenError) {\n        safeLogger.warn('无效的 JWT token', {\n          component: 'jwtAuth',\n          path: req.path,\n          ip: req.ip,\n          error: unknownError.message,\n        });\n\n        res.status(401).json({\n          success: false,\n          code: 'INVALID_TOKEN',\n          message: '无效的认证令牌',\n        });\n        return;\n      }\n\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'jwtAuth',\n        operation: 'authenticateJWT',\n      });\n      safeLogger.error('JWT 认证失败', error.toLogObject());\n\n      res.status(500).json({\n        success: false,\n        ...error.toApiError(),\n      });\n      return;\n    }\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/jwtAuthOptimized.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/metricsMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/prometheusMiddleware.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1e9.","line":23,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":28,"column":9,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":28,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .path on an `any` value.","line":28,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Prometheus监控中间件\n * 自动记录所有HTTP请求的响应时间和状态码\n */\n\nimport { Request, Response, NextFunction } from 'express';\nimport { prometheusService } from '@/services/PrometheusService';\n\n/**\n * Prometheus请求监控中间件\n */\nexport function prometheusMiddleware() {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const startTime = process.hrtime();\n\n    // 增加活动连接数\n    prometheusService.incrementActiveConnections();\n\n    // 监听响应完成事件\n    res.on('finish', () => {\n      // 计算响应时间（秒）\n      const [seconds, nanoseconds] = process.hrtime(startTime);\n      const durationSeconds = seconds + nanoseconds / 1e9;\n\n      // 记录请求指标\n      prometheusService.recordHttpRequest(\n        req.method,\n        req.route?.path ?? req.path,\n        res.statusCode,\n        durationSeconds,\n      );\n\n      // 减少活动连接数\n      prometheusService.decrementActiveConnections();\n    });\n\n    next();\n  };\n}\n\nexport default prometheusMiddleware;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/protectionMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/queueMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/rateLimiter.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":20,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":20,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[438,440],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":26,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":35,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":35,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Request, Response, NextFunction } from 'express';\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\n\n// 创建速率限制器\nconst rateLimiter = new RateLimiterMemory({\n  points: 100, // 请求数量\n  duration: 60, // 时间窗口（秒）\n  blockDuration: 60, // 阻止时间（秒）\n});\n\n/**\n * 速率限制中间件\n */\nexport const rateLimiterMiddleware = async (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): Promise<void> => {\n  try {\n    const key = req.ip || 'anonymous';\n    await rateLimiter.consume(key);\n    next();\n  } catch (rejRes: unknown) {\n    const r = rejRes as {remainingPoints?: number; msBeforeNext?: number};\n    const remainingPoints = r?.remainingPoints ?? 0;\n    const msBeforeNext = r?.msBeforeNext ?? 60000;\n\n    res.set({\n      'Retry-After': Math.round(msBeforeNext / 1000),\n      'X-RateLimit-Limit': '100',\n      'X-RateLimit-Remaining': remainingPoints.toString(),\n      'X-RateLimit-Reset': new Date(Date.now() + msBeforeNext).toISOString(),\n    });\n\n    res.status(429).json({\n      code: 'RATE_LIMIT_EXCEEDED',\n      message: '请求过于频繁，请稍后再试',\n      retryAfter: Math.round(msBeforeNext / 1000),\n      timestamp: new Date().toISOString(),\n    });\n  }\n};\n\nexport { rateLimiterMiddleware as rateLimiter };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/rateLimiterV2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/middleware/requestLogger.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":24,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":24,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Request, Response, NextFunction } from 'express';\nimport logger from '../utils/logger';\n\n/**\n * 请求日志中间件\n */\nexport const requestLogger = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void => {\n  const startTime = Date.now();\n  const { method, url, ip } = req;\n\n  // 记录请求开始\n  logger.debug('📝 HTTP请求', { method, url, ip, timestamp: new Date().toISOString() });\n\n  // 监听响应完成\n  res.on('finish', () => {\n    const duration = Date.now() - startTime;\n    const { statusCode } = res;\n\n    // 根据状态码选择日志级别\n    const logLevel = statusCode >= 400 ? '❌' : '✅';\n\n    logger.debug(\n      `${logLevel} [${new Date().toISOString()}] ${method} ${url} - ${statusCode} - ${duration}ms`,\n    );\n  });\n\n  next();\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/admin.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":22,"column":42,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":22,"endColumn":57},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":25,"column":43,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":25,"endColumn":64},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":28,"column":44,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":28,"endColumn":66},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":31,"column":43,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":31,"endColumn":59},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":34,"column":34,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":34,"endColumn":47},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":35,"column":36,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":35,"endColumn":51},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":38,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":81,"endColumn":2},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":84,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":135,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2771,2774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2771,2774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":112,"column":28,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":112,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .total on an `any` value.","line":112,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":54},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":138,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":189,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4283,4286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4283,4286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router, type Request, type Response } from 'express';\nimport {\n  getConfigHealth,\n  compareConfigSnapshot,\n  cleanupObsoleteConfigs,\n  getConfigDetails,\n  getAdminStats,\n  getAdminMetrics,\n} from '@/controllers/AdminController';\nimport { adminGuard } from '@/middleware/adminGuard';\nimport { safeLogger as logger } from '@/utils/logSanitizer';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nconst router: Router = Router();\n\n/**\n * 管理接口路由\n * 所有接口都需要管理员权限\n */\n\n// 配置健康状态监控\nrouter.get('/config/health', adminGuard, getConfigHealth);\n\n// 配置快照对比\nrouter.get('/config/compare', adminGuard, compareConfigSnapshot);\n\n// 清理废弃配置\nrouter.post('/config/cleanup', adminGuard, cleanupObsoleteConfigs);\n\n// 获取配置详情\nrouter.get('/config/details', adminGuard, getConfigDetails);\n\n// 统计数据和指标\nrouter.get('/stats', adminGuard, getAdminStats);\nrouter.get('/metrics', adminGuard, getAdminMetrics);\n\n// ✨ 新增：系统信息端点\nrouter.get('/system-info', adminGuard, async (req: Request, res: Response) => {\n  try {\n    const memUsage = process.memoryUsage();\n    const { getPool } = await import('@/utils/db');\n    const pool = getPool();\n\n    // 检查数据库健康\n    const dbResult = await pool.query('SELECT 1 as health').catch(() => null);\n\n    res.json({\n      code: 'OK',\n      message: 'success',\n      data: {\n        system: {\n          memory: {\n            rss: `${Math.round(memUsage.rss / 1024 / 1024)}MB`,\n            heapTotal: `${Math.round(memUsage.heapTotal / 1024 / 1024)}MB`,\n            heapUsed: `${Math.round(memUsage.heapUsed / 1024 / 1024)}MB`,\n            heapUsedPercent: `${((memUsage.heapUsed / memUsage.heapTotal) * 100).toFixed(2)}%`,\n          },\n          uptime: process.uptime(),\n          nodeVersion: process.version,\n          env: process.env.NODE_ENV ?? 'development',\n        },\n        database: {\n          healthy: dbResult !== null,\n          totalConnections: pool.totalCount,\n          idleConnections: pool.idleCount,\n          waitingRequests: pool.waitingCount,\n        },\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'adminRoutes',\n      operation: 'getSystemInfo',\n    });\n    logger.error('Failed to get system info', error.toLogObject());\n\n    const apiError = error.toApiError();\n    res.status(500).json(apiError);\n  }\n});\n\n// ✨ 新增：用户列表端点\nrouter.get('/users', adminGuard, async (req: Request, res: Response) => {\n  try {\n    const { search, page = 1, limit = 20 } = req.query;\n    const { getPool } = await import('@/utils/db');\n    const pool = getPool();\n\n    let query = `\n      SELECT id, username, role, status, created_at, last_login_at, last_login_ip\n      FROM users\n      WHERE 1=1\n    `;\n    const params: any[] = [];\n\n    // 搜索功能\n    if (search && typeof search === 'string') {\n      query += ` AND username ILIKE $${params.length + 1}`;\n      params.push(`%${search}%`);\n    }\n\n    // 分页\n    const offset = (Number(page) - 1) * Number(limit);\n    query += ` ORDER BY created_at DESC LIMIT $${params.length + 1} OFFSET $${params.length + 2}`;\n    params.push(Number(limit), offset);\n\n    const result = await pool.query(query, params);\n\n    // 获取总数\n    const countResult = await pool.query('SELECT COUNT(*) as total FROM users');\n    const total = parseInt(countResult.rows[0]?.total || '0', 10);\n\n    res.json({\n      code: 'OK',\n      message: 'success',\n      data: result.rows,\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total,\n        totalPages: Math.ceil(total / Number(limit)),\n      },\n    });\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'adminRoutes',\n      operation: 'getUsers',\n    });\n    logger.error('Failed to get users', error.toLogObject());\n\n    const apiError = error.toApiError();\n    res.status(500).json(apiError);\n  }\n});\n\n// ✨ 新增：审计日志端点（代理到audit路由）\nrouter.get('/audit', adminGuard, async (req: Request, res: Response) => {\n  try {\n    const { type, startDate, endDate, page = 1, limit = 50 } = req.query;\n    const { getPool } = await import('@/utils/db');\n    const pool = getPool();\n\n    let query = `\n      SELECT *\n      FROM audit_logs\n      WHERE 1=1\n    `;\n    const params: any[] = [];\n\n    // 类型筛选\n    if (type && typeof type === 'string') {\n      query += ` AND action ILIKE $${params.length + 1}`;\n      params.push(`%${type}%`);\n    }\n\n    // 时间范围\n    if (startDate && typeof startDate === 'string') {\n      query += ` AND created_at >= $${params.length + 1}`;\n      params.push(startDate);\n    }\n    if (endDate && typeof endDate === 'string') {\n      query += ` AND created_at <= $${params.length + 1}`;\n      params.push(endDate);\n    }\n\n    // 分页\n    const offset = (Number(page) - 1) * Number(limit);\n    query += ` ORDER BY created_at DESC LIMIT $${params.length + 1} OFFSET $${params.length + 2}`;\n    params.push(Number(limit), offset);\n\n    const result = await pool.query(query, params);\n\n    res.json({\n      code: 'OK',\n      message: 'success',\n      data: result.rows,\n    });\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'adminRoutes',\n      operation: 'getAuditLogs',\n    });\n    logger.error('Failed to get audit logs', error.toLogObject());\n\n    const apiError = error.toApiError();\n    res.status(500).json(apiError);\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/agents.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":49,"column":17,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":49,"endColumn":42},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":81,"column":20,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":81,"endColumn":44},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":102,"column":27,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":102,"endColumn":57},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":116,"column":24,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":116,"endColumn":52},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":137,"column":29,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":137,"endColumn":58},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":181,"column":18,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":181,"endColumn":45},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":209,"column":20,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":209,"endColumn":47},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":231,"column":23,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":231,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 智能体路由\n *\n * @swagger\n * tags:\n *   name: Agents\n *   description: 智能体管理接口\n */\n\nimport { Router, type Router as RouterType } from 'express';\nimport { AgentController } from '@/controllers/AgentController';\n\nconst router: RouterType = Router();\n\n/**\n * @swagger\n * /api/agents:\n *   get:\n *     summary: 获取所有智能体列表\n *     tags: [Agents]\n *     responses:\n *       200:\n *         description: 成功返回智能体列表\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: string\n *                   example: SUCCESS\n *                 message:\n *                   type: string\n *                   example: 获取智能体列表成功\n *                 data:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/Agent'\n *       500:\n *         description: 服务器错误\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\n// 创建控制器实例\nconst agentController = new AgentController();\n\nrouter.get('/', agentController.getAgents);\n\n/**\n * @swagger\n * /api/agents/{id}:\n *   get:\n *     summary: 获取指定智能体信息\n *     tags: [Agents]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: 智能体ID\n *     responses:\n *       200:\n *         description: 成功返回智能体信息\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 code:\n *                   type: string\n *                 data:\n *                   $ref: '#/components/schemas/Agent'\n *       404:\n *         description: 智能体不存在\n *       500:\n *         description: 服务器错误\n */\nrouter.get('/:id', agentController.getAgent);\n\n/**\n * @swagger\n * /api/agents/{id}/status:\n *   get:\n *     summary: 检查智能体状态\n *     tags: [Agents]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: 智能体ID\n *     responses:\n *       200:\n *         description: 智能体状态正常\n *       503:\n *         description: 智能体不可用\n */\nrouter.get('/:id/status', agentController.getAgentStatus);\n\n/**\n * @swagger\n * /api/agents/reload:\n *   post:\n *     summary: 重新加载智能体配置\n *     tags: [Agents]\n *     responses:\n *       200:\n *         description: 配置重新加载成功\n *       500:\n *         description: 重新加载失败\n */\nrouter.post('/reload', agentController.reloadAgents);\n\n/**\n * @swagger\n * /api/agents/{id}/validate:\n *   get:\n *     summary: 验证智能体配置\n *     tags: [Agents]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: 智能体ID\n *     responses:\n *       200:\n *         description: 配置验证成功\n *       400:\n *         description: 配置验证失败\n */\nrouter.get('/:id/validate', agentController.validateAgent);\n\n/**\n * @swagger\n * /api/agents:\n *   post:\n *     summary: 创建新智能体\n *     tags: [Agents]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - name\n *               - provider\n *               - endpoint\n *               - apiKey\n *               - model\n *             properties:\n *               name:\n *                 type: string\n *               description:\n *                 type: string\n *               provider:\n *                 type: string\n *                 enum: [fastgpt, openai, anthropic, dify, custom]\n *               endpoint:\n *                 type: string\n *               apiKey:\n *                 type: string\n *               model:\n *                 type: string\n *     responses:\n *       201:\n *         description: 智能体创建成功\n *       400:\n *         description: 请求参数错误\n *       401:\n *         description: 未授权\n */\nrouter.post('/', agentController.createAgent);\n\n/**\n * @swagger\n * /api/agents/{id}:\n *   put:\n *     summary: 更新智能体配置\n *     tags: [Agents]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *     responses:\n *       200:\n *         description: 更新成功\n *       404:\n *         description: 智能体不存在\n */\nrouter.put('/:id', agentController.updateAgent);\n\n/**\n * @swagger\n * /api/agents/{id}:\n *   delete:\n *     summary: 删除智能体\n *     tags: [Agents]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: 删除成功\n *       404:\n *         description: 智能体不存在\n */\nrouter.delete('/:id', agentController.deleteAgent);\n\nexport default router;\nexport { router as agentRoutes };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/analytics.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":25,"column":25,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":25,"endColumn":62},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":33,"column":23,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":33,"endColumn":56},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":42,"column":23,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":42,"endColumn":57},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":50,"column":20,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":50,"endColumn":58},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":60,"column":33,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":60,"endColumn":71},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":71,"column":37,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":71,"endColumn":78},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":80,"column":37,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":80,"endColumn":75}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Analytics路由 - 数据分析API\n *\n * 提供管理后台的数据分析端点\n */\n\nimport { Router, type Router as IRouter } from 'express';\nimport AnalyticsController from '@/controllers/AnalyticsController';\nimport { authenticateJWT } from '@/middleware/jwtAuth';\nimport { adminGuard } from '@/middleware/adminGuard';\n\nconst router: IRouter = Router();\n\n// ==================== 认证保护 ====================\n// 所有analytics路由都需要管理员权限\nrouter.use(authenticateJWT);\nrouter.use(adminGuard());\n\n// ==================== 系统概览 ====================\n/**\n * @route GET /api/admin/analytics/overview\n * @desc 获取系统概览数据\n * @access Admin\n */\nrouter.get('/overview', AnalyticsController.getSystemOverview);\n\n// ==================== 智能体统计 ====================\n/**\n * @route GET /api/admin/analytics/agents\n * @desc 获取智能体使用统计\n * @access Admin\n */\nrouter.get('/agents', AnalyticsController.getAgentStats);\n\n// ==================== 趋势分析 ====================\n/**\n * @route GET /api/admin/analytics/trends\n * @desc 获取每日趋势数据\n * @access Admin\n * @query {number} days - 查询天数（1-365，默认30）\n */\nrouter.get('/trends', AnalyticsController.getDailyTrends);\n\n// ==================== 地理分布 ====================\n/**\n * @route GET /api/admin/analytics/geo\n * @desc 获取地理分布数据\n * @access Admin\n */\nrouter.get('/geo', AnalyticsController.getGeoDistribution);\n\n/**\n * @route GET /api/admin/analytics/province-heatmap\n * @desc 获取省份热力图数据\n * @access Admin\n * @query {string} start - 开始时间\n * @query {string} end - 结束时间\n * @query {string} agentId - 智能体ID（可选）\n */\nrouter.get('/province-heatmap', AnalyticsController.getProvinceHeatmap);\n\n// ==================== 对话分析 ====================\n/**\n * @route GET /api/admin/analytics/conversations/series\n * @desc 获取对话系列数据（时间序列）\n * @access Admin\n * @query {string} start - 开始时间\n * @query {string} end - 结束时间\n * @query {string} agentId - 智能体ID（可选）\n */\nrouter.get('/conversations/series', AnalyticsController.getConversationSeries);\n\n/**\n * @route GET /api/admin/analytics/conversations/agents\n * @desc 获取智能体对比数据\n * @access Admin\n * @query {string} start - 开始时间\n * @query {string} end - 结束时间\n */\nrouter.get('/conversations/agents', AnalyticsController.getAgentComparison);\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":25,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":25,"endColumn":85},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":28,"column":24,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":28,"endColumn":41},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":28,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":28,"endColumn":88},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":31,"column":25,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":31,"endColumn":42},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":31,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":31,"endColumn":95},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":34,"column":23,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":34,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":34,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":34,"endColumn":92},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":37,"column":33,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":37,"endColumn":50},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":37,"column":52,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":37,"endColumn":105}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from 'express';\nimport { AuthController } from '@/controllers/AuthController';\n// 简化模式：使用基础express-rate-limit替代复杂的rateLimiterV2\nimport rateLimit from 'express-rate-limit';\n\nconst loginRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15分钟\n  max: 5, // 限制每个IP 5次登录尝试\n  message: '登录尝试过于频繁，请稍后再试',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\nimport { authenticateJWT } from '@/middleware/jwtAuth';\n\nconst router: Router = Router();\nconst authController = new AuthController();\n\n/**\n * 认证路由\n *\n * 所有认证相关的端点\n */\n\n// POST /api/auth/login - 用户登录\nrouter.post('/login', loginRateLimiter, (req, res) => authController.login(req, res));\n\n// POST /api/auth/logout - 用户登出\nrouter.post('/logout', authenticateJWT(), (req, res) => authController.logout(req, res));\n\n// POST /api/auth/refresh - 刷新Token\nrouter.post('/refresh', authenticateJWT(), (req, res) => authController.refreshToken(req, res));\n\n// GET /api/auth/verify - 验证Token\nrouter.get('/verify', authenticateJWT(), (req, res) => authController.verifyToken(req, res));\n\n// POST /api/auth/change-password - 修改密码\nrouter.post('/change-password', authenticateJWT(), (req, res) => authController.changePassword(req, res));\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/cad.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise-returning function provided to property where a void return was expected.","line":23,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnProperty","endLine":68,"endColumn":4},{"ruleId":"@typescript-eslint/await-thenable","severity":1,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":43,"column":26,"nodeType":"AwaitExpression","messageId":"await","endLine":43,"endColumn":77,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1347,1352],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":76,"column":24,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":76,"endColumn":41},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":83,"column":22,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":83,"endColumn":39},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":90,"column":24,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":90,"endColumn":41},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":97,"column":33,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":97,"endColumn":50},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":104,"column":31,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":104,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CAD 路由\n */\n\nimport { Router, type Router as RouterType } from 'express';\nimport multer from 'multer';\nimport { CadController } from '@/controllers/CadController';\nimport { SecureUpload } from '@/utils/secureUpload';\nimport { safeLogger } from '@/utils/logSanitizer';\nimport { authenticateJWT } from '@/middleware/jwtAuth';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nconst router: RouterType = Router();\nconst cadController = new CadController();\n\n// 安全配置文件上传\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit for security\n    files: 1, // Only allow one file at a time\n  },\n  fileFilter: async (req, file, cb) => {\n    try {\n      // Basic MIME type check first\n      if (!file.originalname.toLowerCase().endsWith('.dxf')) {\n        return cb(new Error('只支持 DXF 文件格式'));\n      }\n\n      // Set appropriate MIME type for DXF files\n      file.mimetype = 'application/dxf';\n\n      // Perform security validation\n      const uploadConfig = {\n        maxFileSize: 10 * 1024 * 1024, // 10MB\n        allowedMimeTypes: ['application/dxf', 'text/plain'],\n        allowedExtensions: ['.dxf'],\n        requireAuthentication: false, // DXF upload doesn't require auth for now\n        scanForMalware: true,\n        generateHashes: true,\n      };\n\n      const validation = await SecureUpload.validateFile(file, uploadConfig);\n\n      if (!validation.isValid) {\n        const errorMessage = validation.errors && validation.errors.length > 0\n          ? validation.errors.join('; ')\n          : '文件验证失败';\n        return cb(new Error(`文件安全验证失败: ${errorMessage}`));\n      }\n\n      if (validation.warnings && validation.warnings.length > 0) {\n        safeLogger.warn('[CAD Route] File upload validation warnings', {\n          filename: file.originalname,\n          warnings: validation.warnings,\n        });\n      }\n\n      cb(null, true);\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'cadRoutes',\n        operation: 'fileFilter',\n      });\n      safeLogger.error('[CAD Route] File validation error', error.toLogObject());\n      cb(new Error('文件验证过程中发生错误'));\n    }\n  },\n});\n\n/**\n * @route POST /api/cad/upload\n * @desc 上传 DXF 文件\n * @access Private\n */\nrouter.post('/upload', authenticateJWT(), upload.single('file'), cadController.uploadDxf);\n\n/**\n * @route GET /api/cad/tools\n * @desc 获取 Function Calling 工具定义\n * @access Private\n */\nrouter.get('/tools', authenticateJWT(), cadController.getFunctionTools);\n\n/**\n * @route GET /api/cad/:fileId\n * @desc 获取 CAD 文件信息\n * @access Private\n */\nrouter.get('/:fileId', authenticateJWT(), cadController.getCadFile);\n\n/**\n * @route POST /api/cad/:fileId/execute\n * @desc 执行 CAD 操作\n * @access Private\n */\nrouter.post('/:fileId/execute', authenticateJWT(), cadController.executeCadOperation);\n\n/**\n * @route GET /api/cad/:fileId/export\n * @desc 导出 DXF 文件\n * @access Private\n */\nrouter.get('/:fileId/export', authenticateJWT(), cadController.exportDxf);\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/chat.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":9,"column":29,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":9,"endColumn":59},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":13,"column":26,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":13,"endColumn":56},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":16,"column":21,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":16,"endColumn":44},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":19,"column":24,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":19,"endColumn":56},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":20,"column":32,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":20,"endColumn":61},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":21,"column":45,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":21,"endColumn":78},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":24,"column":35,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":24,"endColumn":67},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":25,"column":27,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":25,"endColumn":60},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":28,"column":39,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":28,"endColumn":70},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":32,"column":26,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":32,"endColumn":59},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":35,"column":29,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":35,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router, type Router as RouterType } from 'express';\nimport { ChatController } from '@/controllers/ChatController';\n\nconst router: RouterType = Router();\nconst chatController = new ChatController();\n\n// 发送聊天请求（支持流式和非流式）\n// POST /api/chat/completions\nrouter.post('/completions', chatController.chatCompletions);\n\n// 发送消息别名路由（向后兼容测试）\n// POST /api/chat/messages\nrouter.post('/messages', chatController.chatCompletions);\n\n// 聊天初始化路由\nrouter.get('/init', chatController.chatInit);\n\n// 获取聊天历史列表 & 详情\nrouter.get('/history', chatController.listChatHistories);\nrouter.get('/history/:chatId', chatController.getChatHistory);\nrouter.get('/sessions/:sessionId/messages', chatController.getSessionMessages);\n\n// 删除/清空聊天历史\nrouter.delete('/history/:chatId', chatController.deleteChatHistory);\nrouter.delete('/history', chatController.clearChatHistories);\n\n// 重新生成指定消息\nrouter.post('/history/:chatId/retry', chatController.retryChatMessage);\n\n// 点赞/点踩反馈\n// POST /api/chat/feedback\nrouter.post('/feedback', chatController.updateUserFeedback);\n\n// 上传附件（文件/语音）\nrouter.post('/attachments', chatController.uploadAttachment);\n\nexport default router;\nexport { router as chatRoutes };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/chatSessions.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":16,"column":17,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":16,"endColumn":34},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":16,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":39,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":18,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":18,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[514,517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[514,517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":18,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":20,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":20,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":28,"column":63,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":28,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":33,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":33,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[948,951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[948,951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":33,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":46,"column":18,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":46,"endColumn":35},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":46,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":86,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":48,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":48,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1322,1325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1322,1325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":48,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":50,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":50,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":57,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":57,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":60,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":60,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":68,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":68,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":69,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":69,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":70,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":70,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":71,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":71,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":72,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":77,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":77,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":80,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":80,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2076,2079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2076,2079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":80,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":92,"column":20,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":92,"endColumn":37},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":92,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":126,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":94,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":94,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2376,2379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2376,2379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":94,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":96,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":96,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":105,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":105,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":107,"column":68,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":107,"endColumn":74},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":110,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":110,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":120,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":120,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3092,3095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3092,3095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":120,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":133,"column":28,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":133,"endColumn":45},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":133,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":169,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":135,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":135,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3433,3436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3433,3436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":135,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":137,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":137,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":146,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":146,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":148,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":148,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":151,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":151,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":158,"column":60,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":158,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":158,"column":68,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":158,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":162,"column":26,"nodeType":"Property","messageId":"anyAssignment","endLine":162,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":163,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":163,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4203,4206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4203,4206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":163,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":175,"column":23,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":175,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":175,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":201,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":177,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":177,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4510,4513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4510,4513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":177,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":179,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":179,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":188,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":188,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":190,"column":55,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":190,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":195,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":195,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5043,5046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5043,5046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":195,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":207,"column":29,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":207,"endColumn":46},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":207,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":233,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":209,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":209,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5357,5360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5357,5360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":209,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":209,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":211,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":211,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":220,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":220,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":222,"column":56,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":222,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":227,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":227,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5892,5895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5892,5895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":227,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":239,"column":23,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":239,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":239,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":272,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":241,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":241,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6213,6216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6213,6216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":241,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":241,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":243,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":243,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":251,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":251,"endColumn":60},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":254,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":254,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":261,"column":62,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":261,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":266,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":266,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6885,6888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6885,6888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":266,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":266,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":278,"column":22,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":278,"endColumn":39},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":278,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":300,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":280,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":280,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7187,7190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7187,7190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":280,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":280,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":282,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":282,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":289,"column":60,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":289,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":294,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":294,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7545,7548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7545,7548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":294,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":294,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":98,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 聊天会话管理路由\n * 提供会话CRUD、搜索等API\n */\n\nimport express, { type Request, type Response, type NextFunction } from 'express';\nimport { chatSessionService, type CreateSessionParams } from '@/services/ChatSessionService';\nimport { authenticateJWT } from '@/middleware/jwtAuth';\n\nconst router: express.Router = express.Router();\n\n/**\n * 获取用户的所有会话\n * GET /api/chat-sessions?agentId=xxx\n */\nrouter.get('/', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      return res.status(401).json({\n        code: 'UNAUTHORIZED',\n        message: 'User not authenticated',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const agentId = req.query.agentId as string | undefined;\n    const sessions = await chatSessionService.getUserSessions(userId, agentId);\n\n    return res.json({\n      code: 'OK',\n      data: sessions,\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    return next(err);\n  }\n});\n\n/**\n * 创建新会话\n * POST /api/chat-sessions\n * Body: { agentId: string, title?: string, context?: object, settings?: object }\n */\nrouter.post('/', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      return res.status(401).json({\n        code: 'UNAUTHORIZED',\n        message: 'User not authenticated',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const { agentId, title, context, settings } = req.body;\n\n    if (!agentId) {\n      return res.status(400).json({\n        code: 'MISSING_AGENT_ID',\n        message: 'Agent ID is required',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const params: CreateSessionParams = {\n      userId,\n      agentId,\n      title,\n      context,\n      settings,\n    };\n\n    const session = await chatSessionService.createSession(params);\n\n    return res.status(201).json({\n      code: 'CREATED',\n      data: session,\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    return next(err);\n  }\n});\n\n/**\n * 获取单个会话详情\n * GET /api/chat-sessions/:id\n */\nrouter.get('/:id', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      return res.status(401).json({\n        code: 'UNAUTHORIZED',\n        message: 'User not authenticated',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const sessionId = req.params.id;\n    if (!sessionId) {\n      return res.status(400).json({ code: 'BAD_REQUEST', message: 'Session ID required' });\n    }\n    const session = await chatSessionService.getSession(sessionId, userId);\n\n    if (!session) {\n      return res.status(404).json({\n        code: 'SESSION_NOT_FOUND',\n        message: 'Session not found',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    return res.json({\n      code: 'OK',\n      data: session,\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    return next(err);\n  }\n});\n\n/**\n * 更新会话标题\n * PATCH /api/chat-sessions/:id/title\n * Body: { title: string }\n */\nrouter.patch('/:id/title', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      return res.status(401).json({\n        code: 'UNAUTHORIZED',\n        message: 'User not authenticated',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const sessionId = req.params.id;\n    if (!sessionId) {\n      return res.status(400).json({ code: 'BAD_REQUEST', message: 'Session ID required' });\n    }\n    const { title } = req.body;\n\n    if (!title) {\n      return res.status(400).json({\n        code: 'MISSING_TITLE',\n        message: 'Title is required',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    await chatSessionService.updateSessionTitle(sessionId, userId, title);\n\n    return res.json({\n      code: 'OK',\n      data: { sessionId, title, updated: true },\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    return next(err);\n  }\n});\n\n/**\n * 删除会话（软删除）\n * DELETE /api/chat-sessions/:id\n */\nrouter.delete('/:id', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      return res.status(401).json({\n        code: 'UNAUTHORIZED',\n        message: 'User not authenticated',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const sessionId = req.params.id;\n    if (!sessionId) {\n      return res.status(400).json({ code: 'BAD_REQUEST', message: 'Session ID required' });\n    }\n    await chatSessionService.deleteSession(sessionId, userId);\n\n    return res.json({\n      code: 'OK',\n      data: { sessionId, deleted: true },\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    return next(err);\n  }\n});\n\n/**\n * 归档会话\n * POST /api/chat-sessions/:id/archive\n */\nrouter.post('/:id/archive', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      return res.status(401).json({\n        code: 'UNAUTHORIZED',\n        message: 'User not authenticated',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const sessionId = req.params.id;\n    if (!sessionId) {\n      return res.status(400).json({ code: 'BAD_REQUEST', message: 'Session ID required' });\n    }\n    await chatSessionService.archiveSession(sessionId, userId);\n\n    return res.json({\n      code: 'OK',\n      data: { sessionId, archived: true },\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    return next(err);\n  }\n});\n\n/**\n * 搜索会话\n * GET /api/chat-sessions/search?q=keyword&limit=20\n */\nrouter.get('/search', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      return res.status(401).json({\n        code: 'UNAUTHORIZED',\n        message: 'User not authenticated',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const query = req.query.q as string;\n    const limit = parseInt(req.query.limit as string) || 20;\n\n    if (!query) {\n      return res.status(400).json({\n        code: 'MISSING_QUERY',\n        message: 'Search query is required',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const sessions = await chatSessionService.searchSessions(userId, query, limit);\n\n    return res.json({\n      code: 'OK',\n      data: sessions,\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    return next(err);\n  }\n});\n\n/**\n * 获取会话统计\n * GET /api/chat-sessions/stats\n */\nrouter.get('/stats', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = (req as any).user?.id;\n    if (!userId) {\n      return res.status(401).json({\n        code: 'UNAUTHORIZED',\n        message: 'User not authenticated',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const stats = await chatSessionService.getSessionStats(userId);\n\n    return res.json({\n      code: 'OK',\n      data: stats,\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    return next(err);\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/difySession.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":13,"column":30,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":13,"endColumn":68},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":16,"column":25,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":16,"endColumn":58},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":19,"column":36,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":19,"endColumn":74},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":22,"column":49,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":22,"endColumn":89},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":25,"column":46,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":25,"endColumn":82},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":28,"column":46,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":28,"endColumn":89}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router, type Router as RouterType } from 'express';\nimport { DifySessionController } from '@/controllers/DifySessionController';\n\nconst router: RouterType = Router();\n\n/**\n * Dify 会话管理路由\n *\n * 所有路由需要提供 agentId 查询参数\n */\n\n// 获取会话列表\nrouter.get('/conversations', DifySessionController.getConversations);\n\n// 获取会话消息\nrouter.get('/messages', DifySessionController.getMessages);\n\n// 获取消息详情\nrouter.get('/messages/:messageId', DifySessionController.getMessageDetail);\n\n// 删除会话\nrouter.delete('/conversations/:conversationId', DifySessionController.deleteConversation);\n\n// 提交消息反馈\nrouter.post('/messages/:messageId/feedback', DifySessionController.submitFeedback);\n\n// 获取建议问题\nrouter.get('/messages/:messageId/suggested', DifySessionController.getSuggestedQuestions);\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/health.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":22,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":22,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[485,487],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":31,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":100,"endColumn":2},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":36,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":36,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[794,796],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":37,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":37,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[857,859],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":73,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":73,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1693,1696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1693,1696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .redis on an `any` value.","line":73,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":76,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":76,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":76,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":76,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .ping on an `any` value.","line":76,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":98,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":98,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":98,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":98,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 增强的健康检查路由\n * 包含数据库和Redis状态检查\n */\n\nimport { Router, Request, Response } from 'express';\nimport { getPool } from '@/utils/db';\nimport { authService } from '@/services/authInstance';\nimport logger from '@/utils/logger';\n\nconst router: Router = Router();\n\n/**\n * 基础健康检查端点\n * GET /health\n */\nrouter.get('/', (req: Request, res: Response) => {\n  res.json({\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    environment: process.env.NODE_ENV || 'development',\n  });\n});\n\n/**\n * 详细健康检查端点\n * GET /health/detailed\n * 包含数据库和Redis连接状态\n */\nrouter.get('/detailed', async (req: Request, res: Response) => {\n  const healthStatus = {\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    environment: process.env.NODE_ENV || 'development',\n    version: process.env.npm_package_version || '1.0.0',\n    memory: process.memoryUsage(),\n    platform: process.platform,\n    nodeVersion: process.version,\n    database: {\n      status: 'unknown',\n      totalConnections: 0,\n      idleConnections: 0,\n      waitingClients: 0,\n    },\n    redis: {\n      status: 'unknown',\n      connected: false,\n    },\n  };\n\n  // 检查数据库连接\n  try {\n    const pool = getPool();\n    healthStatus.database = {\n      status: 'connected',\n      totalConnections: pool.totalCount,\n      idleConnections: pool.idleCount,\n      waitingClients: pool.waitingCount,\n    };\n\n    // 执行简单查询验证数据库可用\n    await pool.query('SELECT 1');\n  } catch (error) {\n    logger.error('Health check: Database check failed', { error });\n    healthStatus.database.status = 'error';\n    healthStatus.status = 'degraded';\n  }\n\n  // 检查Redis连接\n  try {\n    const redis = (authService as any).redis;\n    if (redis) {\n      // 检查Redis连接状态\n      const pingResult = await redis.ping();\n      healthStatus.redis = {\n        status: pingResult === 'PONG' ? 'connected' : 'error',\n        connected: pingResult === 'PONG',\n      };\n    } else {\n      healthStatus.redis = {\n        status: 'not_configured',\n        connected: false,\n      };\n    }\n  } catch (error) {\n    logger.error('Health check: Redis check failed', { error });\n    healthStatus.redis.status = 'error';\n    healthStatus.status = 'degraded';\n  }\n\n  // 根据组件状态设置总体状态\n  if (healthStatus.database.status === 'error' || healthStatus.redis.status === 'error') {\n    healthStatus.status = 'degraded';\n  }\n\n  const statusCode = healthStatus.status === 'ok' ? 200 : 503;\n  res.status(statusCode).json(healthStatus);\n});\n\nexport default router;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/metrics.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":18,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":36,"endColumn":2},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":27,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":27,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Prometheus metrics端点\n * 提供Prometheus格式的监控指标\n */\n\nimport { Router, Request, Response } from 'express';\nimport { prometheusService } from '@/services/PrometheusService';\nimport logger from '@/utils/logger';\n\nconst router: Router = Router();\n\n/**\n * Prometheus metrics端点\n * GET /metrics\n *\n * 返回Prometheus格式的监控指标\n */\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    // 获取metrics数据\n    const metrics = await prometheusService.getMetrics();\n\n    // 设置正确的Content-Type\n    res.set('Content-Type', prometheusService.getContentType());\n\n    // 返回metrics\n    res.status(200).send(metrics);\n  } catch (error) {\n    logger.error('Failed to get Prometheus metrics', { error });\n    res.status(500).json({\n      code: 'METRICS_ERROR',\n      message: '获取监控指标失败',\n      timestamp: new Date().toISOString(),\n    });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/productPreview.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":7,"column":26,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":7,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router, type Router as RouterType } from 'express';\nimport { ProductPreviewController } from '@/controllers/ProductPreviewController';\n\nconst router: RouterType = Router();\nconst controller = new ProductPreviewController();\n\nrouter.post('/generate', controller.generatePreview);\n\n/**\n * GET /api/product-preview/status\n * 获取产品预览服务状态\n */\nrouter.get('/status', (req, res) => {\n  res.json({\n    code: 200,\n    message: 'success',\n    data: {\n      service: 'product-preview',\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n    },\n  });\n});\n\nexport const productPreviewRoutes: RouterType = router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/sessionRoutes.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":26,"column":34,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":26,"endColumn":72},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":29,"column":32,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":29,"endColumn":64},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":32,"column":33,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":32,"endColumn":65},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":35,"column":31,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":35,"endColumn":64},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":38,"column":32,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":38,"endColumn":61},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":41,"column":36,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":41,"endColumn":70},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":44,"column":39,"nodeType":"MemberExpression","messageId":"voidReturnArgument","endLine":44,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router, type Router as RouterType } from 'express';\nimport { SessionController } from '@/controllers/SessionController';\n\nconst router: RouterType = Router();\nconst sessionController = new SessionController();\n\n/**\n * 会话管理路由\n * 基础路径: /api/sessions\n */\n\n// 获取会话列表（基础版）\nrouter.get('/', (req, res) => {\n  res.json({\n    code: 200,\n    message: 'success',\n    data: {\n      sessions: [],\n      total: 0,\n      message: 'Please specify agentId to get sessions',\n    },\n  });\n});\n\n// 增强版会话列表 - 支持分页、过滤、排序\nrouter.get('/:agentId/enhanced', sessionController.listSessionsEnhanced);\n\n// 批量操作会话\nrouter.post('/:agentId/batch', sessionController.batchOperation);\n\n// 导出会话数据\nrouter.post('/:agentId/export', sessionController.exportSessions);\n\n// 获取会话统计信息\nrouter.get('/:agentId/stats', sessionController.getSessionStats);\n\n// 查询会话事件\nrouter.get('/:agentId/events', sessionController.queryEvents);\n\n// 获取会话详情（增强版）\nrouter.get('/:agentId/:sessionId', sessionController.getSessionDetail);\n\n// 删除单个会话\nrouter.delete('/:agentId/:sessionId', sessionController.deleteSession);\n\nexport default router;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/routes/upload.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":28,"column":24,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":28,"endColumn":41},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":28,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":70,"endColumn":2},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async arrow function has no 'await' expression.","line":28,"column":113,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":28,"endColumn":115},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":31,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":31,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":38,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":38,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1051,1054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1051,1054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":38,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":45,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":45,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":57,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":57,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":60,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":60,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1680,1683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1680,1683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":60,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":66,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":66,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1865,1868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1865,1868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":66,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":32},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":79,"column":26,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":79,"endColumn":43},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":79,"column":61,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":124,"endColumn":2},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async arrow function has no 'await' expression.","line":79,"column":117,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":79,"endColumn":119},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":82,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":82,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":90,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":90,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2524,2527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2524,2527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":90,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":95,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":95,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":111,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":111,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":114,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3242,3245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3242,3245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":114,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":120,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":120,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3437,3440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3437,3440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":120,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":32},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":130,"column":31,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":130,"endColumn":48},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":130,"column":50,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":181,"endColumn":2},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async arrow function has no 'await' expression.","line":130,"column":106,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":130,"endColumn":108},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":134,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":134,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":141,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":141,"endColumn":28},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'existsSync'.","line":149,"column":10,"nodeType":"MemberExpression","messageId":"noSync","endLine":149,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":150,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":150,"endColumn":28},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'statSync'.","line":158,"column":19,"nodeType":"MemberExpression","messageId":"noSync","endLine":158,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":171,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":171,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4727,4730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4727,4730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":171,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":187,"column":29,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":187,"endColumn":46},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":187,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":243,"endColumn":2},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async arrow function has no 'await' expression.","line":187,"column":104,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":187,"endColumn":106},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":191,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":191,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":194,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":194,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5369,5372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5369,5372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":194,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":199,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":199,"endColumn":28},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'existsSync'.","line":207,"column":10,"nodeType":"MemberExpression","messageId":"noSync","endLine":207,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":208,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":208,"endColumn":28},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'unlinkSync'.","line":216,"column":5,"nodeType":"MemberExpression","messageId":"noSync","endLine":216,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":220,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":220,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":229,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":229,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":232,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":232,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6257,6260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6257,6260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":232,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":232,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":239,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":239,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6482,6485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6482,6485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":239,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":32},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":249,"column":21,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":249,"endColumn":38},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":249,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":283,"endColumn":2},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async arrow function has no 'await' expression.","line":249,"column":96,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":249,"endColumn":98},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'readdirSync'.","line":251,"column":19,"nodeType":"MemberExpression","messageId":"noSync","endLine":251,"endColumn":33},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'statSync'.","line":254,"column":21,"nodeType":"MemberExpression","messageId":"noSync","endLine":254,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":274,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":274,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":274,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7372,7375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7372,7375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestId on an `any` value.","line":274,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":274,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":68,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 文件上传API路由\n * 提供安全的文件上传功能\n *\n * 端点：\n * - POST /api/upload/single - 单文件上传\n * - POST /api/upload/multiple - 多文件上传\n * - DELETE /api/upload/:filename - 删除文件\n * - GET /api/upload/:filename/info - 获取文件信息\n */\n\nimport express, { type Request, type Response, type NextFunction } from 'express';\nimport path from 'path';\nimport fs from 'fs';\nimport { uploadSingle, uploadMultiple, uploadDir } from '@/middleware/fileUpload';\nimport { authenticateJWT } from '@/middleware/jwtAuth';\nimport logger from '@/utils/logger';\n\nconst router: express.Router = express.Router();\n\n/**\n * 单文件上传\n * POST /api/upload/single\n *\n * 请求：multipart/form-data，字段名：file\n * 响应：{ code, data: { filename, originalName, size, mimetype, path } }\n */\nrouter.post('/single', authenticateJWT(), uploadSingle, async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({\n        code: 'NO_FILE',\n        message: 'No file uploaded',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const userId = (req as any).user?.id;\n\n    logger.info('File uploaded successfully', {\n      filename: req.file.filename,\n      originalName: req.file.originalname,\n      size: req.file.size,\n      mimetype: req.file.mimetype,\n      userId,\n    });\n\n    return res.json({\n      code: 'OK',\n      message: 'File uploaded successfully',\n      data: {\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        size: req.file.size,\n        mimetype: req.file.mimetype,\n        path: `/uploads/${req.file.filename}`,\n        uploadedBy: userId,\n        uploadedAt: new Date().toISOString(),\n      },\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    logger.error('File upload failed', {\n      error: (err as Error).message,\n      userId: (req as any).user?.id,\n    });\n    return next(err);\n  }\n});\n\n/**\n * 多文件上传\n * POST /api/upload/multiple\n *\n * 请求：multipart/form-data，字段名：files\n * 响应：{ code, data: [{ filename, originalName, size, mimetype, path }] }\n */\nrouter.post('/multiple', authenticateJWT(), uploadMultiple, async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    if (!req.files || (req.files as Express.Multer.File[]).length === 0) {\n      return res.status(400).json({\n        code: 'NO_FILES',\n        message: 'No files uploaded',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    const files = req.files as Express.Multer.File[];\n    const userId = (req as any).user?.id;\n\n    logger.info('Multiple files uploaded successfully', {\n      count: files.length,\n      totalSize: files.reduce((sum, f) => sum + f.size, 0),\n      userId,\n    });\n\n    return res.json({\n      code: 'OK',\n      message: `${files.length} files uploaded successfully`,\n      data: files.map(file => ({\n        filename: file.filename,\n        originalName: file.originalname,\n        size: file.size,\n        mimetype: file.mimetype,\n        path: `/uploads/${file.filename}`,\n      })),\n      meta: {\n        count: files.length,\n        totalSize: files.reduce((sum, f) => sum + f.size, 0),\n        uploadedBy: userId,\n        uploadedAt: new Date().toISOString(),\n      },\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    logger.error('Multiple files upload failed', {\n      error: (err as Error).message,\n      userId: (req as any).user?.id,\n    });\n    return next(err);\n  }\n});\n\n/**\n * 获取文件信息\n * GET /api/upload/:filename/info\n */\nrouter.get('/:filename/info', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { filename } = req.params;\n    if (!filename) {\n      return res.status(400).json({ code: 'BAD_REQUEST', message: 'Filename required' });\n    }\n    const filePath = path.join(uploadDir, filename);\n\n    // 安全检查：防止路径遍历攻击\n    const normalizedPath = path.normalize(filePath);\n    if (!normalizedPath.startsWith(uploadDir)) {\n      return res.status(403).json({\n        code: 'FORBIDDEN',\n        message: 'Access denied',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // 检查文件是否存在\n    if (!fs.existsSync(filePath)) {\n      return res.status(404).json({\n        code: 'FILE_NOT_FOUND',\n        message: 'File not found',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // 获取文件信息\n    const stats = fs.statSync(filePath);\n    const ext = path.extname(filename);\n\n    return res.json({\n      code: 'OK',\n      data: {\n        filename,\n        size: stats.size,\n        extension: ext,\n        createdAt: stats.birthtime,\n        modifiedAt: stats.mtime,\n        path: `/uploads/${filename}`,\n      },\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    logger.error('Failed to get file info', {\n      error: (err as Error).message,\n      filename: req.params.filename,\n    });\n    return next(err);\n  }\n});\n\n/**\n * 删除文件\n * DELETE /api/upload/:filename\n */\nrouter.delete('/:filename', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { filename } = req.params;\n    if (!filename) {\n      return res.status(400).json({ code: 'BAD_REQUEST', message: 'Filename required' });\n    }\n    const filePath = path.join(uploadDir, filename);\n    const userId = (req as any).user?.id;\n\n    // 安全检查：防止路径遍历攻击\n    const normalizedPath = path.normalize(filePath);\n    if (!normalizedPath.startsWith(uploadDir)) {\n      return res.status(403).json({\n        code: 'FORBIDDEN',\n        message: 'Access denied',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // 检查文件是否存在\n    if (!fs.existsSync(filePath)) {\n      return res.status(404).json({\n        code: 'FILE_NOT_FOUND',\n        message: 'File not found',\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // 删除文件\n    fs.unlinkSync(filePath);\n\n    logger.info('File deleted successfully', {\n      filename,\n      userId,\n    });\n\n    return res.json({\n      code: 'OK',\n      message: 'File deleted successfully',\n      data: {\n        filename,\n        deleted: true,\n        deletedBy: userId,\n        deletedAt: new Date().toISOString(),\n      },\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    logger.error('Failed to delete file', {\n      error: (err as Error).message,\n      filename: req.params.filename,\n      userId: (req as any).user?.id,\n    });\n    return next(err);\n  }\n});\n\n/**\n * 列出所有上传的文件\n * GET /api/upload/list\n */\nrouter.get('/list', authenticateJWT(), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const files = fs.readdirSync(uploadDir);\n    const fileInfos = files.map(filename => {\n      const filePath = path.join(uploadDir, filename);\n      const stats = fs.statSync(filePath);\n      return {\n        filename,\n        size: stats.size,\n        extension: path.extname(filename),\n        createdAt: stats.birthtime,\n        modifiedAt: stats.mtime,\n      };\n    });\n\n    // 按创建时间倒序排序\n    fileInfos.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    return res.json({\n      code: 'OK',\n      data: fileInfos,\n      meta: {\n        total: fileInfos.length,\n        totalSize: fileInfos.reduce((sum, f) => sum + f.size, 0),\n      },\n      requestId: (req as any).requestId,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (err) {\n    logger.error('Failed to list files', {\n      error: (err as Error).message,\n    });\n    return next(err);\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/scripts/migrate.ts","messages":[{"ruleId":null,"fatal":false,"severity":1,"message":"File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override.","nodeType":null}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/scripts/validate-env.ts","messages":[{"ruleId":null,"fatal":false,"severity":1,"message":"File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override.","nodeType":null}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/AgentConfigService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":130,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":130,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3528,3530],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":230,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":230,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5774,5776],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":283,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":283,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7462,7464],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":320,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":320,"endColumn":68},{"ruleId":"complexity","severity":1,"message":"Async method 'loadAgentsFromFileOnly' has a complexity of 27. Maximum allowed is 18.","line":374,"column":39,"nodeType":"FunctionExpression","messageId":"complex","endLine":470,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":378,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":378,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":379,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":379,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agents on an `any` value.","line":379,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":379,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agents on an `any` value.","line":379,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":379,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":383,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10435,10438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10435,10438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":401,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":401,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11024,11026],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":437,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":437,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12130,12133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12130,12133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestsPerMinute on an `any` value.","line":437,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":437,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":440,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12245,12248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12245,12248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tokensPerMinute on an `any` value.","line":440,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":440,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":554,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":554,"endColumn":77},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":554,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":554,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15803,15806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15803,15806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .requestsPerMinute on an `any` value.","line":554,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":554,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":555,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":555,"endColumn":73},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":555,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":555,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15879,15882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15879,15882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tokensPerMinute on an `any` value.","line":555,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":555,"endColumn":67},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":609,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":609,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[17587,17589],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":662,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":662,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[19432,19434],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":684,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":684,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":685,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":687,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agents on an `any` value.","line":685,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":685,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agents on an `any` value.","line":686,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":686,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":793,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":793,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":794,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":794,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agents on an `any` value.","line":794,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":794,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agents on an `any` value.","line":794,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":794,"endColumn":66},{"ruleId":"complexity","severity":1,"message":"Method 'validateAgentConfig' has a complexity of 19. Maximum allowed is 18.","line":1067,"column":30,"nodeType":"FunctionExpression","messageId":"complex","endLine":1157,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1083,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1083,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1083,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1083,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31047,31050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31047,31050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [field] on an `any` value.","line":1084,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1084,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":1093,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1093,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1093,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1093,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31282,31285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31282,31285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [field] on an `any` value.","line":1097,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1097,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [field] on an `any` value.","line":1098,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1098,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [field] on an `any` value.","line":1099,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1099,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [field] on an `any` value.","line":1104,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1104,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs/promises';\nimport path from 'path';\nimport type { AgentConfig, Agent, AgentStatus, AgentHealthStatus, JsonValue } from '@/types';\nimport { withClient } from '@/utils/db';\nimport { generateId } from '@/utils/helpers';\nimport {\n  deepReplaceEnvVariables,\n  containsUnresolvedPlaceholders,\n} from '@/utils/envHelper';\nimport logger from '@/utils/logger';\nimport { ResourceError, ValidationError, createErrorFromUnknown } from '@/types/errors';\n\ninterface AgentSeed {\n  id: string;\n  name: string;\n  description: string;\n  endpoint: string;\n  apiKey: string;\n  model: string;\n  provider: AgentConfig['provider'];\n  capabilities?: string[];\n  isActive?: boolean;\n  features?: Partial<AgentConfig['features']>;\n}\n\ninterface AgentDbRow {\n  id: string;\n  name: string;\n  description: string | null;\n  provider: AgentConfig['provider'];\n  endpoint: string;\n  api_key: string;\n  app_id: string | null;\n  model: string;\n  max_tokens: number | null;\n  temperature: number | null;\n  system_prompt: string | null;\n  capabilities: JsonValue | null;      // 明确JSON类型，替代any\n  rate_limit: JsonValue | null;         // 配置结构，替代any\n  features: JsonValue | null;           // 特性配置，替代any\n  metadata: JsonValue | null;           // 元数据，替代any\n  is_active: boolean;\n  created_at: Date | string;\n  updated_at: Date | string;\n}\n\nexport interface AgentMutationInput {\n  id?: string;\n  name: string;\n  description?: string;\n  provider: AgentConfig['provider'];\n  endpoint: string;\n  apiKey: string;\n  appId?: string;\n  model: string;\n  maxTokens?: number;\n  temperature?: number;\n  systemPrompt?: string;\n  capabilities?: string[];\n  rateLimit?: AgentConfig['rateLimit'];\n  features?: AgentConfig['features'];\n  isActive?: boolean;\n}\n\n/**\n * 智能体配置服务\n * 负责加载、管理和验证智能体配置\n */\nexport class AgentConfigService {\n  private readonly configPath: string;\n  private agents: Map<string, AgentConfig> = new Map();\n  private lastLoadTime = 0;\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5分钟缓存\n  private loadingPromise: Promise<AgentConfig[]> | null = null;\n  private snapshotWriting = false;\n  private readonly builtinSeeds: AgentSeed[] = [\n    {\n      id: 'product-scene-preview',\n      name: '产品现场预览 (示例)',\n      description: '演示用智能体，请在后台完成正式配置并更新端点/密钥。',\n      endpoint: 'https://example.com/agents/product-preview',\n      apiKey: 'demo-api-key',\n      model: 'demo-product-model',\n      provider: 'custom',\n      capabilities: ['scene-preview', 'image-compose'],\n      isActive: false,\n    },\n    {\n      id: 'voice-conversation-assistant',\n      name: '语音通话助手 (示例)',\n      description: '演示用智能体，需替换为真实语音模型的访问配置。',\n      endpoint: 'https://example.com/agents/voice-call',\n      apiKey: 'demo-api-key',\n      model: 'demo-voice-model',\n      provider: 'custom',\n      capabilities: ['speech-to-text', 'text-to-speech'],\n      isActive: false,\n      features: {\n        supportsStream: true,\n        supportsDetail: true,\n        streamingConfig: {\n          enabled: true,\n          endpoint: 'same' as const,\n          statusEvents: true,\n          flowNodeStatus: false,\n        },\n      },\n    },\n  ];\n\n  constructor(configPath?: string) {\n    this.configPath =\n      configPath ??\n      process.env.AGENTS_CONFIG_PATH ??\n      path.join(__dirname, '../../../config/agents.json');\n  }\n\n  /**\n   * 加载智能体配置\n   */\n  async loadAgents(): Promise<AgentConfig[]> {\n    return this.ensureCache();\n  }\n\n  /**\n   * 获取特定智能体配置\n   */\n  async getAgent(id: string): Promise<AgentConfig | null> {\n    await this.ensureCache();\n    return this.agents.get(id) || null;\n  }\n\n  /**\n   * 获取可用的智能体列表（简化版本，用于前端显示）\n   */\n  async getAvailableAgents(): Promise<Agent[]> {\n    const configs = await this.ensureCache();\n\n    return configs\n      .filter((config) => config.isActive)\n      .map((config) => this.transformToAgent(config));\n  }\n\n  /**\n   * 获取所有智能体（包括不可用的）\n   */\n  async getAllAgents(): Promise<Agent[]> {\n    const configs = await this.ensureCache();\n\n    return configs.map((config) => this.transformToAgent(config));\n  }\n\n  /**\n   * 检查智能体健康状态\n   */\n  async checkAgentHealth(id: string): Promise<AgentHealthStatus> {\n    const config = await this.getAgent(id);\n    if (!config) {\n      return {\n        agentId: id,\n        status: 'error',\n        lastChecked: new Date().toISOString(),\n        error: '智能体不存在',\n      };\n    }\n\n    const startTime = Date.now();\n    let status: AgentStatus = 'inactive';\n    let error: string | undefined;\n\n    try {\n      // 这里可以实现具体的健康检查逻辑\n      // 例如发送一个简单的请求到智能体端点\n      if (config.isActive) {\n        status = 'active';\n      }\n    } catch (err) {\n      status = 'error';\n      error = err instanceof Error ? err.message : '健康检查失败';\n    }\n\n    const result: AgentHealthStatus = {\n      agentId: id,\n      status,\n      responseTime: Date.now() - startTime,\n      lastChecked: new Date().toISOString(),\n    };\n\n    if (error) {\n      result.error = error;\n    }\n\n    return result;\n  }\n\n  /**\n   * 更新智能体配置\n   */\n  async updateAgent(id: string, updates: Partial<AgentConfig>): Promise<void> {\n    await this.ensureCache();\n    const config = await this.getAgent(id);\n    if (!config) {\n      throw new ResourceError({\n        message: `智能体不存在: ${id}`,\n        code: 'AGENT_NOT_FOUND',\n        resourceType: 'agent',\n        resourceId: id,\n      });\n    }\n\n    const updatedConfig: AgentConfig = {\n      ...config,\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    };\n\n    if (!this.validateAgentConfig(updatedConfig, id)) {\n      throw new ValidationError({\n        message: '更新后的配置验证失败',\n        code: 'INVALID_AGENT_CONFIG',\n        field: 'agentConfig',\n      });\n    }\n\n    await this.persistAgent(updatedConfig);\n  }\n\n  async createAgent(input: AgentMutationInput): Promise<AgentConfig> {\n    await this.ensureCache();\n    const id = input.id || generateId().replace(/-/g, '');\n    const now = new Date().toISOString();\n    const baseFeatures = this.ensureFeatureDefaults(input.features);\n\n    const config: AgentConfig = {\n      id,\n      name: input.name,\n      description: input.description ?? '',\n      endpoint: input.endpoint,\n      apiKey: input.apiKey,\n      model: input.model,\n      capabilities: input.capabilities ?? [],\n      provider: input.provider,\n      isActive: input.isActive ?? true,\n      features: baseFeatures,\n      createdAt: now,\n      updatedAt: now,\n      ...(input.appId ? { appId: input.appId } : {}),\n      ...(input.maxTokens !== undefined ? { maxTokens: input.maxTokens } : {}),\n      ...(input.temperature !== undefined\n        ? { temperature: input.temperature }\n        : {}),\n      ...(input.systemPrompt !== undefined\n        ? { systemPrompt: input.systemPrompt }\n        : {}),\n      ...(input.rateLimit ? { rateLimit: input.rateLimit } : {}),\n    };\n\n    if (!this.validateAgentConfig(config)) {\n      throw new ValidationError({\n        message: '智能体配置验证失败',\n        code: 'INVALID_AGENT_CONFIG',\n        field: 'agentConfig',\n      });\n    }\n\n    await this.insertAgent(config);\n    return config;\n  }\n\n  async deleteAgent(id: string): Promise<void> {\n    await this.ensureCache();\n    await withClient(async (client) => {\n      await client.query('DELETE FROM agent_configs WHERE id = $1', [id]);\n    });\n    this.agents.delete(id);\n    await this.writeSnapshotToFile();\n  }\n\n  async importAgents(inputs: AgentMutationInput[]): Promise<AgentConfig[]> {\n    const results: AgentConfig[] = [];\n    for (const input of inputs) {\n      await this.ensureCache();\n      const id = input.id || generateId().replace(/-/g, '');\n      const existed = await this.getAgent(id);\n      if (existed) {\n        await this.updateAgent(id, input as Partial<AgentConfig>);\n        const latest = await this.getAgent(id);\n        if (latest) {\n          results.push(latest);\n        }\n      } else {\n        const created = await this.createAgent({ ...input, id });\n        results.push(created);\n      }\n    }\n    return results;\n  }\n\n  async reloadAgents(): Promise<AgentConfig[]> {\n    this.agents.clear();\n    this.lastLoadTime = 0;\n    return this.ensureCache(true);\n  }\n\n  private async ensureCache(force = false): Promise<AgentConfig[]> {\n    const now = Date.now();\n    if (\n      !force &&\n      this.agents.size > 0 &&\n      now - this.lastLoadTime < this.CACHE_TTL\n    ) {\n      return Array.from(this.agents.values());\n    }\n\n    if (!this.loadingPromise) {\n      this.loadingPromise = this.loadAgentsFromDb()\n        .catch(async (error) => {\n          if (this.isTransientDbError(error)) {\n            logger.warn('[AgentConfigService] 数据库不可用，回退到文件加载', {\n              error: error instanceof Error ? error.message : error,\n            });\n            return this.loadAgentsFromFileOnly();\n          }\n\n          this.agents.clear();\n          this.lastLoadTime = 0;\n          throw error;\n        })\n        .finally(() => {\n          this.loadingPromise = null;\n        });\n    }\n\n    return this.loadingPromise;\n  }\n\n  private isTransientDbError(error: unknown): boolean {\n    if (!error) {\n      return false;\n    }\n    const message = error instanceof Error ? error.message : String(error);\n    return [\n      'DB_NOT_INITIALIZED',\n      'DATABASE_CONFIG_MISSING',\n      'ECONNREFUSED',\n      'ENOTFOUND',\n      'timeout',\n    ].some((token) => message.includes(token));\n  }\n\n  private async loadAgentsFromDb(): Promise<AgentConfig[]> {\n    const rows = await withClient(async (client) => {\n      const result = await client.query<AgentDbRow>(\n        'SELECT * FROM agent_configs ORDER BY created_at ASC',\n      );\n      return result.rows;\n    });\n\n    if (!rows || rows.length === 0) {\n      // 如果数据库为空，尝试从文件加载后写入数据库\n      await this.backfillFromFile();\n      const retryRows = await withClient(async (client) => {\n        const result = await client.query<AgentDbRow>(\n          'SELECT * FROM agent_configs ORDER BY created_at ASC',\n        );\n        return result.rows;\n      });\n      return this.applyCacheFromRows(retryRows);\n    }\n\n    return this.applyCacheFromRows(rows);\n  }\n\n  private async loadAgentsFromFileOnly(): Promise<AgentConfig[]> {\n    try {\n      const raw = await fs.readFile(this.configPath, 'utf-8');\n      const sanitized = this.sanitizeNumericPlaceholders(raw);\n      const parsed = JSON.parse(sanitized);\n      const list = Array.isArray(parsed?.agents) ? parsed.agents : [];\n\n      // 对于示例智能体使用静默模式，不记录环境变量警告\n      const replaced = deepReplaceEnvVariables(list, true) as Array<\n        Partial<AgentConfig> & Record<string, any>\n      >;\n\n      const map = new Map<string, AgentConfig>();\n      const fallbackTimestamp = new Date().toISOString();\n\n      for (const item of replaced) {\n        if (!item) {\n          continue;\n        }\n\n        const config: AgentConfig = {\n          id: String(item.id ?? ''),\n          name: String(item.name ?? ''),\n          description: String(item.description ?? ''),\n          endpoint: String(item.endpoint ?? ''),\n          apiKey: String(item.apiKey ?? ''),\n          provider: (item.provider as AgentConfig['provider']) || 'custom',\n          model: String(item.model || 'unknown-model'),\n          capabilities: Array.isArray(item.capabilities)\n            ? item.capabilities\n            : [],\n          isActive: item.isActive ?? true,\n          features: this.ensureFeatureDefaults(\n            item.features,\n          ),\n          createdAt: item.createdAt\n            ? String(item.createdAt)\n            : fallbackTimestamp,\n          updatedAt: item.updatedAt\n            ? String(item.updatedAt)\n            : fallbackTimestamp,\n        };\n\n        const appId = item.appId ? String(item.appId) : undefined;\n        if (appId) {\n          config.appId = appId;\n        }\n\n        if (typeof item.maxTokens === 'number') {\n          config.maxTokens = item.maxTokens;\n        }\n\n        if (typeof item.temperature === 'number') {\n          config.temperature = item.temperature;\n        }\n\n        if (item.systemPrompt) {\n          config.systemPrompt = String(item.systemPrompt);\n        }\n\n        if (item.rateLimit && typeof item.rateLimit === 'object') {\n          config.rateLimit = {\n            requestsPerMinute: Number(\n              (item.rateLimit as any).requestsPerMinute ?? '',\n            ),\n            tokensPerMinute: Number(\n              (item.rateLimit as any).tokensPerMinute ?? '',\n            ),\n          };\n        }\n\n        if (!this.validateAgentConfig(config, undefined, map)) {\n          continue;\n        }\n\n        map.set(config.id, config);\n      }\n\n      if (map.size === 0) {\n        logger.warn(\n          '[AgentConfigService] 未能从配置文件加载有效的智能体，使用内置示例配置',\n        );\n        return this.loadDefaultAgentsInMemory();\n      }\n\n      this.agents = map;\n      this.lastLoadTime = Date.now();\n      return Array.from(map.values());\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentConfigService',\n        operation: 'loadAgentsFromFile',\n      });\n      logger.warn('[AgentConfigService] 读取配置文件失败，使用内置示例配置', error.toLogObject());\n      return this.loadDefaultAgentsInMemory();\n    }\n  }\n\n  private sanitizeNumericPlaceholders(source: string): string {\n    return source.replace(/:\\s*\\$\\{[^}]+\\}/g, ': 0');\n  }\n\n  private applyCacheFromRows(rows: AgentDbRow[]): AgentConfig[] {\n    this.agents.clear();\n\n    // 确保 rows 是一个数组\n    if (!Array.isArray(rows)) {\n      logger.warn('applyCacheFromRows received non-array data', { rows });\n      return [];\n    }\n\n    const configs = rows.map((row) => this.mapRowToConfig(row));\n    configs.forEach((cfg) => this.agents.set(cfg.id, cfg));\n    this.lastLoadTime = Date.now();\n    return configs;\n  }\n\n  private loadDefaultAgentsInMemory(): AgentConfig[] {\n    const now = new Date().toISOString();\n    const map = new Map<string, AgentConfig>();\n\n    for (const seed of this.builtinSeeds) {\n      const config: AgentConfig = {\n        id: seed.id,\n        name: seed.name,\n        description: seed.description,\n        endpoint: seed.endpoint,\n        apiKey: seed.apiKey,\n        provider: seed.provider,\n        model: seed.model,\n        capabilities: seed.capabilities ?? [],\n        isActive: seed.isActive ?? false,\n        features: this.ensureFeatureDefaults(\n          seed.features as AgentConfig['features'] | undefined,\n        ),\n        createdAt: now,\n        updatedAt: now,\n      };\n\n      if (!this.validateAgentConfig(config, undefined, map)) {\n        continue;\n      }\n\n      map.set(config.id, config);\n    }\n\n    this.agents = map;\n    this.lastLoadTime = Date.now();\n    return Array.from(map.values());\n  }\n\n  private mapRowToConfig(row: AgentDbRow): AgentConfig {\n    const features = this.ensureFeatureDefaults(\n      typeof row.features === 'object' && row.features !== null ? row.features as AgentConfig['features'] : undefined,\n    );\n    return {\n      id: row.id,\n      name: row.name,\n      description: row.description ?? '',\n      endpoint: row.endpoint,\n      apiKey: row.api_key,\n      model: row.model,\n      capabilities: Array.isArray(row.capabilities) ? row.capabilities as string[] : [],\n      provider: row.provider,\n      isActive: row.is_active,\n      features,\n      createdAt: new Date(row.created_at).toISOString(),\n      updatedAt: new Date(row.updated_at).toISOString(),\n      ...(row.app_id ? { appId: row.app_id } : {}),\n      ...(row.max_tokens !== null && row.max_tokens !== undefined\n        ? { maxTokens: row.max_tokens }\n        : {}),\n      ...(row.temperature !== null && row.temperature !== undefined\n        ? { temperature: row.temperature }\n        : {}),\n      ...(row.system_prompt !== null && row.system_prompt !== undefined\n        ? { systemPrompt: row.system_prompt }\n        : {}),\n      ...(row.rate_limit && typeof row.rate_limit === 'object' ? {\n        rateLimit: {\n          requestsPerMinute: (row.rate_limit as any).requestsPerMinute ?? '',\n          tokensPerMinute: (row.rate_limit as any).tokensPerMinute ?? '',\n        },\n      } : {}),\n    };\n  }\n\n  private ensureFeatureDefaults(\n    features: AgentConfig['features'] | undefined,\n  ): AgentConfig['features'] {\n    const streamingConfig = (features?.streamingConfig ?? {}) as Partial<\n      AgentConfig['features']['streamingConfig']\n    >;\n    return {\n      supportsChatId: features?.supportsChatId ?? true,\n      supportsStream: features?.supportsStream ?? true,\n      supportsDetail: features?.supportsDetail ?? true,\n      supportsFiles: features?.supportsFiles ?? true,\n      supportsImages: features?.supportsImages ?? false,\n      streamingConfig: {\n        enabled: streamingConfig?.enabled ?? true,\n        endpoint: streamingConfig?.endpoint ?? 'same',\n        statusEvents: streamingConfig?.statusEvents ?? true,\n        flowNodeStatus: streamingConfig?.flowNodeStatus ?? true,\n      },\n    };\n  }\n\n  private async persistAgent(config: AgentConfig): Promise<void> {\n    await withClient(async (client) => {\n      await client.query(\n        `UPDATE agent_configs SET\n          name = $1,\n          description = $2,\n          provider = $3,\n          endpoint = $4,\n          api_key = $5,\n          app_id = $6,\n          model = $7,\n          max_tokens = $8,\n          temperature = $9,\n          system_prompt = $10,\n          capabilities = $11::jsonb,\n          rate_limit = $12::jsonb,\n          features = $13::jsonb,\n          metadata = COALESCE(metadata, '{}'::jsonb),\n          is_active = $14,\n          updated_at = NOW()\n        WHERE id = $15`,\n        [\n          config.name,\n          config.description,\n          config.provider,\n          config.endpoint,\n          config.apiKey,\n          config.appId || null,\n          config.model,\n          config.maxTokens ?? null,\n          config.temperature ?? null,\n          config.systemPrompt ?? null,\n          JSON.stringify(config.capabilities ?? []),\n          JSON.stringify(config.rateLimit ?? null),\n          JSON.stringify(config.features ?? null),\n          config.isActive,\n          config.id,\n        ],\n      );\n    });\n    this.agents.set(config.id, config);\n    await this.writeSnapshotToFile();\n  }\n\n  private async insertAgent(config: AgentConfig): Promise<void> {\n    await withClient(async (client) => {\n      await client.query(\n        `INSERT INTO agent_configs (\n          id, name, description, provider, endpoint, api_key, app_id,\n          model, max_tokens, temperature, system_prompt, capabilities,\n          rate_limit, features, metadata, is_active\n        ) VALUES (\n          $1,$2,$3,$4,$5,$6,$7,\n          $8,$9,$10,$11,$12::jsonb,\n          $13::jsonb,$14::jsonb,$15::jsonb,$16\n        )\n        ON CONFLICT (id) DO UPDATE SET\n          name = EXCLUDED.name,\n          description = EXCLUDED.description,\n          provider = EXCLUDED.provider,\n          endpoint = EXCLUDED.endpoint,\n          api_key = EXCLUDED.api_key,\n          app_id = EXCLUDED.app_id,\n          model = EXCLUDED.model,\n          max_tokens = EXCLUDED.max_tokens,\n          temperature = EXCLUDED.temperature,\n          system_prompt = EXCLUDED.system_prompt,\n          capabilities = EXCLUDED.capabilities,\n          rate_limit = EXCLUDED.rate_limit,\n          features = EXCLUDED.features,\n          metadata = EXCLUDED.metadata,\n          is_active = EXCLUDED.is_active,\n          updated_at = NOW();`,\n        [\n          config.id,\n          config.name,\n          config.description,\n          config.provider,\n          config.endpoint,\n          config.apiKey,\n          config.appId || null,\n          config.model,\n          config.maxTokens ?? null,\n          config.temperature ?? null,\n          config.systemPrompt ?? null,\n          JSON.stringify(config.capabilities ?? []),\n          JSON.stringify(config.rateLimit ?? null),\n          JSON.stringify(config.features ?? null),\n          JSON.stringify({ source: 'db' }),\n          config.isActive,\n        ],\n      );\n    });\n    this.agents.set(config.id, config);\n    await this.writeSnapshotToFile();\n  }\n\n  private async backfillFromFile(): Promise<void> {\n    let seededFromFile = false;\n    try {\n      const file = await fs.readFile(this.configPath, 'utf-8');\n      const sanitized = this.sanitizeNumericPlaceholders(file);\n      const parsed = JSON.parse(sanitized);\n      let list: AgentConfig[] = Array.isArray(parsed?.agents)\n        ? parsed.agents\n        : [];\n\n      // 🔐 安全增强：环境变量替换\n      list = deepReplaceEnvVariables(list);\n\n      if (list.length > 0) {\n        for (const agent of list) {\n          if (this.validateAgentConfig(agent)) {\n            await this.insertAgent({\n              ...agent,\n              createdAt: agent.createdAt || new Date().toISOString(),\n              updatedAt: agent.updatedAt || new Date().toISOString(),\n            });\n            seededFromFile = true;\n          }\n        }\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentConfigService',\n        operation: 'seedAgentsFromConfig',\n      });\n      logger.warn('从文件回填智能体失败', error.toLogObject());\n    }\n\n    if (!seededFromFile && this.agents.size === 0) {\n      await this.seedDefaultAgents();\n    }\n  }\n\n  private async seedDefaultAgents(): Promise<void> {\n    const now = new Date().toISOString();\n    for (const seed of this.builtinSeeds) {\n      const features = this.ensureFeatureDefaults(\n        seed.features as AgentConfig['features'] | undefined,\n      );\n      const config: AgentConfig = {\n        id: seed.id,\n        name: seed.name,\n        description: seed.description,\n        endpoint: seed.endpoint,\n        apiKey: seed.apiKey,\n        model: seed.model,\n        provider: seed.provider,\n        isActive: seed.isActive ?? false,\n        capabilities: seed.capabilities ?? [],\n        features,\n        createdAt: now,\n        updatedAt: now,\n      };\n\n      if (this.validateAgentConfig(config)) {\n        await this.insertAgent(config);\n      }\n    }\n  }\n\n  private async writeSnapshotToFile(): Promise<void> {\n    if (this.snapshotWriting) {\n      return;\n    }\n    this.snapshotWriting = true;\n    try {\n      const config = {\n        agents: Array.from(this.agents.values()),\n      };\n      await fs.writeFile(\n        this.configPath,\n        JSON.stringify(config, null, 2),\n        'utf-8',\n      );\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentConfigService',\n        operation: 'writeSnapshotToFile',\n      });\n      logger.warn('写入智能体快照失败', error.toLogObject());\n    } finally {\n      this.snapshotWriting = false;\n    }\n  }\n\n  /**\n   * 配置快照对比功能\n   * 比较数据库中的配置与文件中的配置\n   */\n  async compareConfigSnapshot(): Promise<{\n    isEqual: boolean;\n    dbOnly: AgentConfig[];\n    fileOnly: AgentConfig[];\n    differences: Array<{\n      id: string;\n      field: string;\n      dbValue: unknown;\n      fileValue: unknown;\n    }>;\n  }> {\n    // 获取数据库中的配置\n    const dbConfigs = await this.loadAgentsFromDb();\n    const dbConfigMap = new Map(dbConfigs.map((config) => [config.id, config]));\n\n    // 获取文件中的配置\n    let fileConfigs: AgentConfig[] = [];\n    try {\n      const raw = await fs.readFile(this.configPath, 'utf-8');\n      const sanitized = this.sanitizeNumericPlaceholders(raw);\n      const parsed = JSON.parse(sanitized);\n      fileConfigs = Array.isArray(parsed?.agents) ? parsed.agents : [];\n\n      // 对于示例智能体使用静默模式，不记录环境变量警告\n      fileConfigs = deepReplaceEnvVariables(fileConfigs, true);\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentConfigService',\n        operation: 'compareConfigSnapshot',\n      });\n      logger.warn('[AgentConfigService] 读取配置文件失败', error.toLogObject());\n      fileConfigs = [];\n    }\n\n    const fileConfigMap = new Map(\n      fileConfigs.map((config) => [config.id, config]),\n    );\n\n    // 找出仅在数据库中存在的配置\n    const dbOnly = dbConfigs.filter((config) => !fileConfigMap.has(config.id));\n\n    // 找出仅在文件中存在的配置\n    const fileOnly = fileConfigs.filter(\n      (config) => !dbConfigMap.has(config.id),\n    );\n\n    // 比较共同存在的配置\n    const differences: Array<{\n      id: string;\n      field: string;\n      dbValue: unknown;\n      fileValue: unknown;\n    }> = [];\n\n    for (const [id, dbConfig] of dbConfigMap) {\n      const fileConfig = fileConfigMap.get(id);\n      if (fileConfig) {\n        // 比较配置字段\n        const fieldsToCompare: (keyof AgentConfig)[] = [\n          'name',\n          'description',\n          'endpoint',\n          'apiKey',\n          'model',\n          'provider',\n          'isActive',\n          'maxTokens',\n          'temperature',\n          'systemPrompt',\n        ];\n\n        for (const field of fieldsToCompare) {\n          const dbValue = dbConfig[field];\n          const fileValue = fileConfig[field];\n\n          // 特殊处理数组和对象字段\n          if (field === 'capabilities') {\n            const dbCaps = Array.isArray(dbConfig.capabilities)\n              ? dbConfig.capabilities.sort()\n              : [];\n            const fileCaps = Array.isArray(fileConfig.capabilities)\n              ? fileConfig.capabilities.sort()\n              : [];\n            if (JSON.stringify(dbCaps) !== JSON.stringify(fileCaps)) {\n              differences.push({\n                id,\n                field: 'capabilities',\n                dbValue: dbCaps,\n                fileValue: fileCaps,\n              });\n            }\n          } else if (field === 'features') {\n            // features字段比较较为复杂，暂时跳过\n            continue;\n          } else if (field === 'rateLimit') {\n            // rateLimit字段比较较为复杂，暂时跳过\n            continue;\n          } else {\n            // 普通字段比较\n            if (dbValue !== fileValue) {\n              differences.push({\n                id,\n                field,\n                dbValue,\n                fileValue,\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      isEqual:\n        dbOnly.length === 0 &&\n        fileOnly.length === 0 &&\n        differences.length === 0,\n      dbOnly,\n      fileOnly,\n      differences,\n    };\n  }\n\n  /**\n   * 清理废弃配置\n   * 删除不再使用的配置项\n   */\n  async cleanupObsoleteConfigs(): Promise<{\n    deletedCount: number;\n    deletedIds: string[];\n  }> {\n    const deletedIds: string[] = [];\n\n    try {\n      // 获取所有配置\n      const configs = await this.ensureCache();\n\n      // 定义废弃配置的判断标准\n      // 1. 非激活状态且长时间未更新的配置\n      // 2. 配置无效的条目\n      const now = Date.now();\n      const obsoleteThreshold = 30 * 24 * 60 * 60 * 1000; // 30天\n\n      const obsoleteConfigs = configs.filter((config) => {\n        // 检查是否为废弃配置\n        const isInactive = !config.isActive;\n        const isOld =\n          now - new Date(config.updatedAt).getTime() > obsoleteThreshold;\n        const isInvalid = !this.validateAgentConfig(config);\n\n        // 如果配置非激活且超过30天未更新，或者配置无效，则认为是废弃配置\n        return (isInactive && isOld) || isInvalid;\n      });\n\n      // 删除废弃配置\n      for (const config of obsoleteConfigs) {\n        try {\n          await withClient(async (client) => {\n            await client.query('DELETE FROM agent_configs WHERE id = $1', [\n              config.id,\n            ]);\n          });\n          this.agents.delete(config.id);\n          deletedIds.push(config.id);\n          logger.info(`[AgentConfigService] 已删除废弃配置: ${config.id}`);\n        } catch (unknownError: unknown) {\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'AgentConfigService',\n            operation: 'cleanupObsoleteConfigs',\n          });\n          logger.error(`[AgentConfigService] 删除废弃配置失败: ${config.id}`, error.toLogObject());\n        }\n      }\n\n      // 如果删除了配置，更新快照文件\n      if (deletedIds.length > 0) {\n        await this.writeSnapshotToFile();\n      }\n\n      return {\n        deletedCount: deletedIds.length,\n        deletedIds,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentConfigService',\n        operation: 'cleanupObsoleteConfigs',\n      });\n      logger.error('[AgentConfigService] 清理废弃配置失败', error.toLogObject());\n      return {\n        deletedCount: 0,\n        deletedIds: [],\n      };\n    }\n  }\n\n  /**\n   * 定期清理任务\n   * 每日执行的清理任务\n   */\n  async dailyCleanupTask(): Promise<void> {\n    logger.info('[AgentConfigService] 开始执行每日清理任务');\n\n    try {\n      // 1. 清理废弃配置\n      const cleanupResult = await this.cleanupObsoleteConfigs();\n      logger.info(\n        `[AgentConfigService] 清理废弃配置完成: ${cleanupResult.deletedCount} 个配置已删除`,\n      );\n\n      // 2. 重新加载配置缓存\n      this.agents.clear();\n      this.lastLoadTime = 0;\n      await this.ensureCache(true);\n\n      // 3. 写入新的快照文件\n      await this.writeSnapshotToFile();\n\n      logger.info('[AgentConfigService] 每日清理任务完成');\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AgentConfigService',\n        operation: 'dailyCleanupTask',\n      });\n      logger.error('[AgentConfigService] 每日清理任务失败', error.toLogObject());\n    }\n  }\n\n  /**\n   * 获取配置健康状态\n   */\n  async getConfigHealthStatus(): Promise<{\n    totalConfigs: number;\n    activeConfigs: number;\n    inactiveConfigs: number;\n    invalidConfigs: number;\n    hasUnresolvedPlaceholders: number;\n    snapshotComparison: {\n      isEqual: boolean;\n      dbOnlyCount: number;\n      fileOnlyCount: number;\n      differenceCount: number;\n    };\n  }> {\n    // 获取所有配置\n    const configs = await this.ensureCache();\n\n    // 统计各种状态\n    const totalConfigs = configs.length;\n    const activeConfigs = configs.filter((c) => c.isActive).length;\n    const inactiveConfigs = totalConfigs - activeConfigs;\n\n    // 检查无效配置\n    let invalidConfigs = 0;\n    let hasUnresolvedPlaceholdersCount = 0;\n\n    for (const config of configs) {\n      if (!this.validateAgentConfig(config)) {\n        invalidConfigs++;\n      }\n\n      // 检查未解析的占位符\n      const sensitiveFields: Array<keyof AgentConfig> = ['endpoint', 'apiKey', 'appId'];\n      for (const field of sensitiveFields) {\n        const fieldValue = config[field];\n        if (\n          fieldValue &&\n          typeof fieldValue === 'string' &&\n          containsUnresolvedPlaceholders(fieldValue)\n        ) {\n          hasUnresolvedPlaceholdersCount++;\n          break;\n        }\n      }\n    }\n\n    // 执行快照对比\n    const comparison = await this.compareConfigSnapshot();\n\n    return {\n      totalConfigs,\n      activeConfigs,\n      inactiveConfigs,\n      invalidConfigs,\n      hasUnresolvedPlaceholders: hasUnresolvedPlaceholdersCount,\n      snapshotComparison: {\n        isEqual: comparison.isEqual,\n        dbOnlyCount: comparison.dbOnly.length,\n        fileOnlyCount: comparison.fileOnly.length,\n        differenceCount: comparison.differences.length,\n      },\n    };\n  }\n\n  private validateAgentConfig(\n    config: AgentConfig | Record<string, unknown>,\n    existingId?: string,\n    collection: Map<string, AgentConfig> = this.agents,\n  ): config is AgentConfig {\n    const requiredFields = [\n      'id',\n      'name',\n      'description',\n      'endpoint',\n      'apiKey',\n      'model',\n      'provider',\n    ];\n\n    for (const field of requiredFields) {\n      const cfg = config as any;\n      if (!cfg[field]) {\n        logger.error('智能体配置缺少必需字段', { field });\n        return false;\n      }\n    }\n\n    // 🔐 安全检查：对于激活的智能体，确保没有未解析的环境变量占位符\n    // 示例/未激活的智能体可以包含占位符\n    if (config.isActive) {\n      const cfg = config as any;\n      const sensitiveFields = ['endpoint', 'apiKey', 'appId'];\n      for (const field of sensitiveFields) {\n        if (\n          cfg[field] &&\n          typeof cfg[field] === 'string' &&\n          containsUnresolvedPlaceholders(cfg[field])\n        ) {\n          logger.error('激活的智能体配置包含未解析的环境变量占位符', {\n            agentId: config.id,\n            field,\n            value: cfg[field],\n          });\n          return false;\n        }\n      }\n    }\n\n    const cfgId = (config as {id?: string}).id;\n    if (cfgId && collection.has(cfgId) && cfgId !== existingId) {\n      logger.error('智能体ID重复', { agentId: config.id });\n      return false;\n    }\n\n    if (config.provider === 'fastgpt') {\n      if (\n        !config.appId ||\n        typeof config.appId !== 'string' ||\n        !/^[a-fA-F0-9]{24}$/.test(config.appId)\n      ) {\n        logger.error(\n          'FastGPT 配置缺少有效的 appId（需要 24 位十六进制字符串）',\n          { agentId: config.id },\n        );\n        return false;\n      }\n    }\n\n    const validProviders = [\n      'fastgpt',\n      'openai',\n      'anthropic',\n      'dify',\n      'dashscope',\n      'custom',\n    ];\n    const cfgProvider = (config as {provider?: string}).provider;\n    if (!cfgProvider || !validProviders.includes(cfgProvider)) {\n      logger.error('不支持的provider', { provider: config.provider });\n      return false;\n    }\n\n    try {\n      const cfgEndpoint = (config as {endpoint?: string}).endpoint;\n      const endpointUrl = cfgEndpoint?.startsWith('http')\n        ? config.endpoint\n        : `https://${config.endpoint}`;\n      new URL(endpointUrl as string);\n    } catch {\n      logger.error('无效的endpoint URL', { endpoint: config.endpoint });\n      return false;\n    }\n\n    return true;\n  }\n\n  private transformToAgent(config: AgentConfig): Agent {\n    return {\n      id: config.id,\n      name: config.name,\n      description: config.description,\n      model: config.model,\n      status: config.isActive ? 'active' : 'inactive',\n      capabilities: config.capabilities,\n      provider: config.provider,\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/AgentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/AuthService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":51,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":51,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1210,1212],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":60,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":66,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":65,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":65,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":68,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":68,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .password_plain on an `any` value.","line":75,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1854.","line":75,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":75,"endColumn":52},{"ruleId":"max-len","severity":1,"message":"This line has a length of 112. Maximum allowed is 100.","line":82,"column":1,"nodeType":"Program","messageId":"max","endLine":82,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":82,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":82,"column":53,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .username on an `any` value.","line":82,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":82,"column":80,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":110},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .role on an `any` value.","line":82,"column":93,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":97},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'profile' has no 'await' expression.","line":92,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":92,"endColumn":16},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'logout' has no 'await' expression.","line":110,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":110,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":122,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":128,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":127,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":127,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .password_plain on an `any` value.","line":135,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3284.","line":135,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":135,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readJsonc } from '@/utils/config';\nimport { generateId } from '@/utils/helpers';\nimport { withClient } from '@/utils/db';\nimport { AuthenticationError, ValidationError } from '@/types/errors';\n\nexport interface DefaultAccount {\n  username: string;\n  password: string;\n  role?: string;\n}\n\nexport interface AuthUser {\n  id: string;\n  username: string;\n  role?: string;\n}\n\nexport interface LoginResult {\n  token: string;\n  user: AuthUser;\n  expiresIn: number; // seconds\n}\n\ninterface ConfigSchema {\n  auth?: {\n    defaultAccounts?: DefaultAccount[];\n    tokenTTLSeconds?: number;\n  };\n}\n\ninterface TokenRecord {\n  user: AuthUser;\n  exp: number; // epoch ms\n}\n\n/**\n * 简单鉴权服务（开发/演示用）\n * - 从 config/config.jsonc 读取默认账号\n * - 生成内存 token，并在 TTL 到期时失效\n */\nexport class AuthService {\n  private readonly tokens = new Map<string, TokenRecord>();\n  private readonly defaultTTL = 24 * 60 * 60; // 24h\n  private accountsCache: Map<string, DefaultAccount> | null = null; // 内存账号缓存，仅用于开发/演示\n\n  private async getAccounts(): Promise<Map<string, DefaultAccount>> {\n    if (this.accountsCache) {\n      return this.accountsCache;\n    }\n    const cfg = await this.loadConfig();\n    const accounts = cfg.auth?.defaultAccounts || [\n      { username: 'admin', password: 'admin123!', role: 'admin' },\n    ];\n    this.accountsCache = new Map(accounts.map((a) => [a.username, { ...a }]));\n    return this.accountsCache;\n  }\n\n  async login(username: string, password: string): Promise<LoginResult> {\n    // \u0000d\u0000d -> \u0000d\u0000a\u0000d\u0000a \u0000d\u0000a\u0000d\u0000a\n    const dbUser = await withClient(async (client) => {\n      const { rows } = await client.query(\n        'SELECT id, username, password_plain, role, status FROM users WHERE username=$1 LIMIT 1',\n        [username],\n      );\n      return rows[0];\n    });\n\n    if (!dbUser || (dbUser.status && dbUser.status !== 'active')) {\n      throw new AuthenticationError({\n        message: '无效的凭据',\n        code: 'INVALID_CREDENTIALS',\n      });\n    }\n\n    if (password !== (dbUser.password_plain ?? 1854)) {\n      throw new AuthenticationError({\n        message: '无效的凭据',\n        code: 'INVALID_CREDENTIALS',\n      });\n    }\n\n    const user: AuthUser = { id: String(dbUser.id), username: dbUser.username, role: dbUser.role || undefined };\n    const cfg = await this.loadConfig();\n    const ttl = cfg.auth?.tokenTTLSeconds ?? this.defaultTTL;\n    const token = generateId();\n    const exp = Date.now() + ttl * 1000;\n\n    this.tokens.set(token, { user, exp });\n    return { token, user, expiresIn: ttl };\n  }\n\n  async profile(token: string): Promise<AuthUser> {\n    const record = this.tokens.get(token);\n    if (!record) {\n      throw new AuthenticationError({\n        message: '未授权访问',\n        code: 'UNAUTHORIZED',\n      });\n    }\n    if (Date.now() > record.exp) {\n      this.tokens.delete(token);\n      throw new AuthenticationError({\n        message: '令牌已过期',\n        code: 'TOKEN_EXPIRED',\n      });\n    }\n    return record.user;\n  }\n\n  async logout(token: string): Promise<void> {\n    this.tokens.delete(token);\n  }\n\n  async changePassword(token: string, oldPassword: string, newPassword: string): Promise<void> {\n    const record = this.tokens.get(token);\n    if (!record) {\n      throw new Error('UNAUTHORIZED');\n    }\n    const { username } = record.user;\n\n    // 从数据库读取用户并校验旧密码\n    const dbUser = await withClient(async (client) => {\n      const { rows } = await client.query(\n        'SELECT id, username, password_plain FROM users WHERE username=$1 LIMIT 1',\n        [username],\n      );\n      return rows[0];\n    });\n    if (!dbUser) {\n      throw new AuthenticationError({\n        message: '未授权访问',\n        code: 'UNAUTHORIZED',\n      });\n    }\n    if ((dbUser.password_plain ?? 3284) !== oldPassword) {\n      throw new ValidationError({\n        message: '旧密码不正确',\n        code: 'INVALID_OLD_PASSWORD',\n        field: 'oldPassword',\n      });\n    }\n\n    await withClient(async (client) => {\n      await client.query(\n        'UPDATE users SET password_plain=$1, updated_at=NOW() WHERE username=$2',\n        [newPassword, username],\n      );\n    });\n\n    // 可选：使当前token失效，强制重新登录（暂保留现状）\n    // this.tokens.delete(token);\n  }\n\n  private async loadConfig(): Promise<ConfigSchema> {\n    try {\n      return await readJsonc<ConfigSchema>('config/config.jsonc');\n    } catch (e) {\n      return {};\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/AuthServiceAdapter.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":79,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":79,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2043,2045],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[{"ruleId":"no-useless-constructor","severity":2,"message":"Useless constructor.","line":33,"column":3,"nodeType":"MethodDefinition","messageId":"noUselessConstructor","endLine":33,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-constructor","severity":2,"message":"Useless constructor.","line":66,"column":3,"nodeType":"MethodDefinition","messageId":"noUselessConstructor","endLine":66,"endColumn":58,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 认证服务适配器\n *\n * 目的:\n * - 统一新旧AuthService的接口\n * - 使AuthController无需感知底层服务版本\n * - 渐进式迁移，保持向后兼容\n */\n\nimport type { AuthService, AuthUser, LoginResult } from '@/services/AuthService';\nimport type { AuthServiceV2 } from '@/services/AuthServiceV2';\nimport logger from '@/utils/logger';\nimport { authService, isAuthV2 } from '@/services/authInstance';\n\n// 统一的接口定义\nexport interface IAuthServiceAdapter {\n  login(username: string, password: string, ip?: string): Promise<LoginResult>;\n  profile(token: string): Promise<AuthUser>;\n  logout(token: string): Promise<void>;\n  changePassword(\n    token: string,\n    oldPassword: string,\n    newPassword: string\n  ): Promise<void>;\n  refreshToken?(refreshToken: string): Promise<LoginResult>;\n}\n\n/**\n * V1服务适配器\n */\nexport class AuthServiceV1Adapter implements IAuthServiceAdapter {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private readonly service: AuthService) {}\n\n  async login(\n    username: string,\n    password: string,\n    _ip?: string,\n  ): Promise<LoginResult> {\n    // V1不支持IP参数，忽略\n    return this.service.login(username, password);\n  }\n\n  async profile(token: string): Promise<AuthUser> {\n    return this.service.profile(token);\n  }\n\n  async logout(token: string): Promise<void> {\n    await this.service.logout(token);\n  }\n\n  async changePassword(\n    token: string,\n    oldPassword: string,\n    newPassword: string,\n  ): Promise<void> {\n    await this.service.changePassword(token, oldPassword, newPassword);\n  }\n}\n\n/**\n * V2服务适配器\n */\nexport class AuthServiceV2Adapter implements IAuthServiceAdapter {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private readonly service: AuthServiceV2) {}\n\n  async login(\n    username: string,\n    password: string,\n    ip?: string,\n  ): Promise<LoginResult> {\n    return this.service.login(username, password, ip);\n  }\n\n  async profile(token: string): Promise<AuthUser> {\n    const result = await this.service.validateToken(token);\n    if (!result.valid || !result.user) {\n      throw new Error(result.error || 'TOKEN_INVALID');\n    }\n    return result.user;\n  }\n\n  async logout(token: string): Promise<void> {\n    await this.service.logout(token);\n  }\n\n  async changePassword(\n    token: string,\n    oldPassword: string,\n    newPassword: string,\n  ): Promise<void> {\n    // V2需要userId，从token中提取\n    const result = await this.service.validateToken(token);\n    if (!result.valid || !result.user) {\n      throw new Error('UNAUTHORIZED');\n    }\n    await this.service.changePassword(result.user.id, oldPassword, newPassword);\n  }\n\n  async refreshToken(refreshToken: string): Promise<LoginResult> {\n    return this.service.refreshToken(refreshToken);\n  }\n}\n\n/**\n * 创建适配器工厂函数\n */\nexport function createAuthServiceAdapter(\n  service: AuthService | AuthServiceV2,\n  isV2: boolean,\n): IAuthServiceAdapter {\n  if (isV2) {\n    logger.debug('创建AuthServiceV2Adapter');\n    return new AuthServiceV2Adapter(service as AuthServiceV2);\n  } else {\n    logger.debug('创建AuthServiceV1Adapter');\n    return new AuthServiceV1Adapter(service as AuthService);\n  }\n}\n\n/**\n * 获取适配后的认证服务\n */\nexport function getAuthServiceAdapter(): IAuthServiceAdapter {\n\n  return createAuthServiceAdapter(authService, isAuthV2);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/AuthServiceV2.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 32.","line":91,"column":56,"nodeType":"Literal","messageId":"noMagic","endLine":91,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7788.","line":119,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":119,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":123,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":123,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":127,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":127,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2000.","line":127,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":127,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":178,"column":66,"nodeType":"Literal","messageId":"noMagic","endLine":178,"endColumn":71},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":217,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":217,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5715,5717],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":342,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":342,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8921,8923],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":450,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":450,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11698,11700],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":472,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":472,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[12189,12191],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'generateToken' has no 'await' expression.","line":480,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":480,"endColumn":30},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'generateRefreshToken' has no 'await' expression.","line":494,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":494,"endColumn":37},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":612,"column":15,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":612,"endColumn":17,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[16488,16490],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":654,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":654,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 增强版认证服务 V2\n *\n * 安全特性:\n * - bcrypt密码哈希验证\n * - JWT token签名与验证\n * - Redis可选支持（Token黑名单、会话管理）\n * - 速率限制集成\n * - 审计日志记录\n *\n * 向后兼容:\n * - 保留原AuthService接口\n * - 支持渐进式迁移\n */\n\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport Redis from 'ioredis';\nimport { withClient } from '@/utils/db';\nimport { generateId } from '@/utils/helpers';\nimport { EnvManager } from '@/config/EnvManager';\nimport logger from '@/utils/logger';\nimport { AuthenticationError, ValidationError, ResourceError, BusinessLogicError, createErrorFromUnknown } from '@/types/errors';\nimport type { FailedLoginAttemptsResult } from '@/types/validation';\n\n// ==================== 类型定义 ====================\n\nexport interface AuthUser {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n}\n\nexport interface LoginResult {\n  token: string;\n  refreshToken?: string;\n  user: AuthUser;\n  expiresIn: number; // seconds\n}\n\nexport interface JWTPayload {\n  sub: string;       // user id\n  username: string;\n  role: string;\n  iat: number;       // issued at\n  exp: number;       // expires at\n  jti?: string;      // JWT ID (用于黑名单)\n}\n\nexport interface TokenValidationResult {\n  valid: boolean;\n  user?: AuthUser;\n  error?: string;\n}\n\ninterface DbUser {\n  id: string;\n  username: string;\n  email: string | null;\n  password_hash: string;\n  role: string | null;\n  status: string;\n  failed_login_attempts: number | null;\n  locked_until: Date | null;\n  last_login_at: Date | null;\n}\n\n// ==================== 配置常量 ====================\n\nconst SALT_ROUNDS = 12;                          // bcrypt盐轮数\nconst DEFAULT_TOKEN_TTL = 24 * 60 * 60;          // 24小时\nconst REFRESH_TOKEN_TTL = 7 * 24 * 60 * 60;      // 7天\nconst MAX_FAILED_ATTEMPTS = 5;                   // 最大失败次数\nconst ACCOUNT_LOCK_DURATION = 15 * 60;           // 锁定15分钟\nconst TOKEN_BLACKLIST_PREFIX = 'auth:blacklist:'; // Redis黑名单前缀\nconst SESSION_PREFIX = 'auth:session:';          // Redis会话前缀\n\n// ==================== 主服务类 ====================\n\nexport class AuthServiceV2 {\n  private redis: Redis | null = null;\n  private readonly tokenSecret: string;\n  private readonly tokenTTL: number;\n\n  constructor() {\n    const envManager = EnvManager.getInstance();\n\n    // 获取JWT密钥\n    this.tokenSecret = envManager.get('TOKEN_SECRET');\n    if (!this.tokenSecret || this.tokenSecret.length < 32) {\n      throw new Error(\n        'TOKEN_SECRET must be set and at least 32 characters long for security',\n      );\n    }\n\n    // 获取Token有效期\n    this.tokenTTL = envManager.getInt('TOKEN_TTL_SECONDS', DEFAULT_TOKEN_TTL);\n\n    // 初始化Redis（可选）\n    this.initRedis();\n  }\n\n  /**\n   * 初始化Redis连接（如果配置）\n   */\n  private initRedis(): void {\n    const envManager = EnvManager.getInstance();\n    const redisHost = envManager.get('REDIS_HOST', '');\n\n    if (!redisHost) {\n      logger.info('Redis未配置，使用内存模式（单实例部署）');\n      return;\n    }\n\n    try {\n      this.redis = new Redis({\n        host: envManager.get('REDIS_HOST'),\n        port: envManager.getInt('REDIS_PORT', 7788),\n        password: envManager.get('REDIS_PASSWORD', ''),\n        db: envManager.getInt('REDIS_DB', 0),\n        retryStrategy: (times: number) => {\n          if (times > 3) {\n            logger.error('Redis连接失败，切换到内存模式');\n            return null; // 停止重试\n          }\n          return Math.min(times * 200, 2000);\n        },\n      });\n\n      this.redis.on('connect', () => {\n        logger.info('✅ Redis连接成功，Token存储启用');\n      });\n\n      this.redis.on('error', (err: Error) => {\n        logger.error('Redis错误，将降级到内存模式', { error: err.message });\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AuthServiceV2',\n        operation: 'initRedis',\n      });\n      logger.error('Redis初始化失败，使用内存模式', error.toLogObject());\n      this.redis = null;\n    }\n  }\n\n  /**\n   * 用户登录\n   */\n  async login(username: string, password: string, ip?: string): Promise<LoginResult> {\n    logger.info('登录尝试', { username, ip });\n\n    // 1. 查询用户\n    const dbUser = await this.findUserByUsername(username);\n\n    if (!dbUser) {\n      logger.warn('登录失败：用户不存在', { username, ip });\n      throw new AuthenticationError({\n        message: '用户名或密码错误',\n        code: 'INVALID_CREDENTIALS',\n      });\n    }\n\n    // 2. 检查账号状态\n    if (dbUser.status !== 'active') {\n      logger.warn('登录失败：账号未激活', { username, status: dbUser.status, ip });\n      throw new BusinessLogicError({\n        message: '账号未激活',\n        code: 'ACCOUNT_INACTIVE',\n        rule: 'account_status',\n      });\n    }\n\n    // 3. 检查账号锁定\n    if (dbUser.locked_until && new Date(dbUser.locked_until) > new Date()) {\n      const remainingMinutes = Math.ceil(\n        (new Date(dbUser.locked_until).getTime() - Date.now()) / 60000,\n      );\n      logger.warn('登录失败：账号已锁定', {\n        username,\n        lockedUntil: dbUser.locked_until,\n        remainingMinutes,\n        ip,\n      });\n      throw new BusinessLogicError({\n        message: `账号已被锁定，请在 ${remainingMinutes} 分钟后重试`,\n        code: 'ACCOUNT_LOCKED',\n        rule: 'max_login_attempts',\n        data: { remainingMinutes },\n      });\n    }\n\n    // 4. 验证密码\n    const passwordValid = await bcrypt.compare(password, dbUser.password_hash);\n\n    if (!passwordValid) {\n      await this.handleFailedLogin(dbUser.id);\n      logger.warn('登录失败：密码错误', { username, ip });\n      throw new AuthenticationError({\n        message: '用户名或密码错误',\n        code: 'INVALID_CREDENTIALS',\n      });\n    }\n\n    // 5. 重置失败计数\n    await this.resetFailedAttempts(dbUser.id);\n\n    // 6. 更新最后登录时间\n    await this.updateLastLogin(dbUser.id, ip);\n\n    // 7. 生成Token\n    const user: AuthUser = {\n      id: dbUser.id,\n      username: dbUser.username,\n      email: dbUser.email ?? '',\n      role: dbUser.role || 'user',\n    };\n\n    const token = await this.generateToken(user);\n    const refreshToken = await this.generateRefreshToken(user);\n\n    // 8. 存储会话（如果有Redis）\n    if (this.redis) {\n      await this.storeSession(user.id, token, ip);\n    }\n\n    logger.info('✅ 登录成功', { userId: user.id, username, ip });\n\n    return {\n      token,\n      refreshToken,\n      user,\n      expiresIn: this.tokenTTL,\n    };\n  }\n\n  /**\n   * 验证Token\n   */\n  async validateToken(token: string): Promise<TokenValidationResult> {\n    try {\n      // 1. JWT签名验证\n      const payload = jwt.verify(token, this.tokenSecret) as JWTPayload;\n\n      // 2. 检查黑名单（如果有Redis）\n      if (this.redis && payload.jti) {\n        const isBlacklisted = await this.redis.exists(\n          `${TOKEN_BLACKLIST_PREFIX}${payload.jti}`,\n        );\n        if (isBlacklisted) {\n          return { valid: false, error: 'TOKEN_REVOKED' };\n        }\n      }\n\n      // 3. 构造用户信息\n      const user: AuthUser = {\n        id: payload.sub,\n        username: payload.username,\n        role: payload.role,\n        email: '',\n      };\n\n      return { valid: true, user };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AuthServiceV2',\n        operation: 'validateToken',\n      });\n\n      if (error instanceof jwt.TokenExpiredError) {\n        return { valid: false, error: 'TOKEN_EXPIRED' };\n      }\n      if (error instanceof jwt.JsonWebTokenError) {\n        return { valid: false, error: 'TOKEN_INVALID' };\n      }\n      logger.error('Token验证失败', error.toLogObject());\n      return { valid: false, error: 'TOKEN_VERIFICATION_FAILED' };\n    }\n  }\n\n  /**\n   * 登出（撤销Token）\n   */\n  async logout(token: string): Promise<void> {\n    if (!this.redis) {\n      logger.info('内存模式：登出仅记录日志');\n      return;\n    }\n\n    try {\n      const payload = jwt.decode(token) as JWTPayload;\n      if (!payload?.jti) {\n        return;\n      }\n\n      // 将Token加入黑名单\n      const ttl = payload.exp - Math.floor(Date.now() / 1000);\n      if (ttl > 0) {\n        await this.redis.setex(\n          `${TOKEN_BLACKLIST_PREFIX}${payload.jti}`,\n          ttl,\n          '1',\n        );\n      }\n\n      // 删除会话\n      await this.redis.del(`${SESSION_PREFIX}${payload.sub}`);\n\n      logger.info('✅ 登出成功', { userId: payload.sub, jti: payload.jti });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AuthServiceV2',\n        operation: 'logout',\n      });\n      logger.error('登出失败', error.toLogObject());\n    }\n  }\n\n  /**\n   * 刷新Token\n   */\n  async refreshToken(refreshToken: string): Promise<LoginResult> {\n    try {\n      const payload = jwt.verify(refreshToken, this.tokenSecret) as JWTPayload;\n\n      // 重新查询用户确保状态正确\n      const dbUser = await this.findUserById(payload.sub);\n      if (!dbUser || dbUser.status !== 'active') {\n        throw new ResourceError({\n          message: '用户不存在或未激活',\n          code: 'USER_NOT_FOUND_OR_INACTIVE',\n          resourceType: 'user',\n          resourceId: payload.sub,\n        });\n      }\n\n      const user: AuthUser = {\n        id: dbUser.id,\n        username: dbUser.username,\n        email: dbUser.email ?? '',\n        role: dbUser.role || 'user',\n      };\n\n      const newToken = await this.generateToken(user);\n      const newRefreshToken = await this.generateRefreshToken(user);\n\n      return {\n        token: newToken,\n        refreshToken: newRefreshToken,\n        user,\n        expiresIn: this.tokenTTL,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AuthServiceV2',\n        operation: 'refreshToken',\n      });\n      logger.error('Token刷新失败', error.toLogObject());\n      throw new AuthenticationError({\n        message: 'Refresh Token 无效或已过期',\n        code: 'REFRESH_TOKEN_INVALID',\n      });\n    }\n  }\n\n  /**\n   * 修改密码\n   */\n  async changePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string,\n  ): Promise<void> {\n    // 1. 查询用户\n    const dbUser = await this.findUserById(userId);\n    if (!dbUser) {\n      throw new ResourceError({\n        message: '用户不存在',\n        code: 'USER_NOT_FOUND',\n        resourceType: 'user',\n        resourceId: userId,\n      });\n    }\n\n    // 2. 验证旧密码\n    const oldPasswordValid = await bcrypt.compare(oldPassword, dbUser.password_hash);\n    if (!oldPasswordValid) {\n      throw new AuthenticationError({\n        message: '原密码错误',\n        code: 'INVALID_OLD_PASSWORD',\n      });\n    }\n\n    // 3. 验证新密码强度\n    this.validatePasswordStrength(newPassword);\n\n    // 4. 生成新密码哈希\n    const newPasswordHash = await bcrypt.hash(newPassword, SALT_ROUNDS);\n\n    // 5. 更新数据库\n    await withClient(async (client) => {\n      await client.query(\n        `UPDATE users\n         SET password_hash = $1, password_updated_at = CURRENT_TIMESTAMP\n         WHERE id = $2`,\n        [newPasswordHash, userId],\n      );\n    });\n\n    // 6. 撤销所有现有Token（强制重新登录）\n    if (this.redis) {\n      await this.redis.del(`${SESSION_PREFIX}${userId}`);\n    }\n\n    logger.info('✅ 密码修改成功', { userId });\n  }\n\n  /**\n   * 创建新用户（注册）\n   */\n  async register(\n    username: string,\n    password: string,\n    email?: string,\n  ): Promise<AuthUser> {\n    // 1. 验证密码强度\n    this.validatePasswordStrength(password);\n\n    // 2. 检查用户名是否已存在\n    const existingUser = await this.findUserByUsername(username);\n    if (existingUser) {\n      throw new BusinessLogicError({\n        message: '用户名已存在',\n        code: 'USERNAME_ALREADY_EXISTS',\n        rule: 'unique_username',\n        data: { username },\n      });\n    }\n\n    // 3. 生成密码哈希\n    const passwordHash = await bcrypt.hash(password, SALT_ROUNDS);\n\n    // 4. 插入数据库\n    const userId = generateId();\n    await withClient(async (client) => {\n      await client.query(\n        `INSERT INTO users (id, username, email, password_hash, role, status, created_at, updated_at)\n         VALUES ($1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)`,\n        [userId, username, email || null, passwordHash, 'user', 'active'],\n      );\n    });\n\n    logger.info('✅ 用户注册成功', { userId, username });\n\n    return {\n      id: userId,\n      username,\n      email: email ?? '',\n      role: 'user',\n    };\n  }\n\n  /**\n   * 获取用户信息（通过token）\n   */\n  async profile(token: string): Promise<AuthUser> {\n    const result = await this.validateToken(token);\n    if (!result.valid || !result.user) {\n      throw new AuthenticationError({\n        message: 'Token 验证失败',\n        code: result.error || 'UNAUTHORIZED',\n      });\n    }\n    return result.user;\n  }\n\n  // ==================== 私有辅助方法 ====================\n\n  private async generateToken(user: AuthUser): Promise<string> {\n    const jti = generateId();\n    const payload: JWTPayload = {\n      sub: user.id,\n      username: user.username,\n      role: user.role || 'user',\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + this.tokenTTL,\n      jti,\n    };\n\n    return jwt.sign(payload, this.tokenSecret);\n  }\n\n  private async generateRefreshToken(user: AuthUser): Promise<string> {\n    const payload: JWTPayload = {\n      sub: user.id,\n      username: user.username,\n      role: user.role || 'user',\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + REFRESH_TOKEN_TTL,\n    };\n\n    return jwt.sign(payload, this.tokenSecret);\n  }\n\n  private async findUserByUsername(username: string): Promise<DbUser | null> {\n    const result = await withClient(async (client) => {\n      const { rows } = await client.query<DbUser>(\n        `SELECT id, username, password_hash, role, status\n         FROM users\n         WHERE username = $1\n         LIMIT 1`,\n        [username],\n      );\n      // ✅ 兼容远程数据库：设置默认值\n      if (rows[0]) {\n        return {\n          ...rows[0],\n          failed_login_attempts: 0,\n          locked_until: null,\n          last_login_at: null,\n        } as DbUser;\n      }\n      return null;\n    });\n    return result;\n  }\n\n  private async findUserById(userId: string): Promise<DbUser | null> {\n    const result = await withClient(async (client) => {\n      const { rows } = await client.query<DbUser>(\n        `SELECT id, username, password_hash, role, status\n         FROM users\n         WHERE id = $1\n         LIMIT 1`,\n        [userId],\n      );\n      // ✅ 兼容远程数据库：设置默认值\n      if (rows[0]) {\n        return {\n          ...rows[0],\n          failed_login_attempts: 0,\n          locked_until: null,\n          last_login_at: null,\n        } as DbUser;\n      }\n      return null;\n    });\n    return result;\n  }\n\n  private async handleFailedLogin(userId: string): Promise<void> {\n    try {\n      await withClient(async (client) => {\n        // ✅ 尝试增加失败次数（如果字段存在）\n        await client.query(\n          `UPDATE users\n           SET failed_login_attempts = COALESCE(failed_login_attempts, 0) + 1\n           WHERE id = $1`,\n          [userId],\n        ).catch(() => {}); // 字段不存在时静默失败\n\n        // 检查是否需要锁定\n        const { rows } = await client.query<FailedLoginAttemptsResult>(\n          'SELECT failed_login_attempts FROM users WHERE id = $1',\n          [userId],\n        ).catch(() => ({ rows: [] }));\n\n        const attempts = rows[0]?.failed_login_attempts ?? 0;\n        if (attempts >= MAX_FAILED_ATTEMPTS) {\n          const lockUntil = new Date(Date.now() + ACCOUNT_LOCK_DURATION * 1000);\n          await client.query(\n            'UPDATE users SET locked_until = $1 WHERE id = $2',\n            [lockUntil, userId],\n          ).catch(() => {}); // 字段不存在时静默失败\n          logger.warn('账号已锁定', { userId, lockUntil });\n        }\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AuthServiceV2',\n        operation: 'handleFailedLogin',\n      });\n      // ✅ 兼容模式：登录失败追踪不可用时不影响核心功能\n      logger.debug('handleFailedLogin skipped (compatibility mode)', error.toLogObject());\n    }\n  }\n\n  private async resetFailedAttempts(userId: string): Promise<void> {\n    try {\n      await withClient(async (client) => {\n        await client.query(\n          'UPDATE users SET failed_login_attempts = 0, locked_until = NULL WHERE id = $1',\n          [userId],\n        ).catch(() => {}); // ✅ 字段不存在时静默失败\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AuthServiceV2',\n        operation: 'resetFailedAttempts',\n      });\n      // ✅ 兼容模式：重置失败次数不可用时不影响核心功能\n      logger.debug('resetFailedAttempts skipped (compatibility mode)', error.toLogObject());\n    }\n  }\n\n  private async updateLastLogin(userId: string, ip?: string): Promise<void> {\n    try {\n      await withClient(async (client) => {\n        await client.query(\n          'UPDATE users SET last_login_at = CURRENT_TIMESTAMP, last_login_ip = $1 WHERE id = $2',\n          [ip || null, userId],\n        ).catch(() => {}); // ✅ 字段不存在时静默失败\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AuthServiceV2',\n        operation: 'updateLastLogin',\n      });\n      // ✅ 兼容模式：最后登录时间追踪不可用时不影响核心功能\n      logger.debug('updateLastLogin skipped (compatibility mode)', error.toLogObject());\n    }\n  }\n\n  private async storeSession(userId: string, token: string, ip?: string): Promise<void> {\n    if (!this.redis) {\n      return;\n    }\n\n    try {\n      const sessionData = JSON.stringify({\n        token,\n        ip,\n        createdAt: new Date().toISOString(),\n      });\n      await this.redis.setex(`${SESSION_PREFIX}${userId}`, this.tokenTTL, sessionData);\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AuthServiceV2',\n        operation: 'storeSession',\n      });\n      logger.error('会话存储失败', { userId, ...error.toLogObject() });\n    }\n  }\n\n  /**\n   * 验证密码强度（公共方法，用于测试）\n   */\n  validatePassword(password: string): void {\n    this.validatePasswordStrength(password);\n  }\n\n  private validatePasswordStrength(password: string): void {\n    if (password.length < 8) {\n      throw new ValidationError({\n        message: '密码长度至少8位',\n        code: 'PASSWORD_TOO_SHORT',\n        field: 'password',\n      });\n    }\n    if (!/[A-Z]/.test(password)) {\n      throw new ValidationError({\n        message: '密码必须包含大写字母',\n        code: 'PASSWORD_MISSING_UPPERCASE',\n        field: 'password',\n      });\n    }\n    if (!/[a-z]/.test(password)) {\n      throw new ValidationError({\n        message: '密码必须包含小写字母',\n        code: 'PASSWORD_MISSING_LOWERCASE',\n        field: 'password',\n      });\n    }\n    if (!/[0-9]/.test(password)) {\n      throw new ValidationError({\n        message: '密码必须包含数字',\n        code: 'PASSWORD_MISSING_NUMBER',\n        field: 'password',\n      });\n    }\n    if (!/[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(password)) {\n      throw new ValidationError({\n        message: '密码必须包含特殊字符',\n        code: 'PASSWORD_MISSING_SPECIAL_CHAR',\n        field: 'password',\n      });\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  async close(): Promise<void> {\n    if (this.redis) {\n      await this.redis.quit();\n      logger.info('Redis连接已关闭');\n    }\n  }\n}\n\n// 导出单例\nlet authServiceInstance: AuthServiceV2 | null = null;\n\nexport function getAuthService(): AuthServiceV2 {\n  if (!authServiceInstance) {\n    authServiceInstance = new AuthServiceV2();\n  }\n  return authServiceInstance;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/BatchOperationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[442,445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[442,445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[489,492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[489,492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[695,698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[695,698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[807,810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[807,810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":149,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":149,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":153,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":153,"endColumn":59},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":156,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":156,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4373,4375],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":173,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":173,"endColumn":40},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":174,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":174,"endColumn":45},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":176,"column":30,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":176,"endColumn":48},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":183,"column":43,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":183,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":188,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":188,"endColumn":40},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":189,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":189,"endColumn":45},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":191,"column":30,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":191,"endColumn":48},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'batchAddSequential' has no 'await' expression.","line":244,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":244,"endColumn":35},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (6). Maximum allowed is 5.","line":363,"column":15,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":401,"endColumn":16},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (7). Maximum allowed is 5.","line":365,"column":17,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":394,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":366,"column":25,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":366,"endColumn":62},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (8). Maximum allowed is 5.","line":368,"column":19,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":372,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .attemptsMade on an `any` value.","line":369,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":369,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .failedAt on an `any` value.","line":370,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":370,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .failedReason on an `any` value.","line":371,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":371,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":375,"column":47,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":375,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .opts on an `any` value.","line":375,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Date`.","line":375,"column":66,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":375,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .createdAt on an `any` value.","line":375,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":79},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":376,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":376,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11823,11825],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":392,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":392,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[12627,12629],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":399,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":399,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[12907,12909],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":434,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13732,13735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13732,13735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":448,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":448,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14219,14222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14219,14222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":461,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":461,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":462,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":462,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":464,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":470,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15238,15241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15238,15241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":534,"column":70,"nodeType":"Literal","messageId":"noMagic","endLine":534,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 批量操作服务\n * 提供高效的Redis批量操作，减少网络往返次数，提升吞吐量\n */\n\nimport logger from '@/utils/logger';\nimport { type QueueJob, type QueueOptions, BackoffStrategy } from '@/types/queue';\nimport type RedisConnectionPool from '@/utils/redisConnectionPool';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface BatchOperation {\n  type: 'add' | 'remove' | 'retry' | 'update';\n  jobs: Array<{\n    id?: string;\n    type?: string;\n    data?: any;\n    options?: QueueOptions;\n    updates?: any;\n  }>;\n}\n\nexport interface BatchOperationResult {\n  successful: Array<{\n    id?: string;\n    result?: unknown;\n    index: number;\n  }>;\n  failed: Array<{\n    index: number;\n    error: string;\n    data: any;\n  }>;\n  total: number;\n  duration: number;\n}\n\nexport interface BatchAddOperation {\n  type: string;\n  data: any;\n  options?: QueueOptions;\n  priority?: number;\n  delay?: number;\n}\n\nexport interface BatchRemoveOperation {\n  id: string;\n}\n\nexport interface BatchRetryOperation {\n  id: string;\n  resetAttempts?: boolean;\n}\n\n/**\n * 批量操作服务类\n */\nexport class BatchOperationService {\n  private readonly connectionPool: RedisConnectionPool;\n  private batchSize: number;\n  private enablePipelining: boolean;\n  private enableTransactions: boolean;\n\n  constructor(connectionPool: RedisConnectionPool, options: {\n    batchSize?: number;\n    enablePipelining?: boolean;\n    enableTransactions?: boolean;\n  } = {}) {\n    this.connectionPool = connectionPool;\n    this.batchSize = options.batchSize ?? 100;\n    this.enablePipelining = options.enablePipelining ?? true;\n    this.enableTransactions = options.enableTransactions ?? false;\n  }\n\n  /**\n   * 批量添加任务\n   */\n  public async batchAddJobs(\n    queueName: string,\n    operations: BatchAddOperation[],\n  ): Promise<BatchOperationResult> {\n    const startTime = Date.now();\n    const successful: Array<{ id?: string; result?: unknown; index: number }> = [];\n    const failed: Array<{ index: number; error: string; data: unknown }> = [];\n\n    try {\n      if (this.enablePipelining) {\n        // 使用Pipeline批量添加\n        await this.batchAddWithPipeline(queueName, operations, successful, failed);\n      } else {\n        // 逐个添加\n        await this.batchAddSequential(queueName, operations, successful, failed);\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'BatchOperationService',\n        operation: 'batchAddJobs',\n      });\n      logger.error(`BatchOperationService: Error in batch add jobs for queue ${queueName}:`, error.toLogObject());\n      failed.push({\n        index: 0,\n        error: error.message,\n        data: operations,\n      });\n    }\n\n    const duration = Date.now() - startTime;\n\n    logger.info(`BatchOperationService: Batch add completed for queue ${queueName}`, {\n      total: operations.length,\n      successful: successful.length,\n      failed: failed.length,\n      duration,\n      opsPerSec: Math.round(operations.length / (duration / 1000)),\n    });\n\n    return {\n      successful,\n      failed,\n      total: operations.length,\n      duration,\n    };\n  }\n\n  /**\n   * 使用Pipeline批量添加任务\n   */\n  private async batchAddWithPipeline(\n    queueName: string,\n    operations: BatchAddOperation[],\n    successful: Array<{ id?: string; result?: unknown; index: number }>,\n    failed: Array<{ index: number; error: string; data: unknown }>,\n  ): Promise<void> {\n    const redis = await this.connectionPool.acquire();\n    try {\n      const batchSize = Math.min(operations.length, this.batchSize);\n\n      for (let i = 0; i < operations.length; i += batchSize) {\n        const batch = operations.slice(i, i + batchSize);\n        const pipeline = redis.pipeline();\n\n        for (const [batchIndex, operation] of batch.entries()) {\n          const globalIndex = i + batchIndex;\n\n          try {\n            const jobId = this.generateJobId();\n            const job: QueueJob = {\n              id: jobId,\n              name: operation.type,\n              data: operation.data,\n              opts: {\n                priority: operation.priority ?? 5,\n                delay: operation.delay ?? 0,\n                attempts: operation.options?.attempts ?? 3,\n                removeOnComplete: operation.options?.removeOnComplete ?? true,\n                removeOnFail: operation.options?.removeOnFail ?? true,\n                backoff: operation.options?.backoff || BackoffStrategy.EXPONENTIAL,\n                metadata: operation.options?.metadata ?? {},\n              },\n              createdAt: new Date(),\n              attemptsMade: 0,\n            };\n\n            // 存储任务数据\n            pipeline.hset(`${queueName}:jobs`, jobId, JSON.stringify(job));\n\n            // 根据延迟时间决定队列\n            if (operation.delay && operation.delay > 0) {\n              const scheduledAt = new Date(Date.now() + operation.delay);\n              pipeline.zadd(`${queueName}:delayed`, scheduledAt.getTime(), jobId);\n              pipeline.hset(`${queueName}:delayed:meta`, jobId, JSON.stringify({\n                id: jobId,\n                type: operation.type,\n                payload: operation.data,\n                priority: job.opts.priority!,\n                attempts: 0,\n                maxAttempts: job.opts.attempts!,\n                delay: operation.delay,\n                createdAt: job.createdAt,\n                metadata: job.opts.metadata,\n                scheduledAt,\n              }));\n            } else {\n              const score = this.getScore(job.opts.priority!, job.createdAt);\n              pipeline.zadd(`${queueName}:waiting`, score, jobId);\n              pipeline.hset(`${queueName}:waiting:meta`, jobId, JSON.stringify({\n                id: jobId,\n                type: operation.type,\n                payload: operation.data,\n                priority: job.opts.priority!,\n                attempts: 0,\n                maxAttempts: job.opts.attempts!,\n                delay: 0,\n                createdAt: job.createdAt,\n                metadata: job.opts.metadata,\n              }));\n            }\n\n            successful.push({ id: jobId, index: globalIndex });\n          } catch (unknownError: unknown) {\n            const error = createErrorFromUnknown(unknownError, {\n              component: 'BatchOperationService',\n              operation: 'batchAddJobs',\n            });\n            failed.push({\n              index: globalIndex,\n              error: error.message,\n              data: operation,\n            });\n          }\n        }\n\n        // 执行批量操作\n        const results = await pipeline.exec();\n\n        // 检查Pipeline执行结果\n        if (results) {\n          results.forEach((result, index) => {\n            if (result[0]) {\n              // Pipeline操作失败，从successful中移除对应的成功记录\n              const failedIndex = successful.findIndex(s => s.index === i + index);\n              if (failedIndex !== -1) {\n                const failedOp = successful[failedIndex];\n                if (failedOp) {\n                  successful.splice(failedIndex, 1);\n                  failed.push({\n                    index: failedOp.index,\n                    error: `Pipeline error: ${result[0]}`,\n                    data: operations[failedOp.index],\n                  });\n                }\n              }\n            }\n          });\n        }\n      }\n    } finally {\n      this.connectionPool.release(redis);\n    }\n  }\n\n  /**\n   * 逐个批量添加任务（回退方案）\n   */\n  private async batchAddSequential(\n    queueName: string,\n    operations: BatchAddOperation[],\n    _successful: Array<{ id?: string; result?: unknown; index: number }>,\n    _failed: Array<{ index: number; error: string; data: unknown }>,\n  ): Promise<void> {\n    // 这里可以调用QueueManager的addJob方法\n    // 为了简化，这里只记录日志\n    logger.debug(`BatchOperationService: Sequential batch add for ${operations.length} operations`);\n  }\n\n  /**\n   * 批量删除任务\n   */\n  public async batchRemoveJobs(\n    queueName: string,\n    jobIds: string[],\n  ): Promise<BatchOperationResult> {\n    const startTime = Date.now();\n    const successful: Array<{ id?: string; result?: unknown; index: number }> = [];\n    const failed: Array<{ index: number; error: string; data: unknown }> = [];\n\n    try {\n      const redis = await this.connectionPool.acquire();\n      try {\n        const batchSize = Math.min(jobIds.length, this.batchSize);\n\n        for (let i = 0; i < jobIds.length; i += batchSize) {\n          const batch = jobIds.slice(i, i + batchSize);\n          const pipeline = redis.pipeline();\n\n          for (const [batchIndex, jobId] of batch.entries()) {\n            const globalIndex = i + batchIndex;\n\n            // 从所有可能的队列中批量删除\n            pipeline.zrem(`${queueName}:waiting`, jobId);\n            pipeline.zrem(`${queueName}:active`, jobId);\n            pipeline.zrem(`${queueName}:delayed`, jobId);\n            pipeline.zrem(`${queueName}:completed`, jobId);\n            pipeline.zrem(`${queueName}:failed`, jobId);\n            pipeline.hdel(`${queueName}:jobs`, jobId);\n            pipeline.hdel(`${queueName}:waiting:meta`, jobId);\n            pipeline.hdel(`${queueName}:active:meta`, jobId);\n            pipeline.hdel(`${queueName}:delayed:meta`, jobId);\n            pipeline.hdel(`${queueName}:completed:meta`, jobId);\n            pipeline.hdel(`${queueName}:failed:meta`, jobId);\n\n            successful.push({ id: jobId, index: globalIndex });\n          }\n\n          // 执行批量删除\n          await pipeline.exec();\n        }\n      } finally {\n        this.connectionPool.release(redis);\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'BatchOperationService',\n        operation: 'batchRemoveJobs',\n      });\n      logger.error(`BatchOperationService: Error in batch remove jobs for queue ${queueName}:`, error.toLogObject());\n      failed.push({\n        index: 0,\n        error: error.message,\n        data: jobIds,\n      });\n    }\n\n    const duration = Date.now() - startTime;\n\n    return {\n      successful,\n      failed,\n      total: jobIds.length,\n      duration,\n    };\n  }\n\n  /**\n   * 批量重试任务\n   */\n  public async batchRetryJobs(\n    queueName: string,\n    jobIds: string[],\n    options: { resetAttempts?: boolean } = {},\n  ): Promise<BatchOperationResult> {\n    const startTime = Date.now();\n    const successful: Array<{ id?: string; result?: unknown; index: number }> = [];\n    const failed: Array<{ index: number; error: string; data: unknown }> = [];\n\n    try {\n      const redis = await this.connectionPool.acquire();\n      try {\n        const batchSize = Math.min(jobIds.length, this.batchSize);\n\n        for (let i = 0; i < jobIds.length; i += batchSize) {\n          const batch = jobIds.slice(i, i + batchSize);\n          const pipeline = redis.pipeline();\n\n          for (const [batchIndex, jobId] of batch.entries()) {\n            const globalIndex = i + batchIndex;\n\n            // 移动到等待队列\n            pipeline.zrem(`${queueName}:failed`, jobId);\n            pipeline.hget(`${queueName}:jobs`, jobId);\n\n            successful.push({ id: jobId, index: globalIndex });\n          }\n\n          // 执行批量操作\n          const results = await pipeline.exec();\n\n          // 处理结果，更新任务状态并移动到等待队列\n          if (results) {\n            for (let j = 0; j < results.length; j++) {\n              const result = results[j];\n              const globalIndex = i + j;\n\n              if (result && !result[0] && result[1]) {\n                // 成功获取任务数据\n                try {\n                  const job = JSON.parse(result[1] as string);\n\n                  if (options.resetAttempts) {\n                    job.attemptsMade = 0;\n                    delete job.failedAt;\n                    delete job.failedReason;\n                  }\n\n                  // 重新添加到等待队列\n                  const score = this.getScore(job.opts.priority, job.createdAt);\n                  const currentJobId = jobIds[globalIndex] || 'unknown';\n\n                  // 注意：这里需要重新创建pipeline，因为之前的pipeline已经执行了\n                  const newPipeline = redis.pipeline();\n                  newPipeline.zadd(`${queueName}:waiting`, score, currentJobId);\n                  newPipeline.hset(`${queueName}:jobs`, currentJobId, JSON.stringify(job));\n                  await newPipeline.exec();\n\n                } catch (unknownParseError: unknown) {\n                  const parseError = createErrorFromUnknown(unknownParseError, {\n                    component: 'BatchOperationService',\n                    operation: 'batchRetryJobs',\n                  });\n                  failed.push({\n                    index: globalIndex,\n                    error: `Parse error: ${parseError.message}`,\n                    data: { jobId: jobIds[globalIndex] || 'unknown' },\n                  });\n                }\n              } else if (result) {\n                failed.push({\n                  index: globalIndex,\n                  error: `Operation failed: ${result[0] as Error}`,\n                  data: { jobId: jobIds[globalIndex] || 'unknown' },\n                });\n              }\n          }\n        }\n        }\n      } finally {\n        this.connectionPool.release(redis);\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'BatchOperationService',\n        operation: 'batchRetryJobs',\n      });\n      logger.error(`BatchOperationService: Error in batch retry jobs for queue ${queueName}:`, error.toLogObject());\n      failed.push({\n        index: 0,\n        error: error.message,\n        data: jobIds,\n      });\n    }\n\n    const duration = Date.now() - startTime;\n\n    return {\n      successful,\n      failed,\n      total: jobIds.length,\n      duration,\n    };\n  }\n\n  /**\n   * 获取队列统计信息（批量查询）\n   */\n  public async batchGetQueueStats(queueNames: string[]): Promise<Record<string, any>> {\n    const redis = await this.connectionPool.acquire();\n    try {\n      const pipeline = redis.pipeline();\n\n      for (const queueName of queueNames) {\n        pipeline.zcard(`${queueName}:waiting`);\n        pipeline.zcard(`${queueName}:active`);\n        pipeline.zcard(`${queueName}:completed`);\n        pipeline.zcard(`${queueName}:failed`);\n        pipeline.zcard(`${queueName}:delayed`);\n      }\n\n      const results = await pipeline.exec();\n      const stats: Record<string, any> = {};\n\n      if (results) {\n        for (let i = 0; i < queueNames.length; i++) {\n          const queueName = queueNames[i];\n          if (!queueName) {\ncontinue;\n} // Skip undefined queue names\n          const baseIndex = i * 5;\n\n          const waitingResult = results[baseIndex];\n          const activeResult = results[baseIndex + 1];\n          const completedResult = results[baseIndex + 2];\n          const failedResult = results[baseIndex + 3];\n          const delayedResult = results[baseIndex + 4];\n\n          stats[queueName] = {\n            waiting: waitingResult && !waitingResult[0] ? (waitingResult[1] as number) : 0,\n            active: activeResult && !activeResult[0] ? (activeResult[1] as number) : 0,\n            completed: completedResult && !completedResult[0] ? (completedResult[1] as number) : 0,\n            failed: failedResult && !failedResult[0] ? (failedResult[1] as number) : 0,\n            delayed: delayedResult && !delayedResult[0] ? (delayedResult[1] as number) : 0,\n          } as any;\n        }\n      }\n\n      return stats;\n    } finally {\n      this.connectionPool.release(redis);\n    }\n  }\n\n  /**\n   * 清理过期的完成任务（批量操作）\n   */\n  public async batchCleanCompletedJobs(\n    queueName: string,\n    olderThanMs: number,\n    batchSize = 1000,\n  ): Promise<number> {\n    const redis = await this.connectionPool.acquire();\n    try {\n      const cutoffTime = Date.now() - olderThanMs;\n      let totalRemoved = 0;\n\n      while (true) {\n        // 获取过期的任务ID\n        const expiredJobIds = await redis.zrangebyscore(\n          `${queueName}:completed`,\n          0,\n          cutoffTime,\n          'LIMIT',\n          0,\n          batchSize,\n        );\n\n        if (expiredJobIds.length === 0) {\n          break;\n        }\n\n        // 批量删除\n        const pipeline = redis.pipeline();\n        for (const jobId of expiredJobIds) {\n          pipeline.zrem(`${queueName}:completed`, jobId);\n          pipeline.hdel(`${queueName}:jobs`, jobId);\n          pipeline.hdel(`${queueName}:completed:meta`, jobId);\n        }\n\n        const results = await pipeline.exec();\n        const batchRemoved = results ? results.filter(r => r[1] === 1).length : 0;\n        totalRemoved += batchRemoved;\n\n        logger.debug(`BatchOperationService: Cleaned ${batchRemoved} completed jobs from queue ${queueName}`);\n      }\n\n      logger.info(`BatchOperationService: Total cleaned ${totalRemoved} completed jobs from queue ${queueName}`);\n      return totalRemoved;\n    } finally {\n      this.connectionPool.release(redis);\n    }\n  }\n\n  /**\n   * 生成任务ID\n   */\n  private generateJobId(): string {\n    return `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 计算任务优先级分数\n   */\n  private getScore(priority: number, createdAt: Date): number {\n    const maxPriority = 20;\n    const priorityWeight = 1000000000000;\n    return (maxPriority - priority) * priorityWeight + createdAt.getTime();\n  }\n\n  /**\n   * 获取批量操作配置\n   */\n  public getConfig(): {\n    batchSize: number;\n    enablePipelining: boolean;\n    enableTransactions: boolean;\n  } {\n    return {\n      batchSize: this.batchSize,\n      enablePipelining: this.enablePipelining,\n      enableTransactions: this.enableTransactions,\n    };\n  }\n\n  /**\n   * 更新批量操作配置\n   */\n  public updateConfig(config: {\n    batchSize?: number;\n    enablePipelining?: boolean;\n    enableTransactions?: boolean;\n  }): void {\n    if (config.batchSize !== undefined) {\n      this.batchSize = Math.max(1, Math.min(1000, config.batchSize));\n    }\n    if (config.enablePipelining !== undefined) {\n      this.enablePipelining = config.enablePipelining;\n    }\n    if (config.enableTransactions !== undefined) {\n      this.enableTransactions = config.enableTransactions;\n    }\n\n    logger.info('BatchOperationService: Configuration updated', this.getConfig());\n  }\n}\n\nexport default BatchOperationService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/CacheService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":135,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":135,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3038,3040],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4115,4117],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":508,"column":10,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":508,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument '_target' should be typed with a non-any type.","line":509,"column":5,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":509,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":509,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11694,11697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11694,11697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":513,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":513,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":515,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":515,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11861,11864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11861,11864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":526,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":526,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":526,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":526,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .apply on an `any` value.","line":526,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":526,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":531,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":531,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Redis 缓存服务\n * 提供统一的缓存接口，支持多实例共享状态\n */\n\nimport Redis from 'ioredis';\nimport logger from '@/utils/logger';\nimport { AppConfig } from '@/config/AppConfig'; // ✅ 统一配置服务\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface CacheOptions {\n  ttl?: number;        // 过期时间（秒）\n  nx?: boolean;        // 仅当 key 不存在时设置\n  prefix?: string;     // key 前缀\n}\n\nexport interface CacheStats {\n  hits: number;\n  misses: number;\n  sets: number;\n  dels: number;\n  errors: number;\n  hitRate: number;\n}\n\n/**\n * Redis 缓存服务类\n */\nexport class CacheService {\n  private client: Redis | null = null;\n  private connected = false;\n  private stats: CacheStats = {\n    hits: 0,\n    misses: 0,\n    sets: 0,\n    dels: 0,\n    errors: 0,\n    hitRate: 0,\n  };\n\n  private readonly prefix: string = 'llmchat';\n  private readonly defaultTTL: number = 300; // 5 分钟\n\n  /**\n   * 检查是否已连接\n   */\n  isConnected(): boolean {\n    return this.connected && this.client !== null;\n  }\n\n  /**\n   * 连接到 Redis\n   */\n  async connect(): Promise<void> {\n    if (this.connected && this.client) {\n      return;\n    }\n\n    const redisConfig = AppConfig.getRedisConfig(); // ✅ 使用统一配置\n    const redisHost = redisConfig.host;\n    const redisPort = redisConfig.port;\n    const redisPassword = redisConfig.password;\n\n    if (!redisHost) {\n      logger.warn('Redis 未配置，缓存功能将被禁用');\n      return;\n    }\n\n    try {\n      this.client = new Redis({\n        host: redisHost,\n        port: redisPort,\n        ...(redisPassword ? { password: redisPassword } : {}),\n        retryStrategy: (times) => {\n          if (times > 10) {\n            logger.error('Redis 重连次数超过限制');\n            return null;\n          }\n          return Math.min(times * 100, 3000);\n        },\n        maxRetriesPerRequest: 3,\n      });\n\n      this.client.on('error', (err) => {\n        logger.error('Redis 客户端错误', { error: err });\n        this.stats.errors++;\n      });\n\n      this.client.on('connect', () => {\n        logger.info('Redis 连接成功');\n        this.connected = true;\n      });\n\n      this.client.on('close', () => {\n        logger.warn('Redis 连接断开');\n        this.connected = false;\n      });\n\n      this.client.on('reconnecting', () => {\n        logger.info('Redis 重新连接中...');\n      });\n\n      // ioredis 自动连接，不需要显式调用 connect()\n      // 等待连接完成\n      await this.client.ping();\n      this.connected = true;\n\n      logger.info('✓ Redis 缓存服务已启动', { prefix: this.prefix, defaultTTL: this.defaultTTL });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'connect',\n      });\n      logger.error('Redis 连接失败', error.toLogObject());\n      this.client = null;\n      this.connected = false;\n    }\n  }\n\n  /**\n   * 断开 Redis 连接\n   */\n  async disconnect(): Promise<void> {\n    if (this.client) {\n      await this.client.quit();\n      this.connected = false;\n      logger.info('Redis 连接已关闭');\n    }\n  }\n\n  /**\n   * 生成完整的 key（带前缀）\n   */\n  private getFullKey(key: string, prefix?: string): string {\n    const p = prefix || this.prefix;\n    return `${p}:${key}`;\n  }\n\n  /**\n   * 获取缓存\n   */\n  async get<T>(key: string, options?: CacheOptions): Promise<T | null> {\n    if (!this.client || !this.connected) {\n      return null;\n    }\n\n    try {\n      const fullKey = this.getFullKey(key, options?.prefix);\n      const value = await this.client.get(fullKey);\n\n      if (value === null) {\n        this.stats.misses++;\n        return null;\n      }\n\n      this.stats.hits++;\n      this.updateHitRate();\n\n      return JSON.parse(value) as T;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'get',\n      });\n      logger.error('缓存读取失败', { key, ...error.toLogObject() });\n      this.stats.errors++;\n      return null;\n    }\n  }\n\n  /**\n   * 设置缓存\n   */\n  async set<T>(key: string, value: T, options?: CacheOptions): Promise<boolean> {\n    if (!this.client || !this.connected) {\n      return false;\n    }\n\n    try {\n      const fullKey = this.getFullKey(key, options?.prefix);\n      const ttl = options?.ttl || this.defaultTTL;\n      const serialized = JSON.stringify(value);\n\n      if (options?.nx) {\n        // 仅当 key 不存在时设置（用于分布式锁）\n        const result = await this.client.set(fullKey, serialized, 'EX', ttl, 'NX');\n        this.stats.sets++;\n        return result === 'OK';\n      } else {\n        await this.client.setex(fullKey, ttl, serialized);\n        this.stats.sets++;\n        return true;\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'set',\n      });\n      logger.error('缓存写入失败', { key, ...error.toLogObject() });\n      this.stats.errors++;\n      return false;\n    }\n  }\n\n  /**\n   * 删除缓存\n   */\n  async del(key: string, options?: CacheOptions): Promise<boolean> {\n    if (!this.client || !this.connected) {\n      return false;\n    }\n\n    try {\n      const fullKey = this.getFullKey(key, options?.prefix);\n      const result = await this.client.del(fullKey);\n      this.stats.dels++;\n      return result > 0;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'del',\n      });\n      logger.error('缓存删除失败', { key, ...error.toLogObject() });\n      this.stats.errors++;\n      return false;\n    }\n  }\n\n  /**\n   * 批量删除（通过模式匹配）\n   */\n  async delPattern(pattern: string, options?: CacheOptions): Promise<number> {\n    if (!this.client || !this.connected) {\n      return 0;\n    }\n\n    try {\n      const fullPattern = this.getFullKey(pattern, options?.prefix);\n      const keys = await this.client.keys(fullPattern);\n\n      if (keys.length === 0) {\n        return 0;\n      }\n\n      const result = await this.client.del(keys);\n      this.stats.dels += result;\n      return result;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'delPattern',\n      });\n      logger.error('批量删除缓存失败', { pattern, ...error.toLogObject() });\n      this.stats.errors++;\n      return 0;\n    }\n  }\n\n  /**\n   * 检查 key 是否存在\n   */\n  async exists(key: string, options?: CacheOptions): Promise<boolean> {\n    if (!this.client || !this.connected) {\n      return false;\n    }\n\n    try {\n      const fullKey = this.getFullKey(key, options?.prefix);\n      const result = await this.client.exists(fullKey);\n      return result > 0;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'exists',\n      });\n      logger.error('检查缓存存在失败', { key, ...error.toLogObject() });\n      return false;\n    }\n  }\n\n  /**\n   * 设置过期时间\n   */\n  async expire(key: string, ttl: number, options?: CacheOptions): Promise<boolean> {\n    if (!this.client || !this.connected) {\n      return false;\n    }\n\n    try {\n      const fullKey = this.getFullKey(key, options?.prefix);\n      const result = await this.client.expire(fullKey, ttl);\n      return result === 1;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'expire',\n      });\n      logger.error('设置缓存过期时间失败', { key, ttl, ...error.toLogObject() });\n      return false;\n    }\n  }\n\n  /**\n   * 原子递增\n   */\n  async incr(key: string, options?: CacheOptions): Promise<number> {\n    if (!this.client || !this.connected) {\n      return 0;\n    }\n\n    try {\n      const fullKey = this.getFullKey(key, options?.prefix);\n      const result = await this.client.incr(fullKey);\n\n      // 如果是新 key，设置过期时间\n      if (result === 1 && options?.ttl) {\n        await this.client.expire(fullKey, options.ttl);\n      }\n\n      return result;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'incr',\n      });\n      logger.error('缓存递增失败', { key, ...error.toLogObject() });\n      this.stats.errors++;\n      return 0;\n    }\n  }\n\n  /**\n   * 获取或设置缓存（缓存未命中时执行 fallback）\n   */\n  async getOrSet<T>(\n    key: string,\n    fallback: () => Promise<T>,\n    options?: CacheOptions,\n  ): Promise<T | null> {\n    // 尝试从缓存获取\n    const cached = await this.get<T>(key, options);\n    if (cached !== null) {\n      return cached;\n    }\n\n    try {\n      // 缓存未命中，执行 fallback\n      const value = await fallback();\n\n      // 写入缓存\n      await this.set(key, value, options);\n\n      return value;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'getOrSet',\n      });\n      logger.error('getOrSet fallback 执行失败', { key, ...error.toLogObject() });\n      return null;\n    }\n  }\n\n  /**\n   * 分布式锁（简单实现）\n   */\n  async lock(key: string, ttl = 10): Promise<boolean> {\n    return this.set(`lock:${key}`, Date.now(), { ttl, nx: true });\n  }\n\n  /**\n   * 释放分布式锁\n   */\n  async unlock(key: string): Promise<boolean> {\n    return this.del(`lock:${key}`);\n  }\n\n  /**\n   * 更新命中率\n   */\n  private updateHitRate(): void {\n    const total = this.stats.hits + this.stats.misses;\n    this.stats.hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats(): CacheStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats(): void {\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      sets: 0,\n      dels: 0,\n      errors: 0,\n      hitRate: 0,\n    };\n  }\n\n  /**\n   * Ping Redis\n   */\n  async ping(): Promise<boolean> {\n    if (!this.client || !this.connected) {\n      return false;\n    }\n\n    try {\n      const result = await this.client.ping();\n      return result === 'PONG';\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'ping',\n      });\n      logger.error('Redis ping 失败', error.toLogObject());\n      return false;\n    }\n  }\n\n  /**\n   * 获取Redis数据库键数量\n   */\n  async dbsize(): Promise<number> {\n    if (!this.client || !this.connected) {\n      return 0;\n    }\n\n    try {\n      const size = await this.client.dbsize();\n      return size;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CacheService',\n        operation: 'dbsize',\n      });\n      logger.error('获取Redis dbsize失败', error.toLogObject());\n      return 0;\n    }\n  }\n\n  /**\n   * 健康检查\n   * 返回缓存服务的健康状态和详细信息\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'down';\n    details: {\n      stats: CacheStats;\n      redisConnected: boolean;\n    };\n  }> {\n    const isConnected = this.isConnected();\n    const canPing = await this.ping();\n\n    let status: 'healthy' | 'degraded' | 'down';\n    if (isConnected && canPing) {\n      status = 'healthy';\n    } else if (isConnected || canPing) {\n      status = 'degraded';\n    } else {\n      status = 'down';\n    }\n\n    return {\n      status,\n      details: {\n        stats: this.getStats(),\n        redisConnected: isConnected,\n      },\n    };\n  }\n}\n\n// 全局单例\nlet cacheServiceInstance: CacheService | null = null;\n\n/**\n * 获取缓存服务实例\n */\nexport function getCacheService(): CacheService {\n  if (!cacheServiceInstance) {\n    cacheServiceInstance = new CacheService();\n  }\n  return cacheServiceInstance;\n}\n\n/**\n * 初始化缓存服务\n */\nexport async function initCacheService(): Promise<CacheService> {\n  const service = getCacheService();\n  await service.connect();\n  return service;\n}\n\n/**\n * 缓存装饰器（用于方法级缓存）\n */\nexport function Cacheable(key: string, ttl = 300) {\n  return function (\n    _target: any,\n    _propertyKey: string,\n    descriptor: PropertyDescriptor,\n  ) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      const cache = getCacheService();\n      const cacheKey = `${key}:${JSON.stringify(args)}`;\n\n      // 尝试从缓存获取\n      const cached = await cache.get(cacheKey);\n      if (cached !== null) {\n        return cached;\n      }\n\n      // 缓存未命中，执行原方法\n      const result = await originalMethod.apply(this, args);\n\n      // 写入缓存\n      await cache.set(cacheKey, result, { ttl });\n\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n\nexport default CacheService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/CadOperationService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":38,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":38,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[764,766],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":78,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":78,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1866,1868],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2960,2962],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (6). Maximum allowed is 5.","line":361,"column":17,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":363,"endColumn":18},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (6). Maximum allowed is 5.","line":369,"column":17,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":371,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CAD 操作服务\n *\n * 负责 CAD 实体的增删改查操作\n * 使用 dxf-writer 生成修改后的 DXF 文件\n */\n\nimport DxfWriter from 'dxf-writer';\nimport { createErrorFromUnknown } from '@/types/errors';\nimport type {\n  DxfEntity,\n  AddLineParams,\n  AddCircleParams,\n  AddArcParams,\n  MoveEntityParams,\n  DeleteEntityParams,\n  QueryEntitiesParams,\n  CadOperationResult,\n  LineEntity,\n  CircleEntity,\n  ArcEntity,\n} from '@llmchat/shared-types';\nimport logger from '@/utils/logger';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * CAD 操作服务类\n */\nexport class CadOperationService {\n  /**\n   * 添加直线\n   */\n  addLine(entities: DxfEntity[], params: AddLineParams): CadOperationResult {\n    try {\n      const newEntity: LineEntity = {\n        type: 'LINE',\n        handle: uuidv4(),\n        layer: params.layer || '0',\n        start: params.start,\n        end: params.end,\n        ...(params.color !== undefined && { color: params.color }),\n      };\n\n      entities.push(newEntity);\n\n      logger.info('[CadOperationService] 添加直线成功', {\n        entityId: newEntity.handle,\n        start: params.start,\n        end: params.end,\n      });\n\n      return {\n        success: true,\n        message: `成功添加直线，从 (${params.start.x}, ${params.start.y}) 到 (${params.end.x}, ${params.end.y})`,\n        entityId: newEntity.handle,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CadOperationService',\n        operation: 'addLine',\n      });\n      logger.error('[CadOperationService] 添加直线失败', error.toLogObject());\n      return {\n        success: false,\n        message: `添加直线失败: ${error.message}`,\n      };\n    }\n  }\n\n  /**\n   * 添加圆形\n   */\n  addCircle(entities: DxfEntity[], params: AddCircleParams): CadOperationResult {\n    try {\n      const newEntity: CircleEntity = {\n        type: 'CIRCLE',\n        handle: uuidv4(),\n        layer: params.layer || '0',\n        center: params.center,\n        radius: params.radius,\n        ...(params.color !== undefined && { color: params.color }),\n      };\n\n      entities.push(newEntity);\n\n      logger.info('[CadOperationService] 添加圆形成功', {\n        entityId: newEntity.handle,\n        center: params.center,\n        radius: params.radius,\n      });\n\n      return {\n        success: true,\n        message: `成功添加圆形，圆心 (${params.center.x}, ${params.center.y})，半径 ${params.radius}`,\n        entityId: newEntity.handle,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CadOperationService',\n        operation: 'addCircle',\n      });\n      logger.error('[CadOperationService] 添加圆形失败', error.toLogObject());\n      return {\n        success: false,\n        message: `添加圆形失败: ${error.message}`,\n      };\n    }\n  }\n\n  /**\n   * 添加圆弧\n   */\n  addArc(entities: DxfEntity[], params: AddArcParams): CadOperationResult {\n    try {\n      const newEntity: ArcEntity = {\n        type: 'ARC',\n        handle: uuidv4(),\n        layer: params.layer || '0',\n        center: params.center,\n        radius: params.radius,\n        startAngle: params.startAngle,\n        endAngle: params.endAngle,\n        ...(params.color !== undefined && { color: params.color }),\n      };\n\n      entities.push(newEntity);\n\n      logger.info('[CadOperationService] 添加圆弧成功', {\n        entityId: newEntity.handle,\n        center: params.center,\n        radius: params.radius,\n        startAngle: params.startAngle,\n        endAngle: params.endAngle,\n      });\n\n      return {\n        success: true,\n        message: `成功添加圆弧，圆心 (${params.center.x}, ${params.center.y})，半径 ${params.radius}`,\n        entityId: newEntity.handle,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CadOperationService',\n        operation: 'addArc',\n      });\n      logger.error('[CadOperationService] 添加圆弧失败', error.toLogObject());\n      return {\n        success: false,\n        message: `添加圆弧失败: ${error.message}`,\n      };\n    }\n  }\n\n  /**\n   * 移动实体\n   */\n  moveEntity(entities: DxfEntity[], params: MoveEntityParams): CadOperationResult {\n    try {\n      const entity = entities.find(e => e.handle === params.entityId);\n\n      if (!entity) {\n        return {\n          success: false,\n          message: `未找到实体 ID: ${params.entityId}`,\n        };\n      }\n\n      // 根据实体类型移动\n      switch (entity.type) {\n        case 'LINE':\n          entity.start.x += params.offset.x;\n          entity.start.y += params.offset.y;\n          entity.start.z += params.offset.z;\n          entity.end.x += params.offset.x;\n          entity.end.y += params.offset.y;\n          entity.end.z += params.offset.z;\n          break;\n\n        case 'CIRCLE':\n        case 'ARC':\n          entity.center.x += params.offset.x;\n          entity.center.y += params.offset.y;\n          entity.center.z += params.offset.z;\n          break;\n\n        case 'POLYLINE':\n        case 'LWPOLYLINE':\n          entity.vertices.forEach((v: { x: number; y: number; z: number }) => {\n            v.x += params.offset.x;\n            v.y += params.offset.y;\n            v.z += params.offset.z;\n          });\n          break;\n\n        case 'TEXT':\n        case 'MTEXT':\n          entity.position.x += params.offset.x;\n          entity.position.y += params.offset.y;\n          entity.position.z += params.offset.z;\n          break;\n      }\n\n      logger.info('[CadOperationService] 移动实体成功', {\n        entityId: params.entityId,\n        offset: params.offset,\n      });\n\n      return {\n        success: true,\n        message: `成功移动实体 ${params.entityId}`,\n        entityId: params.entityId,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CadOperationService',\n        operation: 'moveEntity',\n      });\n      logger.error('[CadOperationService] 移动实体失败', error.toLogObject());\n      return {\n        success: false,\n        message: `移动实体失败: ${error.message}`,\n      };\n    }\n  }\n\n  /**\n   * 删除实体\n   */\n  deleteEntity(entities: DxfEntity[], params: DeleteEntityParams): CadOperationResult {\n    try {\n      const index = entities.findIndex(e => e.handle === params.entityId);\n\n      if (index === -1) {\n        return {\n          success: false,\n          message: `未找到实体 ID: ${params.entityId}`,\n        };\n      }\n\n      entities.splice(index, 1);\n\n      logger.info('[CadOperationService] 删除实体成功', {\n        entityId: params.entityId,\n      });\n\n      return {\n        success: true,\n        message: `成功删除实体 ${params.entityId}`,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CadOperationService',\n        operation: 'deleteEntity',\n      });\n      logger.error('[CadOperationService] 删除实体失败', error.toLogObject());\n      return {\n        success: false,\n        message: `删除实体失败: ${error.message}`,\n      };\n    }\n  }\n\n  /**\n   * 查询实体\n   */\n  queryEntities(entities: DxfEntity[], params: QueryEntitiesParams): CadOperationResult {\n    try {\n      let results = entities;\n\n      if (params.layer) {\n        results = results.filter(e => e.layer === params.layer);\n      }\n\n      if (params.type) {\n        results = results.filter(e => e.type === params.type);\n      }\n\n      logger.info('[CadOperationService] 查询实体成功', {\n        filter: params,\n        resultCount: results.length,\n      });\n\n      return {\n        success: true,\n        message: `找到 ${results.length} 个符合条件的实体`,\n        entities: results,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CadOperationService',\n        operation: 'queryEntities',\n      });\n      logger.error('[CadOperationService] 查询实体失败', error.toLogObject());\n      return {\n        success: false,\n        message: `查询实体失败: ${error.message}`,\n      };\n    }\n  }\n\n  /**\n   * 生成 DXF 文件内容\n   */\n  generateDxf(entities: DxfEntity[]): string {\n    try {\n      const dxf = new DxfWriter();\n\n      // 添加图层\n      const layers = Array.from(new Set(entities.map(e => e.layer)));\n      layers.forEach(layer => {\n        dxf.addLayer(layer, 7, 'CONTINUOUS');\n      });\n\n      // 添加实体\n      for (const entity of entities) {\n        // 注意: dxf-writer 可能没有 setCurrentLayer 方法，这里先注释掉\n        // dxf.setCurrentLayer(entity.layer);\n\n        switch (entity.type) {\n          case 'LINE':\n            dxf.drawLine(\n              entity.start.x,\n              entity.start.y,\n              entity.end.x,\n              entity.end.y,\n            );\n            break;\n\n          case 'CIRCLE':\n            dxf.drawCircle(entity.center.x, entity.center.y, entity.radius);\n            break;\n\n          case 'ARC':\n            dxf.drawArc(\n              entity.center.x,\n              entity.center.y,\n              entity.radius,\n              entity.startAngle,\n              entity.endAngle,\n            );\n            break;\n\n          case 'TEXT':\n          case 'MTEXT':\n            dxf.drawText(\n              entity.position.x,\n              entity.position.y,\n              entity.height,\n              entity.rotation ?? 0,\n              entity.text,\n            );\n            break;\n\n          // POLYLINE 需要更复杂的处理，这里简化\n          case 'POLYLINE':\n          case 'LWPOLYLINE':\n            if (entity.vertices.length >= 2) {\n              for (let i = 0; i < entity.vertices.length - 1; i++) {\n                const v1 = entity.vertices[i];\n                const v2 = entity.vertices[i + 1];\n                if (v1 && v2) {\n                  dxf.drawLine(v1.x, v1.y, v2.x, v2.y);\n                }\n              }\n              // 如果闭合，连接最后一点和第一点\n              if (entity.closed) {\n                const first = entity.vertices[0];\n                const last = entity.vertices[entity.vertices.length - 1];\n                if (first && last) {\n                  dxf.drawLine(last.x, last.y, first.x, first.y);\n                }\n              }\n            }\n            break;\n        }\n      }\n\n      logger.info('[CadOperationService] 生成 DXF 文件成功', {\n        entityCount: entities.length,\n      });\n\n      return dxf.toDxfString();\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CadOperationService',\n        operation: 'generateDxf',\n      });\n      logger.error('[CadOperationService] 生成 DXF 文件失败', error.toLogObject());\n      throw new Error(`生成 DXF 文件失败: ${error.message}`);\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/CadParserService.ts","messages":[{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'parseSync'.","line":44,"column":19,"nodeType":"MemberExpression","messageId":"noSync","endLine":44,"endColumn":40},{"ruleId":"complexity","severity":1,"message":"Method 'convertEntity' has a complexity of 21. Maximum allowed is 18.","line":98,"column":24,"nodeType":"FunctionExpression","messageId":"complex","endLine":157,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2222,2225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2222,2225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":100,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":100,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .handle on an `any` value.","line":100,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":101,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":101,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .layer on an `any` value.","line":101,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":102,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":102,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":103,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":103,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .lineType on an `any` value.","line":103,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":106,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .vertices on an `any` value.","line":111,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .vertices on an `any` value.","line":112,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .center on an `any` value.","line":119,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":120,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":120,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .radius on an `any` value.","line":120,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .center on an `any` value.","line":127,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":128,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":128,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .radius on an `any` value.","line":128,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":129,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":129,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .startAngle on an `any` value.","line":129,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":130,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":130,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .endAngle on an `any` value.","line":130,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":137,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":138,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":138,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":138,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":138,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .vertices on an `any` value.","line":138,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .map on an `any` value.","line":138,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":139,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":139,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .shape on an `any` value.","line":139,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":146,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .startPoint on an `any` value.","line":147,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .position on an `any` value.","line":147,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":148,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":148,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .text on an `any` value.","line":148,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3500.","line":148,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":148,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":149,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":149,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .textHeight on an `any` value.","line":149,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .height on an `any` value.","line":149,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":150,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":150,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .rotation on an `any` value.","line":150,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":154,"column":57,"nodeType":"Property","messageId":"anyAssignment","endLine":154,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":154,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":74},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4014,4017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4014,4017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":164,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":164,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .x on an `any` value.","line":164,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":165,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":165,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .y on an `any` value.","line":165,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":166,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":166,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .z on an `any` value.","line":166,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":221,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":221,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5654,5656],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":222,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":222,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5724,5726],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CAD 文件解析服务\n *\n * 使用 dxf-parser 解析 DXF 文件\n */\n\nimport DxfParser from 'dxf-parser';\nimport { createErrorFromUnknown } from '@/types/errors';\nimport type {\n  DxfEntity,\n  CadFileInfo,\n  Point3D,\n  LineEntity,\n  CircleEntity,\n  ArcEntity,\n  PolylineEntity,\n  TextEntity,\n  DxfEntityType,\n} from '@llmchat/shared-types';\nimport logger from '@/utils/logger';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * CAD 解析服务类\n */\nexport class CadParserService {\n  private readonly parser: DxfParser;\n\n  constructor() {\n    this.parser = new DxfParser();\n  }\n\n  /**\n   * 解析 DXF 文件内容\n   */\n  parseDxf(dxfContent: string): {\n    entities: DxfEntity[];\n    layers: string[];\n    bounds?: CadFileInfo['bounds'];\n  } {\n    try {\n      logger.debug('[CadParserService] 开始解析 DXF 文件');\n\n      const dxf = this.parser.parseSync(dxfContent);\n\n      if (!dxf?.entities) {\n        throw new Error('DXF 文件解析失败：无法读取实体');\n      }\n\n      const entities: DxfEntity[] = [];\n      const layersSet = new Set<string>();\n      const minX = Infinity, minY = Infinity;\n      const maxX = -Infinity, maxY = -Infinity;\n\n      // 转换实体\n      for (const entity of dxf.entities) {\n        const converted = this.convertEntity(entity);\n        if (converted) {\n          entities.push(converted);\n          layersSet.add(converted.layer);\n\n          // 更新边界\n          this.updateBounds(converted, { minX, minY, maxX, maxY });\n        }\n      }\n\n      const bounds = {\n        minX: isFinite(minX) ? minX : 0,\n        minY: isFinite(minY) ? minY : 0,\n        maxX: isFinite(maxX) ? maxX : 0,\n        maxY: isFinite(maxY) ? maxY : 0,\n      };\n\n      logger.info('[CadParserService] DXF 解析完成', {\n        entityCount: entities.length,\n        layerCount: layersSet.size,\n        bounds,\n      });\n\n      return {\n        entities,\n        layers: Array.from(layersSet),\n        bounds,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CadParserService',\n        operation: 'parseDxf',\n      });\n      logger.error('[CadParserService] DXF 解析失败', error.toLogObject());\n      throw new Error(`DXF 文件解析失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 转换实体为统一格式\n   */\n  private convertEntity(entity: any): DxfEntity | null {\n    const baseEntity = {\n      handle: entity.handle || uuidv4(),\n      layer: entity.layer || '0',\n      color: entity.color,\n      lineType: entity.lineType,\n    };\n\n    switch (entity.type) {\n      case 'LINE':\n        return {\n          ...baseEntity,\n          type: 'LINE',\n          start: this.toPoint3D(entity.vertices[0]),\n          end: this.toPoint3D(entity.vertices[1]),\n        } as LineEntity;\n\n      case 'CIRCLE':\n        return {\n          ...baseEntity,\n          type: 'CIRCLE',\n          center: this.toPoint3D(entity.center),\n          radius: entity.radius ?? 0,\n        } as CircleEntity;\n\n      case 'ARC':\n        return {\n          ...baseEntity,\n          type: 'ARC',\n          center: this.toPoint3D(entity.center),\n          radius: entity.radius ?? 0,\n          startAngle: entity.startAngle ?? 0,\n          endAngle: entity.endAngle ?? 0,\n        } as ArcEntity;\n\n      case 'LWPOLYLINE':\n      case 'POLYLINE':\n        return {\n          ...baseEntity,\n          type: entity.type as 'POLYLINE' | 'LWPOLYLINE',\n          vertices: (entity.vertices ?? []).map((v: Record<string, unknown>) => this.toPoint3D(v)),\n          closed: entity.shape || false,\n        } as PolylineEntity;\n\n      case 'TEXT':\n      case 'MTEXT':\n        return {\n          ...baseEntity,\n          type: entity.type as 'TEXT' | 'MTEXT',\n          position: this.toPoint3D(entity.startPoint || entity.position),\n          text: entity.text ?? 3500,\n          height: (entity.textHeight || entity.height) ?? 1,\n          rotation: entity.rotation ?? 0,\n        } as TextEntity;\n\n      default:\n        logger.debug('[CadParserService] 跳过不支持的实体类型', { type: entity.type });\n        return null;\n    }\n  }\n\n  /**\n   * 转换为 Point3D\n   */\n  private toPoint3D(point: any): Point3D {\n    return {\n      x: point?.x ?? 0,\n      y: point?.y ?? 0,\n      z: point?.z ?? 0,\n    };\n  }\n\n  /**\n   * 更新边界\n   */\n  private updateBounds(\n    entity: DxfEntity,\n    bounds: { minX: number; minY: number; maxX: number; maxY: number },\n  ): void {\n    const points: Point3D[] = [];\n\n    switch (entity.type) {\n      case 'LINE':\n        points.push(entity.start, entity.end);\n        break;\n      case 'CIRCLE':\n        points.push(\n          { x: entity.center.x - entity.radius, y: entity.center.y - entity.radius, z: 0 },\n          { x: entity.center.x + entity.radius, y: entity.center.y + entity.radius, z: 0 },\n        );\n        break;\n      case 'ARC':\n        points.push(\n          { x: entity.center.x - entity.radius, y: entity.center.y - entity.radius, z: 0 },\n          { x: entity.center.x + entity.radius, y: entity.center.y + entity.radius, z: 0 },\n        );\n        break;\n      case 'POLYLINE':\n      case 'LWPOLYLINE':\n        points.push(...entity.vertices);\n        break;\n      case 'TEXT':\n      case 'MTEXT':\n        points.push(entity.position);\n        break;\n    }\n\n    for (const point of points) {\n      bounds.minX = Math.min(bounds.minX, point.x);\n      bounds.minY = Math.min(bounds.minY, point.y);\n      bounds.maxX = Math.max(bounds.maxX, point.x);\n      bounds.maxY = Math.max(bounds.maxY, point.y);\n    }\n  }\n\n  /**\n   * 生成 DXF 文件摘要\n   */\n  generateSummary(entities: DxfEntity[]): string {\n    const typeCount: Record<string, number> = {};\n    const layerCount: Record<string, number> = {};\n\n    for (const entity of entities) {\n      typeCount[entity.type] = (typeCount[entity.type] || 0) + 1;\n      layerCount[entity.layer] = (layerCount[entity.layer] || 0) + 1;\n    }\n\n    const summary = [\n      `图纸包含 ${entities.length} 个实体`,\n      `实体类型分布: ${Object.entries(typeCount).map(([type, count]) => `${type}(${count})`).join(', ')}`,\n      `图层分布: ${Object.entries(layerCount).map(([layer, count]) => `${layer}(${count})`).join(', ')}`,\n    ];\n\n    return summary.join('\\n');\n  }\n\n  /**\n   * 查询实体\n   */\n  queryEntities(\n    entities: DxfEntity[],\n    filter?: { type?: DxfEntityType; layer?: string },\n  ): DxfEntity[] {\n    let results = entities;\n\n    if (filter?.type) {\n      results = results.filter(e => e.type === filter.type);\n    }\n\n    if (filter?.layer) {\n      results = results.filter(e => e.layer === filter.layer);\n    }\n\n    return results;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/ChatHistoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":39,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":39,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1138,1140],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1340,1343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1340,1343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":53,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":53,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1464,1466],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":64,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":64,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1935,1937],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":84,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":84,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2520,2522],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3689,3692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3689,3692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4300,4303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4300,4303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":145,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":145,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4433,4435],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":166,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":166,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { withClient } from '@/utils/db';\nimport { generateId } from '@/utils/helpers';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface ChatHistoryQueryOptions {\n  limit?: number;\n  offset?: number;\n  roles?: Array<'user' | 'assistant' | 'system'>;\n}\n\nexport interface StoredChatMessage {\n  id: string;\n  sessionId: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  metadata?: Record<string, any> | null;\n  createdAt: string;\n}\n\nexport interface StoredChatSession {\n  id: string;\n  agentId: string;\n  title: string | null;\n  userId: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport class ChatHistoryService {\n  async ensureSession(sessionId: string, agentId: string, title?: string | null): Promise<void> {\n    await withClient(async (client) => {\n      await client.query(\n        `INSERT INTO chat_sessions (id, agent_id, title)\n         VALUES ($1, $2, $3)\n         ON CONFLICT (id) DO UPDATE SET\n           agent_id = EXCLUDED.agent_id,\n           title = COALESCE(EXCLUDED.title, chat_sessions.title),\n           updated_at = NOW()`,\n        [sessionId, agentId, title || null],\n      );\n    });\n  }\n\n  async appendMessage(params: {\n    sessionId: string;\n    agentId: string;\n    role: 'user' | 'assistant' | 'system';\n    content: string;\n    metadata?: Record<string, any> | null;\n    messageId?: string;\n    titleHint?: string;\n  }): Promise<string> {\n    const messageId = params.messageId || generateId();\n    await withClient(async (client) => {\n      await client.query('BEGIN');\n      try {\n        await client.query(\n          `INSERT INTO chat_sessions (id, agent_id, title)\n           VALUES ($1,$2,$3)\n           ON CONFLICT (id) DO UPDATE SET\n             agent_id = EXCLUDED.agent_id,\n             title = COALESCE(EXCLUDED.title, chat_sessions.title),\n             updated_at = NOW()`\n          , [params.sessionId, params.agentId, params.titleHint || null],\n        );\n\n        await client.query(\n          `INSERT INTO chat_messages (id, session_id, role, content, metadata)\n           VALUES ($1,$2,$3,$4,$5::jsonb)`\n          , [\n            messageId,\n            params.sessionId,\n            params.role,\n            params.content,\n            JSON.stringify(params.metadata ?? null),\n          ],\n        );\n\n        await client.query(\n          `UPDATE chat_sessions\n             SET updated_at = NOW(),\n                 title = COALESCE($2, title)\n           WHERE id = $1`,\n          [params.sessionId, params.titleHint || null],\n        );\n\n        await client.query('COMMIT');\n      } catch (unknownError: unknown) {\n        await client.query('ROLLBACK');\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'ChatHistoryService',\n          operation: 'saveMessage',\n        });\n        throw error;\n      }\n    });\n\n    return messageId;\n  }\n\n  async getHistory(sessionId: string, options?: ChatHistoryQueryOptions): Promise<{\n    session: StoredChatSession | null;\n    messages: StoredChatMessage[];\n  }> {\n    const rolesFilter = options?.roles;\n    const limit = Math.min(Math.max(options?.limit ?? 100, 1), 500);\n    const offset = Math.max(options?.offset ?? 0, 0);\n\n    const { session, messages } = await withClient(async (client) => {\n      const sessionResult = await client.query<{\n        id: string;\n        agent_id: string;\n        user_id: string | null;\n        title: string | null;\n        created_at: Date;\n        updated_at: Date;\n      }>('SELECT * FROM chat_sessions WHERE id = $1', [sessionId]);\n\n      const messageQueryParts: string[] = [\n        'SELECT * FROM chat_messages WHERE session_id = $1',\n      ];\n      const params: any[] = [sessionId];\n\n      if (rolesFilter && rolesFilter.length > 0) {\n        messageQueryParts.push(`AND role = ANY($${params.length + 1})`);\n        params.push(rolesFilter);\n      }\n\n      messageQueryParts.push('ORDER BY created_at ASC');\n      messageQueryParts.push(`LIMIT $${params.length + 1}`);\n      params.push(limit);\n      messageQueryParts.push(`OFFSET $${params.length + 1}`);\n      params.push(offset);\n\n      const messagesResult = await client.query<{\n        id: string;\n        session_id: string;\n        role: 'user' | 'assistant' | 'system';\n        content: string;\n        metadata: any;\n        created_at: Date;\n      }>(messageQueryParts.join(' '), params);\n\n      return {\n        session: sessionResult.rows[0] || null,\n        messages: messagesResult.rows,\n      };\n    });\n\n    return {\n      session: session\n        ? {\n          id: session.id,\n          agentId: session.agent_id,\n          title: session.title,\n          userId: session.user_id,\n          createdAt: new Date(session.created_at).toISOString(),\n          updatedAt: new Date(session.updated_at).toISOString(),\n        }\n        : null,\n      messages: messages.map((msg) => ({\n        id: msg.id,\n        sessionId: msg.session_id,\n        role: msg.role,\n        content: msg.content,\n        metadata: msg.metadata ?? null,\n        createdAt: new Date(msg.created_at).toISOString(),\n      })),\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/ChatInitService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":40,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":40,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1227,1229],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2574.","line":93,"column":66,"nodeType":"Literal","messageId":"noMagic","endLine":93,"endColumn":70},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3656,3659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3656,3659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .chatId on an `any` value.","line":134,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":137,"column":53,"nodeType":"Property","messageId":"anyAssignment","endLine":137,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":141,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":141,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":147,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":147,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":148,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":148,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":148,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":149,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":153,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":153,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":153,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4573,4576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4573,4576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .isAxiosError on an `any` value.","line":161,"column":91,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":162,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":162,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4630,4633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4630,4633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":163,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":163,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .response on an `any` value.","line":163,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":163,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":81}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport type { AgentConfigService } from './AgentConfigService';\nimport type { AgentConfig, FastGPTInitResponse } from '@/types';\nimport { AdaptiveTtlPolicy } from '@/utils/adaptiveCache';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\n/**\n * 聊天初始化服务\n * 负责调用FastGPT的初始化API并处理流式输出\n */\nexport class ChatInitService {\n  private readonly httpClient: ReturnType<typeof axios.create>;\n  private readonly agentService: AgentConfigService;\n  private readonly cache: Map<string, { data: FastGPTInitResponse; expiresAt: number }> = new Map();\n  private readonly cachePolicy = new AdaptiveTtlPolicy({\n    initialTtl: 5 * 60 * 1000,\n    minTtl: 60 * 1000,\n    maxTtl: 15 * 60 * 1000,\n    step: 60 * 1000,\n    sampleSize: 20,\n    adjustIntervalMs: 2 * 60 * 1000,\n  });\n\n  constructor(agentService: AgentConfigService) {\n    this.agentService = agentService;\n    this.httpClient = axios.create({\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * 获取初始化数据（非流式）\n   */\n  async getInitData(appId: string, chatId?: string): Promise<FastGPTInitResponse> {\n    // 检查缓存\n    const cacheKey = `${appId}_${chatId || 'default'}`;\n    const cached = this.cache.get(cacheKey);\n    const now = Date.now();\n    if (cached && cached.expiresAt > now) {\n      logger.debug('✅ 使用缓存的初始化数据');\n      this.cachePolicy.recordHit();\n      return cached.data;\n    }\n\n    this.cachePolicy.recordMiss();\n\n    // 获取智能体配置（此处的 appId 实际是前端传入的智能体ID）\n    const agent = await this.agentService.getAgent(appId);\n    if (!agent) {\n      throw new Error(`智能体不存在: ${appId}`);\n    }\n\n    if (agent.provider !== 'fastgpt') {\n      throw new Error(`智能体 ${appId} 不是FastGPT类型，无法获取初始化数据`);\n    }\n\n    // 额外校验：FastGPT 必须配置 appId（24位hex），避免将智能体ID误传给 FastGPT\n    if (!agent.appId || !/^[a-fA-F0-9]{24}$/.test(agent.appId)) {\n      throw new Error('FastGPT 智能体缺少有效的 appId 配置');\n    }\n\n    // 调用FastGPT API（传递真实的 FastGPT appId，而非本地的智能体ID）\n    const initData = await this.callFastGPTInitAPI(agent, chatId);\n\n    // 缓存结果\n    this.cache.set(cacheKey, {\n      data: initData,\n      expiresAt: Date.now() + this.cachePolicy.getTtl(),\n    });\n\n    return initData;\n  }\n\n  /**\n   * 获取初始化数据（流式）\n   */\n  async getInitDataStream(\n    appId: string,\n    chatId: string | undefined,\n    onChunk: (chunk: string) => void,\n    onComplete: (data: FastGPTInitResponse) => void,\n    onError: (error: Error) => void,\n  ): Promise<void> {\n    try {\n      // 先获取完整的初始化数据\n      const initData = await this.getInitData(appId, chatId);\n\n      // 提取开场白文本\n      const welcomeText = initData.app.chatConfig.welcomeText ?? 2574;\n\n      if (!welcomeText) {\n        // 如果没有开场白，直接返回完整数据\n        onComplete(initData);\n        return;\n      }\n\n      // 在流式输出前进行换行规范化，将字面量 \"\\n\"/\"\\r\\n\" 转换为真实换行符\n      const normalizedWelcomeText = this.normalizeWelcomeText(welcomeText);\n\n      // 流式输出开场白文本\n      await this.streamWelcomeText(normalizedWelcomeText, onChunk);\n\n      // 流式输出完成后，返回完整数据\n      onComplete(initData);\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatInitService',\n        operation: 'getInitData',\n      });\n      onError(error);\n    }\n  }\n\n  /**\n   * 调用FastGPT初始化API\n   */\n  private async callFastGPTInitAPI(\n    agent: AgentConfig,\n    chatId?: string,\n  ): Promise<FastGPTInitResponse> {\n    try {\n      // 构建FastGPT API URL\n      const baseUrl = agent.endpoint.replace('/api/v1/chat/completions', '');\n      const initUrl = `${baseUrl}/api/core/chat/init`;\n\n      // 构建请求参数：使用 agent.appId 作为 FastGPT 的 appId\n      const params: any = { appId: agent.appId };\n      if (chatId) {\n        params.chatId = chatId;\n      }\n\n      logger.debug('🚀 调用FastGPT初始化API', { initUrl, params });\n\n      // 发送请求\n      const response = await this.httpClient.get(initUrl, {\n        params,\n        headers: {\n          'Authorization': `Bearer ${agent.apiKey}`,\n        },\n      });\n\n      const responseData = response.data;\n      if (responseData.code !== 200) {\n        throw new Error(`FastGPT API错误: ${responseData.message || '未知错误'}`);\n      }\n\n      logger.debug('✅ FastGPT初始化API调用成功');\n      return responseData.data;\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatInitService',\n        operation: 'callFastGPTInitAPI',\n      });\n      logger.error('❌ FastGPT初始化API调用失败', error.toLogObject());\n      if (error && typeof error === 'object' && 'isAxiosError' in error && (error as any).isAxiosError) {\n        const axiosError = error as any;\n        const message = axiosError.response?.data?.message || axiosError.message;\n        throw new Error(`FastGPT API调用失败: ${message}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * 流式输出开场白文本\n   */\n  private async streamWelcomeText(\n    text: string,\n    onChunk: (chunk: string) => void,\n  ): Promise<void> {\n    // 将文本按字符分割，模拟打字机效果\n    const chars = Array.from(text);\n    const delay = 50; // 每个字符间隔50ms\n\n    for (let i = 0; i < chars.length; i++) {\n      const char = chars[i];\n      onChunk(char ?? '');\n\n      // 添加延迟，模拟真实的打字效果\n      if (i < chars.length - 1) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n\n  // 将字面量换行标记标准化为真实换行，且统一为 \\n\n  private normalizeWelcomeText(text: string): string {\n    if (!text) {\n      return '';\n    }\n    return text\n      // 已经存在的真实 CRLF -> LF\n      .replace(/\\r\\n/g, '\\n')\n      // 字面量 \"\\\\r\\\\n\" -> LF\n      .replace(/\\\\r\\\\n/g, '\\n')\n      // 字面量 \"\\\\n\" -> LF\n      .replace(/\\\\n/g, '\\n')\n      // 单独真实 CR -> LF\n      .replace(/\\r/g, '\\n')\n      // 字面量 \"\\\\r\" -> LF\n      .replace(/\\\\r/g, '\\n');\n  }\n\n  /**\n   * 清除缓存\n   */\n  clearCache(): void {\n    this.cache.clear();\n    this.cachePolicy.reset();\n    logger.debug('🧹 初始化数据缓存已清除');\n  }\n\n  /**\n   * 清除过期缓存\n   */\n  clearExpiredCache(): void {\n    const now = Date.now();\n    for (const [key, value] of this.cache.entries()) {\n      if (value.expiresAt <= now) {\n        this.cache.delete(key);\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/ChatLogService.ts","messages":[{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'existsSync'.","line":63,"column":12,"nodeType":"MemberExpression","messageId":"noSync","endLine":63,"endColumn":25},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'mkdirSync'.","line":64,"column":9,"nodeType":"MemberExpression","messageId":"noSync","endLine":64,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":108,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":108,"endColumn":16},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":130,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":130,"endColumn":50,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3794,3794],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":144,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":144,"endColumn":17},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":169,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":169,"endColumn":51,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4936,4936],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5976,5979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5976,5979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":221,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":221,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport { withClient } from '@/utils/db';\nimport { loadAppConfig } from '@/utils/appConfig';\nimport { ObservabilityDispatcher } from '@/services/ObservabilityDispatcher';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\ninterface NormalLogEntry {\n  timestamp: string;\n  type: 'normal';\n  agentId: string;\n  provider: string;\n  endpoint: string;\n  requestMeta?: Record<string, unknown> | undefined;\n  rawResponse?: unknown | undefined;\n  normalizedResponse?: unknown | undefined;\n}\n\ninterface StreamLogEntry {\n  timestamp: string;\n  type: 'stream';\n  agentId: string;\n  provider?: string | undefined;\n  endpoint?: string | undefined;\n  chatId?: string | undefined;\n  eventType: string;\n  data: unknown;\n}\n\nexport class ChatLogService {\n  private readonly enabled: boolean;\n  private readonly logDir: string;\n  private readonly recordNormal: boolean;\n  private readonly recordStream: boolean;\n  private readonly includeRaw: boolean;\n  private readonly includeNormalized: boolean;\n  private readonly observability = ObservabilityDispatcher.getInstance();\n\n  constructor() {\n    const cfg = loadAppConfig();\n    const cfgLog = cfg.logging ?? {};\n\n    // 默认开启，允许通过配置文件/环境变量关闭\n    this.enabled =\n      cfgLog.enabled ?? ((process.env.LOG_CHAT_RESPONSES ?? 'true') === 'true');\n\n    // 默认写入项目根目录 ./log（以编译后 dist 下 __dirname 回溯到仓库根）\n    this.logDir =\n      cfgLog.dir ?? process.env.LOG_CHAT_DIR ?? path.resolve(__dirname, '../../..', 'log');\n\n    // 记录范围（默认：都记录）\n    this.recordNormal = cfgLog.record?.normal ?? true;\n    this.recordStream = cfgLog.record?.stream ?? true;\n\n    // 输出内容（默认：都包含）\n    this.includeRaw = cfgLog.include?.raw ?? true;\n    this.includeNormalized = cfgLog.include?.normalized ?? true;\n  }\n\n  private ensureDir() {\n    try {\n      if (!fs.existsSync(this.logDir)) {\n        fs.mkdirSync(this.logDir, { recursive: true });\n      }\n    } catch (e) {\n      // 避免影响主流程\n      logger.warn('[ChatLogService] 创建日志目录失败', { error: e });\n    }\n  }\n\n  private getLogFilePath(): string {\n    const date = new Date();\n    const y = date.getFullYear();\n    const m = String(date.getMonth() + 1).padStart(2, '0');\n    const d = String(date.getDate()).padStart(2, '0');\n    const file = `chat-${y}${m}${d}.log`;\n    return path.join(this.logDir, file);\n  }\n\n  private appendFile(entry: object) {\n    if (!this.enabled) {\n      return;\n    }\n    this.ensureDir();\n    const line = JSON.stringify(entry) + '\\n';\n    try {\n      fs.appendFile(this.getLogFilePath(), line, (err) => {\n        if (err) {\n          logger.warn('[ChatLogService] 写入日志失败', { error: err });\n        }\n      });\n    } catch (e) {\n      logger.warn('[ChatLogService] 追加日志异常', { error: e });\n    }\n  }\n\n  private async appendDb(level: 'INFO'|'WARN'|'ERROR', message: string) {\n    try {\n      await withClient(async (client) => {\n        await client.query('INSERT INTO logs(level, message) VALUES ($1, $2)', [level, message]);\n      });\n    } catch (e) {\n      logger.warn('[ChatLogService] 数据库写入失败', { error: e });\n    }\n  }\n\n  logCompletion(params: {\n    agentId: string;\n    provider: string;\n    endpoint: string;\n    requestMeta?: Record<string, unknown>;\n    rawResponse?: unknown;\n    normalizedResponse?: unknown;\n  }) {\n    if (!this.enabled || !this.recordNormal) {\n      return;\n    }\n    const entry: NormalLogEntry = {\n      timestamp: new Date().toISOString(),\n      type: 'normal',\n      agentId: params.agentId,\n      provider: params.provider,\n      endpoint: params.endpoint,\n      requestMeta: params.requestMeta,\n      rawResponse: this.includeRaw ? params.rawResponse : undefined,\n      normalizedResponse: this.includeNormalized ? params.normalizedResponse : undefined,\n    };\n    this.appendFile(entry);\n    this.appendDb('INFO', JSON.stringify(entry));\n    this.pushObservability('normal', 'INFO', {\n      agentId: params.agentId,\n      provider: params.provider,\n      endpoint: params.endpoint,\n      payload: {\n        requestMeta: params.requestMeta,\n        rawResponse: this.includeRaw ? params.rawResponse ?? null : null,\n        normalizedResponse: this.includeNormalized ? params.normalizedResponse ?? null : null,\n      },\n      timestamp: entry.timestamp,\n    });\n  }\n\n  logStreamEvent(params: {\n    agentId: string;\n    chatId?: string;\n    provider?: string;\n    endpoint?: string;\n    eventType: string;\n    data: unknown;\n  }) {\n    if (!this.enabled || !this.recordStream) {\n      return;\n    }\n    const entry: StreamLogEntry = {\n      timestamp: new Date().toISOString(),\n      type: 'stream',\n      agentId: params.agentId,\n      provider: params.provider,\n      endpoint: params.endpoint,\n      chatId: params.chatId,\n      eventType: params.eventType,\n      data: params.data,\n    };\n    this.appendFile(entry);\n    {\n      const level: 'INFO' | 'WARN' | 'ERROR' =\n        params.eventType === 'error' ? 'ERROR' : 'INFO';\n      this.appendDb(level, JSON.stringify(entry));\n      const obsPayload: {\n        agentId: string;\n        payload: unknown;\n        timestamp: string;\n        provider?: string;\n        endpoint?: string;\n        chatId?: string;\n        eventType?: string;\n      } = {\n        agentId: params.agentId,\n        payload: params.data ?? null,\n        timestamp: entry.timestamp,\n      };\n      if (params.provider) {\n        obsPayload.provider = params.provider;\n      }\n      if (params.endpoint) {\n        obsPayload.endpoint = params.endpoint;\n      }\n      if (params.chatId) {\n        obsPayload.chatId = params.chatId;\n      }\n      if (params.eventType) {\n        obsPayload.eventType = params.eventType;\n      }\n      this.pushObservability('stream', level, obsPayload);\n    }\n  }\n\n  private pushObservability(\n    channel: 'normal' | 'stream',\n    level: 'INFO' | 'WARN' | 'ERROR',\n    payload: {\n      agentId: string;\n      provider?: string;\n      endpoint?: string;\n      chatId?: string;\n      eventType?: string;\n      payload: any;\n      timestamp: string;\n    },\n  ) {\n    try {\n      if (!this.observability.isEnabled()) {\n        return;\n      }\n      const event: import('./ObservabilityDispatcher').ObservabilityEvent = {\n        timestamp: payload.timestamp,\n        channel,\n        level,\n        agentId: payload.agentId,\n        payload: payload.payload ?? null,\n      };\n      if (payload.provider) {\n        event.provider = payload.provider;\n      }\n      if (payload.endpoint) {\n        event.endpoint = payload.endpoint;\n      }\n      if (payload.chatId) {\n        event.chatId = payload.chatId;\n      }\n      if (payload.eventType) {\n        event.eventType = payload.eventType;\n      }\n      this.observability.enqueue(event);\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatLogService',\n        operation: 'pushObservabilityEvent',\n      });\n      logger.warn('[ChatLogService] 推送观测事件失败', error.toLogObject());\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/ChatProxyService.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 126. Maximum allowed is 100.","line":71,"column":1,"nodeType":"Program","messageId":"max","endLine":71,"endColumn":127},{"ruleId":"max-len","severity":1,"message":"This line has a length of 136. Maximum allowed is 100.","line":72,"column":1,"nodeType":"Program","messageId":"max","endLine":72,"endColumn":137},{"ruleId":"max-len","severity":1,"message":"This line has a length of 150. Maximum allowed is 100.","line":73,"column":1,"nodeType":"Program","messageId":"max","endLine":73,"endColumn":151},{"ruleId":"max-len","severity":1,"message":"This line has a length of 126. Maximum allowed is 100.","line":84,"column":1,"nodeType":"Program","messageId":"max","endLine":84,"endColumn":127},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":87,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":87,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2412,2414],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":120,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":120,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3321,3323],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":121,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":121,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3368,3370],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":122,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":122,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3422,3424],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":123,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":123,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3474,3476],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":127,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":127,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3673,3675],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":130,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":130,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3830,3832],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":137,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":137,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4048,4050],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":182,"column":1,"nodeType":"Program","messageId":"max","endLine":182,"endColumn":106},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":182,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":182,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":190,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":190,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5376,5378],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":191,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":191,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5438,5440],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":191,"column":68,"nodeType":"Literal","messageId":"noMagic","endLine":191,"endColumn":71},{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":247,"column":1,"nodeType":"Program","messageId":"max","endLine":247,"endColumn":106},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":247,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":247,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":250,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":250,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6973,6975],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":256,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":256,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7211,7213],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":256,"column":68,"nodeType":"Literal","messageId":"noMagic","endLine":256,"endColumn":71},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":273,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":273,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7710,7712],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":324,"column":1,"nodeType":"Program","messageId":"max","endLine":324,"endColumn":106},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":324,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":324,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":337,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":337,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9540,9542],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":353,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":353,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9977,9979],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":354,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":354,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10034,10036],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":387,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":387,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10790,10792],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":430,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":430,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11907,11909],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":470,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":470,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `FastGPTResponse | OpenAIResponse | AnthropicResponse | DifyResponse | ProviderResponseData`.","line":575,"column":53,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":575,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":583,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":583,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16018,16021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16018,16021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .chatId on an `any` value.","line":583,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":583,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `ReadableStream`.","line":702,"column":9,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":702,"endColumn":22},{"ruleId":"max-len","severity":1,"message":"This line has a length of 121. Maximum allowed is 100.","line":708,"column":1,"nodeType":"Program","messageId":"max","endLine":708,"endColumn":122},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":820,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":820,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[22399,22401],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":840,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":840,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[23033,23035],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":843,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":843,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[23110,23166],"text":"(delta?.reasoning_content ??\n      data.reasoning_content)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":844,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":844,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[23144,23190],"text":"(data.reasoning_content ??\n      data.reasoning)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":845,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":845,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[23191,23193],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"max-params","severity":1,"message":"Method 'dispatchFastGPTEvent' has too many parameters (7). Maximum allowed is 6.","line":861,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":861,"endColumn":31},{"ruleId":"complexity","severity":1,"message":"Method 'dispatchFastGPTEvent' has a complexity of 46. Maximum allowed is 18.","line":861,"column":31,"nodeType":"FunctionExpression","messageId":"complex","endLine":992,"endColumn":4},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":915,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":915,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[25381,25421],"text":"(payloadObj.name ?? payloadObj.moduleName)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":915,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":915,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[25400,25438],"text":"(payloadObj.moduleName ?? payloadObj.id)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":915,"column":80,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":915,"endColumn":82,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[25439,25441],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 103. Maximum allowed is 100.","line":954,"column":1,"nodeType":"Program","messageId":"max","endLine":954,"endColumn":104},{"ruleId":"max-params","severity":1,"message":"Async method 'handleStreamResponse' has too many parameters (7). Maximum allowed is 6.","line":997,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":997,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport type {\n  AgentConfig,\n  ChatMessage,\n  ChatOptions,\n  ChatResponse,\n  StreamStatus,\n  RequestHeaders,\n  JsonValue,\n} from '@/types';\nimport type {\n  FastGPTResponse,\n  FastGPTStreamChunk,\n  OpenAIResponse,\n  OpenAIStreamChunk,\n  AnthropicResponse,\n  AnthropicStreamChunk,\n  DifyResponse,\n  DifyStreamChunk,\n  DifyFile,\n  SSEEventData,\n  ReasoningPayload,\n} from '@/types/provider';\nimport type { AgentConfigService } from './AgentConfigService';\nimport { generateId, generateTimestamp } from '@/utils/helpers';\nimport { ChatLogService } from './ChatLogService';\n// import type { ProtectedRequestContext } from './ProtectionService'; // 已移除保护服务\n// import { getProtectionService } from './ProtectionService'; // 已移除保护服务\nimport logger from '@/utils/logger';\nimport {\n  getNormalizedEventKey,\n  isChatIdEvent,\n  isChunkLikeEvent,\n  isDatasetEvent,\n  isEndEvent,\n  isInteractiveEvent,\n  isReasoningEvent,\n  isStatusEvent,\n  isSummaryEvent,\n  isToolEvent,\n  isUsageEvent,\n} from '@/utils/fastgptEvents';\nimport { createErrorFromUnknown, ValidationError, ResourceError, ExternalServiceError } from '@/types/errors';\n\ninterface SSEParsedEvent {\n  event: string;\n  data: string;\n  id?: string;\n  retry?: number;\n}\n\n/**\n * AI 提供商请求数据格式（通用）\n */\nexport interface ProviderRequestData {\n  [key: string]: unknown; // 允许提供商特定字段\n}\n\n/**\n * AI 提供商响应数据格式（通用）\n */\nexport interface ProviderResponseData {\n  [key: string]: unknown;\n}\n\n/**\n * AI提供商适配器接口\n */\nexport interface AIProvider {\n  name: string;\n  transformRequest(messages: ChatMessage[], config: AgentConfig, stream: boolean, options?: ChatOptions): ProviderRequestData;\n  transformResponse(response: ProviderResponseData | FastGPTResponse | OpenAIResponse | AnthropicResponse | DifyResponse): ChatResponse;\n  transformStreamResponse(chunk: Record<string, JsonValue> | FastGPTStreamChunk | OpenAIStreamChunk | AnthropicStreamChunk | DifyStreamChunk): string;\n  validateConfig(config: AgentConfig): boolean;\n  buildHeaders(config: AgentConfig): RequestHeaders;\n}\n\n/**\n * FastGPT提供商适配器\n */\nexport class FastGPTProvider implements AIProvider {\n  name = 'FastGPT';\n\n  transformRequest(messages: ChatMessage[], config: AgentConfig, stream = false, options?: ChatOptions): ProviderRequestData {\n    const detail = options?.detail ?? config.features?.supportsDetail ?? false;\n    const request: ProviderRequestData = {\n      chatId: options?.chatId || `chat_${Date.now()}`,\n      stream: stream && config.features.streamingConfig.enabled,\n      detail,\n      messages: messages.map(msg => ({\n        role: msg.role,\n        content: msg.content,\n      })),\n    };\n\n    // 添加 FastGPT 特有参数支持\n    if (options?.variables) {\n      request.variables = options.variables;\n    }\n\n    if (options?.responseChatItemId) {\n      request.responseChatItemId = options.responseChatItemId;\n    }\n\n    // 添加系统消息\n    if (config.systemPrompt && Array.isArray(request.messages)) {\n      (request.messages as Array<{ role: string; content: string }>).unshift({\n        role: 'system',\n        content: config.systemPrompt,\n      });\n    }\n\n    logger.debug('FastGPT 请求数据', { request });\n    return request;\n  }\n\n  transformResponse(response: FastGPTResponse): ChatResponse {\n    const firstChoice = response.choices?.[0];\n    const result: ChatResponse = {\n      id: response.id || generateId(),\n      object: response.object || 'chat.completion',\n      created: response.created || generateTimestamp(),\n      model: response.model || 'fastgpt',\n      choices: response.choices && response.choices.length > 0 ? response.choices.map(choice => ({\n        index: choice.index,\n        message: {\n          role: (choice.message?.role || 'assistant') as 'user' | 'system' | 'assistant',\n          content: choice.message?.content ?? '',\n        },\n        finish_reason: choice.finish_reason || 'stop',\n      })) : [{\n        index: 0,\n        message: {\n          role: 'assistant' as const,\n          content: firstChoice?.message?.content ?? '',\n        },\n        finish_reason: firstChoice?.finish_reason || 'stop',\n      }],\n    };\n\n    if (response.usage) {\n      result.usage = {\n        prompt_tokens: response.usage.prompt_tokens ?? 0,\n        completion_tokens: response.usage.completion_tokens ?? 0,\n        total_tokens: response.usage.total_tokens ?? 0,\n      };\n    }\n\n    return result;\n  }\n\n  transformStreamResponse(chunk: FastGPTStreamChunk): string {\n    // FastGPT流式响应格式\n    if (chunk.choices?.[0]?.delta) {\n      return chunk.choices[0].delta.content ?? '';\n    }\n    return '';\n  }\n\n  validateConfig(config: AgentConfig): boolean {\n    return (\n      config.provider === 'fastgpt' &&\n      config.apiKey.startsWith('fastgpt-') &&\n      config.endpoint.includes('/chat/completions')\n    );\n  }\n\n  buildHeaders(config: AgentConfig): RequestHeaders {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${config.apiKey}`,\n    };\n  }\n}\n\n/**\n * OpenAI提供商适配器\n */\nexport class OpenAIProvider implements AIProvider {\n  name = 'OpenAI';\n\n  transformRequest(messages: ChatMessage[], config: AgentConfig, stream = false, options?: ChatOptions) {\n    return {\n      model: config.model,\n      messages: messages.map(msg => ({\n        role: msg.role,\n        content: msg.content,\n      })),\n      stream: stream && config.features.streamingConfig.enabled,\n      max_tokens: options?.maxTokens || config.maxTokens,\n      temperature: (options?.temperature || config.temperature) ?? 0.7,\n    };\n  }\n\n  transformResponse(response: OpenAIResponse): ChatResponse {\n    const result: ChatResponse = {\n      id: response.id || generateId(),\n      object: response.object || 'chat.completion',\n      created: response.created || generateTimestamp(),\n      model: response.model,\n      choices: response.choices.map((choice) => ({\n        index: choice.index,\n        message: {\n          role: choice.message.role as 'user' | 'system' | 'assistant',\n          content: choice.message.content,\n        },\n        finish_reason: choice.finish_reason,\n      })),\n    };\n\n    if (response.usage) {\n      result.usage = response.usage;\n    }\n\n    return result;\n  }\n\n  transformStreamResponse(chunk: OpenAIStreamChunk): string {\n    if (chunk.choices?.[0]?.delta) {\n      return chunk.choices[0].delta.content ?? '';\n    }\n    return '';\n  }\n\n  validateConfig(config: AgentConfig): boolean {\n    return (\n      config.provider === 'openai' &&\n      config.apiKey.startsWith('sk-') &&\n      config.endpoint.includes('openai.com')\n    );\n  }\n\n  buildHeaders(config: AgentConfig): RequestHeaders {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${config.apiKey}`,\n    };\n  }\n}\n\n/**\n * Anthropic提供商适配器\n */\nexport class AnthropicProvider implements AIProvider {\n  name = 'Anthropic';\n\n  transformRequest(messages: ChatMessage[], config: AgentConfig, stream = false, options?: ChatOptions) {\n    return {\n      model: config.model,\n      max_tokens: (options?.maxTokens || config.maxTokens) ?? '',\n      messages: messages.map(msg => ({\n        role: msg.role,\n        content: msg.content,\n      })),\n      stream: stream && config.features.streamingConfig.enabled,\n      temperature: (options?.temperature || config.temperature) ?? 0.7,\n    };\n  }\n\n  transformResponse(response: AnthropicResponse): ChatResponse {\n    const firstContent = response.content?.[0];\n    return {\n      id: response.id || generateId(),\n      object: 'chat.completion',\n      created: generateTimestamp(),\n      model: response.model,\n      choices: [{\n        index: 0,\n        message: {\n          role: 'assistant' as const,\n          content: firstContent?.text ?? '',\n        },\n        finish_reason: response.stop_reason || 'stop',\n      }],\n      usage: {\n        prompt_tokens: response.usage?.input_tokens ?? 0,\n        completion_tokens: response.usage?.output_tokens ?? 0,\n        total_tokens: (response.usage?.input_tokens ?? 0) + (response.usage?.output_tokens ?? 0),\n      },\n    };\n  }\n\n  transformStreamResponse(chunk: AnthropicStreamChunk): string {\n    if (chunk.type === 'content_block_delta' && chunk.delta) {\n      return chunk.delta.text ?? '';\n    }\n    return '';\n  }\n\n  validateConfig(config: AgentConfig): boolean {\n    return (\n      config.endpoint.includes('anthropic.com') &&\n      config.apiKey.startsWith('sk-ant-') &&\n      config.provider === 'anthropic'\n    );\n  }\n\n  buildHeaders(config: AgentConfig): RequestHeaders {\n    return {\n      'Content-Type': 'application/json',\n      'x-api-key': config.apiKey,\n      'anthropic-version': '2023-06-01',\n    };\n  }\n}\n\n/**\n * Dify 提供商适配器\n *\n * Dify API 规范:\n * - 端点: POST /v1/chat-messages\n * - 认证: Bearer {api_key}\n * - 请求格式: { query, response_mode, conversation_id, user, inputs, files }\n * - SSE 事件: message, message_end, message_file, error, ping\n */\nexport class DifyProvider implements AIProvider {\n  name = 'Dify';\n\n  /**\n   * 转换请求格式\n   *\n   * Dify 使用 query 字段而非 messages 数组，需要提取最后一条用户消息\n   */\n  transformRequest(messages: ChatMessage[], config: AgentConfig, stream = false, options?: ChatOptions) {\n    // 提取最后一条用户消息作为 query\n    const lastUserMessage = messages.filter(msg => msg.role === 'user').pop();\n    if (!lastUserMessage) {\n      throw new ValidationError({\n        message: 'Dify 请求必须包含至少一条用户消息',\n        code: 'MISSING_USER_MESSAGE',\n      });\n    }\n\n    const request: ProviderRequestData = {\n      query: lastUserMessage.content,\n      response_mode: stream && config.features.streamingConfig.enabled ? 'streaming' : 'blocking',\n      user: options?.userId || 'default-user',\n    };\n\n    // 添加会话 ID（Dify 使用 conversation_id）\n    if (options?.chatId) {\n      request.conversation_id = options.chatId;\n    }\n\n    // 添加输入变量（Dify 特有）\n    if (options?.variables) {\n      request.inputs = options.variables;\n    }\n\n    // 添加文件（Dify 特有）\n    if (options?.files && Array.isArray(options.files)) {\n      request.files = (options.files as Array<Partial<DifyFile>>).map((file) => ({\n        type: file.type || 'file',\n        transfer_method: file.transfer_method || 'remote_url',\n        url: file.url ?? '',\n      }));\n    }\n\n    logger.debug('Dify 请求数据', {\n      component: 'DifyProvider',\n      request,\n      originalMessagesCount: messages.length,\n    });\n\n    return request;\n  }\n\n  /**\n   * 转换响应格式\n   *\n   * Dify 响应格式转换为统一的 ChatResponse 格式\n   */\n  transformResponse(response: DifyResponse): ChatResponse {\n    return {\n      id: response.message_id || generateId(),\n      object: 'chat.completion',\n      created: response.created_at || generateTimestamp(),\n      model: response.mode || 'dify',\n      choices: [{\n        index: 0,\n        message: {\n          role: 'assistant',\n          content: response.answer ?? '',\n        },\n        finish_reason: 'stop',\n      }],\n      usage: response.metadata?.usage || {\n        prompt_tokens: 0,\n        completion_tokens: 0,\n        total_tokens: 0,\n      },\n      // Dify 特有元数据\n      metadata: {\n        conversation_id: response.conversation_id,\n        retriever_resources: response.metadata?.retriever_resources ?? [],\n      },\n    };\n  }\n\n  /**\n   * 转换流式响应\n   *\n   * Dify SSE 事件处理\n   */\n  transformStreamResponse(chunk: DifyStreamChunk): string {\n    // Dify 流式响应事件类型：message, message_end, message_file, error, ping\n    if (chunk.event === 'message' && chunk.answer) {\n      return chunk.answer;\n    }\n\n    // message_end 事件不返回内容，但包含元数据\n    if (chunk.event === 'message_end') {\n      logger.debug('Dify 消息结束', {\n        component: 'DifyProvider',\n        messageId: chunk.id,\n        conversationId: chunk.conversation_id,\n        metadata: chunk.metadata,\n      });\n    }\n\n    // error 事件\n    if (chunk.event === 'error') {\n      logger.error('Dify 流式响应错误', {\n        component: 'DifyProvider',\n        status: chunk.status,\n        code: chunk.code,\n        message: chunk.message,\n      });\n      throw new ExternalServiceError({\n        message: `Dify 错误: ${chunk.message || '未知错误'}`,\n        code: 'DIFY_STREAM_ERROR',\n        service: 'Dify',\n      });\n    }\n\n    // message_file 事件（文件消息）\n    if (chunk.event === 'message_file') {\n      logger.info('Dify 文件消息', {\n        component: 'DifyProvider',\n        type: chunk.type,\n        url: chunk.url,\n      });\n      // 可以在这里处理文件消息的特殊逻辑\n      return `[文件: ${chunk.type}]`;\n    }\n\n    // ping 事件用于保持连接，不返回内容\n    return '';\n  }\n\n  /**\n   * 验证配置\n   *\n   * Dify API Key 格式: app-xxx\n   */\n  validateConfig(config: AgentConfig): boolean {\n    const isValidProvider = config.provider === 'dify';\n    const hasValidApiKey = Boolean(config.apiKey && (config.apiKey.startsWith('app-') || config.apiKey.includes('dify')));\n    const hasValidEndpoint = Boolean(config.endpoint && config.endpoint.length > 0);\n\n    if (!isValidProvider) {\n      logger.warn('Dify 配置验证失败: provider 不匹配', {\n        component: 'DifyProvider',\n        provider: config.provider,\n      });\n    }\n    if (!hasValidApiKey) {\n      logger.warn('Dify 配置验证失败: API Key 格式不正确', {\n        component: 'DifyProvider',\n        apiKeyPrefix: config.apiKey?.substring(0, 4),\n      });\n    }\n    if (!hasValidEndpoint) {\n      logger.warn('Dify 配置验证失败: endpoint 缺失', {\n        component: 'DifyProvider',\n      });\n    }\n\n    return isValidProvider && hasValidApiKey && hasValidEndpoint;\n  }\n\n  /**\n   * 构建请求头\n   *\n   * Dify 使用 Bearer token 认证\n   */\n  buildHeaders(config: AgentConfig): RequestHeaders {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${config.apiKey}`,\n    };\n  }\n}\n\n/**\n * 聊天代理服务\n */\nexport class ChatProxyService {\n  private readonly agentService: AgentConfigService;\n  private readonly httpClient: ReturnType<typeof axios.create>;\n  private readonly providers: Map<string, AIProvider> = new Map();\n  private readonly chatLog: ChatLogService = new ChatLogService();\n  // private readonly protectionService = getProtectionService(); // 已移除保护服务\n\n  constructor(agentService: AgentConfigService) {\n    this.agentService = agentService;\n    this.httpClient = axios.create({\n      timeout: parseInt(process.env.REQUEST_TIMEOUT ?? '30000'),\n    });\n\n    // 注册提供商适配器\n    this.registerProvider(new FastGPTProvider());\n    this.registerProvider(new OpenAIProvider());\n    this.registerProvider(new AnthropicProvider());\n    this.registerProvider(new DifyProvider());\n  }\n\n  /**\n   * 注册提供商适配器\n   */\n  private registerProvider(provider: AIProvider): void {\n    this.providers.set(provider.name.toLowerCase(), provider);\n  }\n\n  /**\n   * 发送聊天消息（非流式）\n   */\n  async sendMessage(\n    agentId: string,\n    messages: ChatMessage[],\n    options?: ChatOptions,\n    // protectionContext?: ProtectedRequestContext, // 已移除保护服务\n  ): Promise<ChatResponse> {\n    const config = await this.agentService.getAgent(agentId);\n    if (!config) {\n      throw new ResourceError({\n        message: `智能体不存在: ${agentId}`,\n        code: 'AGENT_NOT_FOUND',\n        resourceType: 'agent',\n        resourceId: agentId,\n      });\n    }\n\n    if (!config.isActive) {\n      throw new ValidationError({\n        message: `智能体未激活: ${agentId}`,\n        code: 'AGENT_INACTIVE',\n      });\n    }\n\n    const provider = this.getProvider(config.provider);\n    if (!provider) {\n      throw new ValidationError({\n        message: `不支持的提供商: ${config.provider}`,\n        code: 'UNSUPPORTED_PROVIDER',\n      });\n    }\n\n    // 创建受保护的请求操作\n    const protectedOperation = async (): Promise<ChatResponse> => {\n      // 转换请求格式\n      const requestData = provider.transformRequest(messages, config, false, options);\n\n      // 构建请求头\n      const headers = provider.buildHeaders(config);\n\n      // 发送请求\n      const response = await this.httpClient.post(\n        config.endpoint,\n        requestData,\n        { headers },\n      );\n\n      // 转换响应格式并记录日志\n      const normalized = provider.transformResponse(response.data);\n      try {\n        this.chatLog.logCompletion({\n          agentId,\n          provider: config.provider,\n          endpoint: config.endpoint,\n          requestMeta: {\n            messagesCount: Array.isArray(messages) ? messages.length : 0,\n            chatId: (requestData as any)?.chatId,\n          },\n          rawResponse: response.data,\n          normalizedResponse: normalized,\n        });\n      } catch {\n        // 忽略日志记录错误\n      }\n      return normalized;\n    };\n\n    try {\n      // 简化版本：直接执行请求，移除保护机制\n      return await protectedOperation();\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatProxyService',\n        operation: 'sendMessage',\n      });\n      logger.error('智能体请求失败', { agentId, ...error.toLogObject() });\n      throw new ExternalServiceError({\n        message: `智能体请求失败: ${error.message}`,\n        code: 'AGENT_REQUEST_FAILED',\n        service: config.provider,\n        originalError: error,\n      });\n    }\n  }\n\n  /**\n   * 发送流式聊天消息\n   */\n  async sendStreamMessage(\n    agentId: string,\n    messages: ChatMessage[],\n    onChunk: (chunk: string) => void,\n    onStatus: (status: StreamStatus) => void,\n    options?: ChatOptions,\n    onEvent?: (eventName: string, data: SSEEventData) => void,\n    // protectionContext?: ProtectedRequestContext, // 已移除保护服务\n  ): Promise<void> {\n    const config = await this.agentService.getAgent(agentId);\n    if (!config) {\n      throw new ResourceError({\n        message: `智能体不存在: ${agentId}`,\n        code: 'AGENT_NOT_FOUND',\n        resourceType: 'agent',\n        resourceId: agentId,\n      });\n    }\n\n    if (!config.isActive) {\n      throw new ValidationError({\n        message: `智能体未激活: ${agentId}`,\n        code: 'AGENT_INACTIVE',\n      });\n    }\n\n    if (!config.features.streamingConfig.enabled) {\n      throw new ValidationError({\n        message: `智能体不支持流式响应: ${agentId}`,\n        code: 'STREAM_NOT_SUPPORTED',\n      });\n    }\n\n    const provider = this.getProvider(config.provider);\n    if (!provider) {\n      throw new ValidationError({\n        message: `不支持的提供商: ${config.provider}`,\n        code: 'UNSUPPORTED_PROVIDER',\n      });\n    }\n\n    // 创建受保护的流式请求操作\n    const protectedOperation = async (): Promise<void> => {\n      // 转换请求格式\n      const requestData = provider.transformRequest(messages, config, true, options);\n\n      // 构建请求头\n      const headers = provider.buildHeaders(config);\n\n      // 在发送请求前，将本次使用的 chatId 透传给上层（用于交互节点继续运行复用 chatId）\n      let usedChatId: string | undefined;\n      try {\n        usedChatId = (requestData as Record<string, unknown>)?.chatId as string | undefined;\n        if (usedChatId) {\n          // 记录 chatId 事件\n          try {\n            this.chatLog.logStreamEvent({\n              agentId,\n              chatId: usedChatId,\n              provider: config.provider,\n              endpoint: config.endpoint,\n              eventType: 'chatId',\n              data: { chatId: usedChatId },\n            });\n          } catch (logError) {\n            // 日志记录失败不影响主流程\n            logger.warn('[ChatProxyService] chatId 日志记录失败:', logError);\n          }\n          onEvent?.('chatId', { chatId: usedChatId });\n        }\n      } catch (chatIdError) {\n        // chatId 提取失败不影响主流程\n        logger.warn('[ChatProxyService] chatId 提取失败:', chatIdError);\n      }\n\n      // 发送流式请求\n      const response = await this.httpClient.post(\n        config.endpoint,\n        requestData,\n        {\n          headers,\n          responseType: 'stream',\n        },\n      );\n\n      // 处理流式响应\n      await this.handleStreamResponse(\n        response.data,\n        provider,\n        config,\n        onChunk,\n        onStatus,\n        onEvent,\n        { agentId, endpoint: config.endpoint, provider: config.provider, ...(usedChatId ? { chatId: usedChatId } : {}) },\n      );\n    };\n\n    try {\n      // 直接执行流式请求（简化版本）\n      await protectedOperation();\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatProxyService',\n        operation: 'sendStreamMessage',\n      });\n      logger.error('智能体流式请求失败', { agentId, ...error.toLogObject() });\n      onStatus?.({\n        type: 'error',\n        status: 'error',\n        error: error.message,\n      });\n      throw new ExternalServiceError({\n        message: `智能体流式请求失败: ${error.message}`,\n        code: 'AGENT_STREAM_REQUEST_FAILED',\n        service: config.provider,\n        originalError: error,\n      });\n    }\n  }\n\n  private findNextEventBoundary(buffer: string): { index: number; length: number } | null {\n    const lfIndex = buffer.indexOf('\\n\\n');\n    const crlfIndex = buffer.indexOf('\\r\\n\\r\\n');\n\n    if (lfIndex === -1 && crlfIndex === -1) {\n      return null;\n    }\n\n    if (lfIndex === -1) {\n      return { index: crlfIndex, length: 4 };\n    }\n\n    if (crlfIndex === -1) {\n      return { index: lfIndex, length: 2 };\n    }\n\n    return crlfIndex < lfIndex\n      ? { index: crlfIndex, length: 4 }\n      : { index: lfIndex, length: 2 };\n  }\n\n  private parseSSEEventBlock(rawBlock: string): SSEParsedEvent | null {\n    const lines = rawBlock.split(/\\r?\\n/);\n    let event = '';\n    const dataLines: string[] = [];\n    let id: string | undefined;\n    let retry: number | undefined;\n\n    for (const line of lines) {\n      if (!line || line.startsWith(':')) {\n        continue;\n      }\n\n      const separatorIndex = line.indexOf(':');\n      const field = separatorIndex === -1 ? line : line.slice(0, separatorIndex);\n      let value = separatorIndex === -1 ? '' : line.slice(separatorIndex + 1);\n      if (value.startsWith(' ')) {\n        value = value.slice(1);\n      }\n\n      switch (field) {\n        case 'event':\n          event = value.trim();\n          break;\n        case 'data':\n          dataLines.push(value);\n          break;\n        case 'id':\n          id = value.trim();\n          break;\n        case 'retry': {\n          const parsedRetry = parseInt(value, 10);\n          if (!Number.isNaN(parsedRetry)) {\n            retry = parsedRetry;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n\n    const data = dataLines.join('\\n');\n    if (!event && !data) {\n      return null;\n    }\n\n    const result: SSEParsedEvent = { event, data };\n    if (typeof id === 'string') {\n      result.id = id;\n    }\n    if (typeof retry === 'number') {\n      result.retry = retry;\n    }\n\n    return result;\n  }\n\n  private logStreamEvent(\n    ctx: { agentId: string; chatId?: string; endpoint: string; provider: string } | undefined,\n    eventType: string,\n    data: SSEEventData,\n  ): void {\n    try {\n      this.chatLog.logStreamEvent({\n        agentId: ctx?.agentId || 'unknown',\n        ...(ctx?.provider ? { provider: ctx.provider } : {}),\n        ...(ctx?.endpoint ? { endpoint: ctx.endpoint } : {}),\n        ...(ctx?.chatId ? { chatId: ctx.chatId } : {}),\n        eventType,\n        data,\n      });\n    } catch {\n      // 忽略WebSocket发送错误\n    }\n  }\n\n  private extractReasoningPayload(data: Record<string, JsonValue> | null): ReasoningPayload {\n    if (!data || typeof data !== 'object') {\n      return null;\n    }\n\n    // 尝试从不同的可能位置提取推理内容\n    const choices = data.choices as Array<Record<string, JsonValue>> | undefined;\n    const firstChoice = choices?.[0];\n    const delta = (firstChoice?.delta || data.delta) as Record<string, JsonValue> | undefined;\n\n    return (\n      delta?.reasoning_content ||\n      data.reasoning_content ||\n      data.reasoning ||\n      null\n    ) as ReasoningPayload;\n  }\n\n  /**\n   * 分发FastGPT事件到相应的回调函数\n   *\n   * @param provider AI提供商适配器\n   * @param eventName 事件名称\n   * @param payload 事件数据\n   * @param onChunk 内容块回调函数\n   * @param onStatus 状态回调函数\n   * @param onEvent 通用事件回调函数\n   * @param ctx 上下文信息\n   */\n  private dispatchFastGPTEvent(\n    provider: AIProvider,\n    eventName: string,\n    payload: Record<string, JsonValue> | string | null,\n    onChunk: (chunk: string) => void,\n    onStatus?: (status: StreamStatus) => void,\n    onEvent?: (eventName: string, data: SSEEventData) => void,\n    ctx?: { agentId: string; chatId?: string; endpoint: string; provider: string },\n  ): void {\n    const payloadEvent = (typeof payload === 'object' && payload !== null && 'event' in payload)\n      ? payload.event\n      : '';\n    const resolvedEvent = (eventName || (typeof payloadEvent === 'string' ? payloadEvent : '') || '').trim();\n    const eventKey = getNormalizedEventKey(resolvedEvent || 'message');\n\n    const emitEvent = (name: string, data: SSEEventData) => {\n      if (!onEvent) {\n        return;\n      }\n      try {\n        onEvent(name, data);\n      } catch (emitError) {\n        logger.warn('事件回调执行失败', { error: emitError });\n      }\n    };\n\n    // 处理chatId事件\n    if (isChatIdEvent(resolvedEvent)) {\n      this.logStreamEvent(ctx, 'chatId', payload);\n      emitEvent('chatId', payload);\n      return;\n    }\n\n    // 处理交互事件\n    if (isInteractiveEvent(resolvedEvent)) {\n      this.logStreamEvent(ctx, 'interactive', payload);\n      emitEvent('interactive', payload);\n      return;\n    }\n\n    // 处理流程响应事件\n    if (eventKey === getNormalizedEventKey('flowResponses')) {\n      this.logStreamEvent(ctx, 'flowResponses', payload);\n      onStatus?.({ type: 'progress', status: 'completed', moduleName: '执行完成' });\n      emitEvent(resolvedEvent || 'flowResponses', payload);\n      return;\n    }\n\n    // 处理状态事件\n    if (isStatusEvent(resolvedEvent)) {\n      const payloadObj = (typeof payload === 'object' && payload !== null) ? payload : {};\n      const statusEvent: StreamStatus = {\n        type: 'flowNodeStatus',\n        status: ((payloadObj.status as string) ?? 'running') as StreamStatus['status'],\n        moduleName: (payloadObj.name || payloadObj.moduleName || payloadObj.id || '未知模块') as string,\n      };\n      this.logStreamEvent(ctx, 'flowNodeStatus', payload);\n      onStatus?.(statusEvent);\n      emitEvent(resolvedEvent || 'flowNodeStatus', payload);\n      return;\n    }\n\n    // 处理answer事件 - 这是主要的内容流\n    if (eventKey === getNormalizedEventKey('answer')) {\n      const payloadObj = (typeof payload === 'object' && payload !== null) ? payload : {};\n      const choices = payloadObj.choices as Array<Record<string, JsonValue>> | undefined;\n      const delta = (choices?.[0])?.delta as Record<string, JsonValue> | undefined;\n      const answerContent = (delta?.content ?? payloadObj.content ?? '') as string;\n\n      if (answerContent) {\n        this.logStreamEvent(ctx, 'answer', payload);\n        onChunk(answerContent);\n      }\n\n      const reasoningContent = this.extractReasoningPayload(payloadObj);\n      if (reasoningContent) {\n        const reasoningData = typeof reasoningContent === 'object' && reasoningContent !== null\n          ? reasoningContent\n          : { content: reasoningContent };\n        this.logStreamEvent(ctx, 'reasoning', reasoningData);\n        emitEvent('reasoning', reasoningData);\n      }\n      return; // 重要：直接返回，避免后续的兜底处理\n    }\n\n    // 处理推理事件\n    if (isReasoningEvent(resolvedEvent)) {\n      this.logStreamEvent(ctx, 'reasoning', payload);\n      emitEvent('reasoning', { event: resolvedEvent || 'reasoning', data: payload });\n      return;\n    }\n\n    // 处理数据集、摘要、工具事件\n    if (isDatasetEvent(resolvedEvent) || isSummaryEvent(resolvedEvent) || isToolEvent(resolvedEvent)) {\n      this.logStreamEvent(ctx, resolvedEvent || 'event', payload);\n      emitEvent(resolvedEvent || 'event', payload);\n      return;\n    }\n\n    // 处理使用量事件\n    if (isUsageEvent(resolvedEvent)) {\n      this.logStreamEvent(ctx, 'usage', payload);\n      emitEvent('usage', payload);\n      return;\n    }\n\n    // 处理结束事件\n    if (isEndEvent(resolvedEvent)) {\n      this.logStreamEvent(ctx, resolvedEvent || 'end', payload);\n      onStatus?.({ type: 'complete', status: 'completed' });\n      emitEvent(resolvedEvent || 'end', payload);\n      return;\n    }\n\n    // 兜底处理：只处理非answer事件，避免重复处理\n    if (eventKey !== getNormalizedEventKey('answer')) {\n      // 将 payload 转换为提供商期望的格式\n      const chunkData = (typeof payload === 'object' && payload !== null)\n        ? payload\n        : {} as Record<string, JsonValue>;\n      const transformed = provider.transformStreamResponse(chunkData);\n      if (transformed) {\n        this.logStreamEvent(ctx, 'chunk', transformed);\n        onChunk(transformed);\n      }\n    }\n\n    // 发送未识别的事件\n    if (resolvedEvent && !isChunkLikeEvent(resolvedEvent)) {\n      emitEvent(resolvedEvent, payload);\n    }\n  }\n\n  /**\n   * 处理流式响应 - 兼容 FastGPT 全事件并支持多行 data\n   */\n  private async handleStreamResponse(\n    stream: NodeJS.ReadableStream,\n    provider: AIProvider,\n    config: AgentConfig,\n    onChunk: (chunk: string) => void,\n    onStatus?: (status: StreamStatus) => void,\n    onEvent?: (eventName: string, data: SSEEventData) => void,\n    ctx?: { agentId: string; chatId?: string; endpoint: string; provider: string },\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      let buffer = '';\n      let completed = false;\n\n      logger.debug('开始处理流式响应', { provider: config.provider });\n\n      const flushEventBlock = (rawBlock: string) => {\n        const parsed = this.parseSSEEventBlock(rawBlock.replace(/\\r/g, ''));\n        if (!parsed) {\n          return;\n        }\n\n        const rawData = parsed.data;\n        if (!rawData) {\n          return;\n        }\n\n        if (rawData.trim() === '[DONE]') {\n          if (completed) {\n            return;\n          }\n          completed = true;\n          logger.debug('流式响应完成 [DONE]');\n          this.logStreamEvent(ctx, 'complete', { done: true });\n          onStatus?.({ type: 'complete', status: 'completed' });\n          resolve();\n          return;\n        }\n\n        let payload: Record<string, JsonValue> | string = rawData;\n        if (typeof rawData === 'string') {\n          const trimmed = rawData.trim();\n          if (trimmed.startsWith('{') || trimmed.startsWith('[')) {\n            try {\n              payload = JSON.parse(rawData) as Record<string, JsonValue>;\n            } catch (parseError) {\n              logger.warn('解析 SSE 数据失败', { parseError, rawData });\n              payload = rawData;\n            }\n          }\n        }\n\n        this.dispatchFastGPTEvent(provider, parsed.event, payload, onChunk, onStatus, onEvent, ctx);\n      };\n\n      stream.on('data', (chunk: Buffer) => {\n        buffer += chunk.toString();\n\n        let boundary: { index: number; length: number } | null;\n        while ((boundary = this.findNextEventBoundary(buffer)) !== null) {\n          const rawBlock = buffer.slice(0, boundary.index);\n          buffer = buffer.slice(boundary.index + boundary.length);\n\n          if (rawBlock.trim().length === 0) {\n            continue;\n          }\n\n          flushEventBlock(rawBlock);\n        }\n      });\n\n      stream.on('end', () => {\n        if (buffer.trim().length > 0) {\n          flushEventBlock(buffer);\n          buffer = '';\n        }\n\n        if (!completed) {\n          completed = true;\n          logger.debug('流式响应结束');\n          this.logStreamEvent(ctx, 'complete', { ended: true });\n          onStatus?.({ type: 'complete', status: 'completed' });\n          resolve();\n        }\n      });\n\n      stream.on('error', (error: Error) => {\n        logger.error('流式响应错误', { error });\n        this.logStreamEvent(ctx, 'error', { message: error.message });\n        onStatus?.({ type: 'error', status: 'error', error: error.message });\n        if (!completed) {\n          completed = true;\n          reject(error);\n        }\n      });\n    });\n  }\n\n  /**\n   * 获取提供商适配器\n   */\n  private getProvider(providerName: string): AIProvider | undefined {\n    return this.providers.get(providerName.toLowerCase());\n  }\n\n  /**\n   * 验证智能体配置\n   */\n  async validateAgentConfig(agentId: string): Promise<boolean> {\n    const config = await this.agentService.getAgent(agentId);\n    if (!config) {\n      return false;\n    }\n\n    const provider = this.getProvider(config.provider);\n    if (!provider) {\n      return false;\n    }\n\n    return provider.validateConfig(config);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/ChatService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":76,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":76,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1898,1900],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'getSessionHistory' has no 'await' expression.","line":141,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":141,"endColumn":26},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'searchMessages' has no 'await' expression.","line":159,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":159,"endColumn":23},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'clearCache' has no 'await' expression.","line":181,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":181,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'messages' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":204,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":204,"endColumn":36},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":236,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":236,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6017,6019],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ChatService - 聊天服务适配器\n *\n * 为测试和旧代码提供向后兼容的ChatService接口\n * 实际功能委托给ChatProxyService和ChatSessionService\n */\n\nimport { ChatProxyService } from './ChatProxyService';\nimport { ChatSessionService } from './ChatSessionService';\nimport type { AgentConfigService } from './AgentConfigService';\nimport { createErrorFromUnknown } from '@/types/errors';\nimport type { ChatResponse as APIChatResponse } from '@/types';\nimport logger from '@/utils/logger';\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp?: Date;\n}\n\nexport interface ProcessMessageOptions {\n  sessionId: string;\n  message: string;\n  userId: string;\n  agentId: string;\n  stream?: boolean;\n  attachments?: Array<{\n    type: string;\n    url: string;\n  }>;\n}\n\nexport interface ChatResponse {\n  content: string;\n  messageId?: string;\n  sessionId: string;\n  timestamp: Date;\n}\n\n/**\n * ChatService类 - 聊天服务适配器\n */\nexport class ChatService {\n  private readonly chatProxy: ChatProxyService;\n  private readonly sessionService: ChatSessionService;\n\n  constructor(\n    private readonly agentService: AgentConfigService,\n  ) {\n    this.chatProxy = new ChatProxyService(agentService);\n    this.sessionService = new ChatSessionService();\n  }\n\n  /**\n   * 处理消息\n   */\n  async processMessage(options: ProcessMessageOptions): Promise<ChatResponse> {\n    const { sessionId, message, userId, agentId, stream: _stream = false, attachments } = options;\n\n    try {\n      logger.info('[ChatService] 处理消息', {\n        sessionId,\n        userId,\n        agentId,\n        messageLength: message.length,\n        hasAttachments: !!attachments?.length,\n      });\n\n      // 调用代理服务\n      const response: APIChatResponse = await this.chatProxy.sendMessage(\n        agentId,\n        [{ role: 'user', content: message }],\n      );\n\n      // 从 OpenAI 格式响应中提取内容\n      const content = response.choices?.[0]?.message?.content || 'AI response';\n\n      // 保存消息到会话 (模拟)\n      const result: ChatResponse = {\n        content,\n        messageId: `msg-${Date.now()}`,\n        sessionId,\n        timestamp: new Date(),\n      };\n\n      logger.info('[ChatService] 消息处理完成', {\n        sessionId,\n        responseLength: result.content.length,\n      });\n\n      return result;\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatService',\n        operation: 'processMessage',\n      });\n      logger.error('[ChatService] 消息处理失败', error.toLogObject());\n      throw error;\n    }\n  }\n\n  /**\n   * 流式处理消息\n   */\n  async processStreamMessage(\n    options: ProcessMessageOptions,\n    onChunk: (chunk: string) => void,\n  ): Promise<void> {\n    const { sessionId, message, userId, agentId } = options;\n\n    try {\n      logger.info('[ChatService] 流式处理消息', { sessionId, userId, agentId });\n\n      const messages: ChatMessage[] = [\n        { role: 'user', content: message },\n      ];\n\n      await this.chatProxy.sendStreamMessage(\n        agentId,\n        messages.map(m => ({ role: m.role, content: m.content })),\n        onChunk,\n        (status) => {\n          logger.debug('[ChatService] Stream status:', status);\n        },\n      );\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatService',\n        operation: 'processStreamMessage',\n      });\n      logger.error('[ChatService] 流式处理失败', error.toLogObject());\n      throw error;\n    }\n  }\n\n  /**\n   * 获取会话历史\n   */\n  async getSessionHistory(sessionId: string, limit?: number): Promise<ChatMessage[]> {\n    try {\n      // 这里应该从数据库获取，暂时返回空数组\n      logger.info('[ChatService] 获取会话历史', { sessionId, limit });\n      return [];\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatService',\n        operation: 'getSessionHistory',\n      });\n      logger.error('[ChatService] 获取历史失败', error.toLogObject());\n      throw error;\n    }\n  }\n\n  /**\n   * 搜索消息\n   */\n  async searchMessages(query: string, options?: {\n    sessionId?: string;\n    userId?: string;\n    limit?: number;\n  }): Promise<ChatMessage[]> {\n    try {\n      logger.info('[ChatService] 搜索消息', { query, options });\n      // 暂时返回空数组\n      return [];\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatService',\n        operation: 'searchMessages',\n      });\n      logger.error('[ChatService] 搜索失败', error.toLogObject());\n      throw error;\n    }\n  }\n\n  /**\n   * 清除缓存\n   */\n  async clearCache(sessionId: string): Promise<void> {\n    try {\n      logger.info('[ChatService] 清除缓存', { sessionId });\n      // 实际实现应该清除Redis缓存\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatService',\n        operation: 'clearCache',\n      });\n      logger.error('[ChatService] 清除缓存失败', error.toLogObject());\n      throw error;\n    }\n  }\n\n  /**\n   * 流式响应生成器\n   */\n  async *streamResponse(options: ProcessMessageOptions): AsyncGenerator<string, void, unknown> {\n    const { sessionId, message, userId, agentId } = options;\n\n    try {\n      logger.info('[ChatService] 流式响应生成器', { sessionId, userId, agentId });\n\n      const messages: ChatMessage[] = [\n        { role: 'user', content: message },\n      ];\n\n      // 模拟流式响应\n      const chunks = ['Hello', ' ', 'from', ' ', 'AI'];\n      for (const chunk of chunks) {\n        yield chunk;\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ChatService',\n        operation: 'streamResponse',\n      });\n      logger.error('[ChatService] 流式响应失败', error.toLogObject());\n      throw error;\n    }\n  }\n\n  /**\n   * 发送消息（向后兼容方法）\n   */\n  async sendMessage(options: {\n    sessionId: string;\n    message: string;\n    agentId: string;\n    userId?: string;\n  }): Promise<ChatResponse> {\n    return this.processMessage({\n      ...options,\n      userId: options.userId || 'system',\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/ChatSessionService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'settings' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":448,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":448,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":450,"column":33,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":450,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .total_sessions on an `any` value.","line":450,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":450,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":451,"column":34,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":451,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .active_sessions on an `any` value.","line":451,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":451,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":452,"column":36,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":452,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .archived_sessions on an `any` value.","line":452,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":452,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":453,"column":33,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":453,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .total_messages on an `any` value.","line":453,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":453,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":454,"column":31,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":454,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .total_tokens on an `any` value.","line":454,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":454,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":471,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":471,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11527,11530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11527,11530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":473,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":473,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":473,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":473,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":474,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":474,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user_id on an `any` value.","line":474,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":474,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":475,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":475,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agent_id on an `any` value.","line":475,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":475,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":476,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":476,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":476,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":476,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":477,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":477,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .messages on an `any` value.","line":477,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":477,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":478,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":478,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .context on an `any` value.","line":478,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":478,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":479,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":479,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .settings on an `any` value.","line":479,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":479,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":480,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":480,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message_count on an `any` value.","line":480,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":480,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":481,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":481,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .token_usage on an `any` value.","line":481,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":481,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":482,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":482,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .avg_response_time on an `any` value.","line":482,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":482,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":483,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":483,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":483,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":483,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":484,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":484,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .created_at on an `any` value.","line":484,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":484,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":485,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":485,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .updated_at on an `any` value.","line":485,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":485,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":486,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":486,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .last_message_at on an `any` value.","line":486,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":486,"endColumn":41}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 聊天会话服务\n * 提供会话CRUD、消息管理、搜索功能\n *\n * 功能：\n * - 创建/获取/更新/删除会话\n * - 添加消息到会话\n * - 全文搜索会话\n * - 会话归档和软删除\n */\n\nimport { getPool } from '@/utils/db';\nimport logger from '@/utils/logger';\n\n/**\n * 聊天消息接口\n */\nexport interface ChatMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * 聊天会话接口\n */\nexport interface ChatSession {\n  id: string;\n  userId: number;\n  agentId: string;\n  title: string;\n  messages: ChatMessage[];\n  context?: Record<string, unknown>;\n  settings?: Record<string, unknown>;\n  messageCount: number;\n  tokenUsage: number;\n  avgResponseTime: number;\n  status: 'active' | 'archived' | 'deleted';\n  createdAt: Date;\n  updatedAt: Date;\n  lastMessageAt?: Date;\n}\n\n/**\n * 创建会话参数\n */\nexport interface CreateSessionParams {\n  userId: number;\n  agentId: string;\n  title?: string;\n  context?: Record<string, unknown>;\n  settings?: Record<string, unknown>;\n}\n\n/**\n * 聊天会话服务类\n */\nexport class ChatSessionService {\n  /**\n   * 创建新会话\n   *\n   * @param params - 会话创建参数\n   * @returns 新创建的会话\n   */\n  async createSession(params: CreateSessionParams): Promise<ChatSession> {\n    const { userId, agentId, title = '新对话', context, settings } = params;\n\n    try {\n      const result = await getPool().query(\n        `INSERT INTO chat_sessions\n         (user_id, agent_id, title)\n         VALUES ($1, $2, $3)\n         RETURNING *`,\n        [userId, agentId, title],\n      );\n\n      const session = this.mapRowToSession(result.rows[0]);\n\n      logger.info('ChatSession created', {\n        sessionId: session.id,\n        userId,\n        agentId,\n        title,\n      });\n\n      return session;\n    } catch (err) {\n      logger.error('Failed to create chat session', {\n        error: (err as Error).message,\n        userId,\n        agentId,\n      });\n      throw new Error(`Failed to create chat session: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 获取用户的所有会话\n   *\n   * @param userId - 用户ID\n   * @param agentId - 可选：智能体ID（过滤）\n   * @returns 会话列表\n   */\n  async getUserSessions(userId: number, agentId?: string): Promise<ChatSession[]> {\n    try {\n      const query = agentId\n        ? `SELECT * FROM chat_sessions\n           WHERE user_id = $1 AND agent_id = $2 AND status = 'active'\n           ORDER BY updated_at DESC`\n        : `SELECT * FROM chat_sessions\n           WHERE user_id = $1 AND status = 'active'\n           ORDER BY updated_at DESC`;\n\n      const params = agentId ? [userId, agentId] : [userId];\n      const result = await getPool().query(query, params);\n\n      return result.rows.map(row => this.mapRowToSession(row));\n    } catch (err) {\n      logger.error('Failed to get user sessions', {\n        error: (err as Error).message,\n        userId,\n        agentId,\n      });\n      throw new Error(`Failed to fetch sessions: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 获取单个会话\n   *\n   * @param sessionId - 会话ID\n   * @param userId - 用户ID（权限验证）\n   * @returns 会话详情\n   */\n  async getSession(sessionId: string, userId: number): Promise<ChatSession | null> {\n    try {\n      const result = await getPool().query(\n        `SELECT * FROM chat_sessions\n         WHERE id = $1 AND user_id = $2`,\n        [sessionId, userId],\n      );\n\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      return this.mapRowToSession(result.rows[0]);\n    } catch (err) {\n      logger.error('Failed to get session', {\n        error: (err as Error).message,\n        sessionId,\n        userId,\n      });\n      throw new Error(`Failed to get session: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 添加消息到会话\n   *\n   * @param sessionId - 会话ID\n   * @param message - 消息内容\n   */\n  async addMessage(sessionId: string, message: ChatMessage): Promise<void> {\n    try {\n      await getPool().query(\n        `UPDATE chat_sessions\n         SET messages = messages || $1::jsonb,\n             message_count = message_count + 1,\n             last_message_at = CURRENT_TIMESTAMP\n         WHERE id = $2`,\n        [JSON.stringify(message), sessionId],\n      );\n\n      logger.debug('Message added to session', {\n        sessionId,\n        role: message.role,\n        contentLength: message.content.length,\n      });\n    } catch (err) {\n      logger.error('Failed to add message', {\n        error: (err as Error).message,\n        sessionId,\n      });\n      throw new Error(`Failed to add message: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 批量添加消息（性能优化）\n   *\n   * @param sessionId - 会话ID\n   * @param messages - 消息数组\n   */\n  async addMessages(sessionId: string, messages: ChatMessage[]): Promise<void> {\n    if (messages.length === 0) {\n      return;\n    }\n\n    try {\n      const messagesJson = JSON.stringify(messages);\n      await getPool().query(\n        `UPDATE chat_sessions\n         SET messages = messages || $1::jsonb,\n             message_count = message_count + $2,\n             last_message_at = CURRENT_TIMESTAMP\n         WHERE id = $3`,\n        [messagesJson, messages.length, sessionId],\n      );\n\n      logger.debug('Messages batch added to session', {\n        sessionId,\n        count: messages.length,\n      });\n    } catch (err) {\n      logger.error('Failed to add messages batch', {\n        error: (err as Error).message,\n        sessionId,\n        count: messages.length,\n      });\n      throw new Error(`Failed to add messages: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 更新会话标题\n   *\n   * @param sessionId - 会话ID\n   * @param userId - 用户ID（权限验证）\n   * @param title - 新标题\n   */\n  async updateSessionTitle(sessionId: string, userId: number, title: string): Promise<void> {\n    try {\n      const result = await getPool().query(\n        `UPDATE chat_sessions\n         SET title = $1\n         WHERE id = $2 AND user_id = $3\n         RETURNING id`,\n        [title, sessionId, userId],\n      );\n\n      if (result.rows.length === 0) {\n        throw new Error('Session not found or access denied');\n      }\n\n      logger.info('Session title updated', {\n        sessionId,\n        userId,\n        title,\n      });\n    } catch (err) {\n      logger.error('Failed to update session title', {\n        error: (err as Error).message,\n        sessionId,\n        userId,\n      });\n      throw new Error(`Failed to update session: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 删除会话（软删除）\n   *\n   * @param sessionId - 会话ID\n   * @param userId - 用户ID（权限验证）\n   */\n  async deleteSession(sessionId: string, userId: number): Promise<void> {\n    try {\n      const result = await getPool().query(\n        `UPDATE chat_sessions\n         SET status = 'deleted'\n         WHERE id = $1 AND user_id = $2\n         RETURNING id`,\n        [sessionId, userId],\n      );\n\n      if (result.rows.length === 0) {\n        throw new Error('Session not found or access denied');\n      }\n\n      logger.info('Session deleted', {\n        sessionId,\n        userId,\n      });\n    } catch (err) {\n      logger.error('Failed to delete session', {\n        error: (err as Error).message,\n        sessionId,\n        userId,\n      });\n      throw new Error(`Failed to delete session: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 归档会话\n   *\n   * @param sessionId - 会话ID\n   * @param userId - 用户ID（权限验证）\n   */\n  async archiveSession(sessionId: string, userId: number): Promise<void> {\n    try {\n      const result = await getPool().query(\n        `UPDATE chat_sessions\n         SET status = 'archived'\n         WHERE id = $1 AND user_id = $2\n         RETURNING id`,\n        [sessionId, userId],\n      );\n\n      if (result.rows.length === 0) {\n        throw new Error('Session not found or access denied');\n      }\n\n      logger.info('Session archived', {\n        sessionId,\n        userId,\n      });\n    } catch (err) {\n      logger.error('Failed to archive session', {\n        error: (err as Error).message,\n        sessionId,\n        userId,\n      });\n      throw new Error(`Failed to archive session: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 全文搜索会话\n   *\n   * @param userId - 用户ID\n   * @param query - 搜索关键词\n   * @param limit - 返回结果数量限制\n   * @returns 搜索结果（按相关性排序）\n   */\n  async searchSessions(userId: number, query: string, limit = 20): Promise<ChatSession[]> {\n    if (!query || query.trim().length === 0) {\n      return [];\n    }\n\n    try {\n      const result = await getPool().query(\n        `SELECT *,\n         ts_rank(search_vector, plainto_tsquery('english', $2)) as rank\n         FROM chat_sessions\n         WHERE user_id = $1\n           AND status = 'active'\n           AND search_vector @@ plainto_tsquery('english', $2)\n         ORDER BY rank DESC, updated_at DESC\n         LIMIT $3`,\n        [userId, query, limit],\n      );\n\n      logger.info('Sessions searched', {\n        userId,\n        query,\n        results: result.rows.length,\n      });\n\n      return result.rows.map(row => this.mapRowToSession(row));\n    } catch (err) {\n      logger.error('Failed to search sessions', {\n        error: (err as Error).message,\n        userId,\n        query,\n      });\n      throw new Error(`Failed to search sessions: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 更新会话统计信息\n   *\n   * @param sessionId - 会话ID\n   * @param stats - 统计信息\n   */\n  async updateSessionStats(\n    sessionId: string,\n    stats: {\n      tokenUsage?: number;\n      avgResponseTime?: number;\n    },\n  ): Promise<void> {\n    const updates: string[] = [];\n    const values: unknown[] = [];\n    let paramIndex = 1;\n\n    if (stats.tokenUsage !== undefined) {\n      updates.push(`token_usage = token_usage + $${paramIndex++}`);\n      values.push(stats.tokenUsage);\n    }\n\n    if (stats.avgResponseTime !== undefined) {\n      updates.push(`avg_response_time = $${paramIndex++}`);\n      values.push(stats.avgResponseTime);\n    }\n\n    if (updates.length === 0) {\n      return;\n    }\n\n    values.push(sessionId);\n\n    try {\n      await getPool().query(\n        `UPDATE chat_sessions\n         SET ${updates.join(', ')}\n         WHERE id = $${paramIndex}`,\n        values,\n      );\n    } catch (err) {\n      logger.error('Failed to update session stats', {\n        error: (err as Error).message,\n        sessionId,\n      });\n      // 统计更新失败不抛出异常\n    }\n  }\n\n  /**\n   * 获取会话统计信息\n   *\n   * @param userId - 用户ID\n   * @returns 统计摘要\n   */\n  async getSessionStats(userId: number): Promise<{\n    totalSessions: number;\n    activeSessions: number;\n    archivedSessions: number;\n    totalMessages: number;\n    totalTokens: number;\n  }> {\n    try {\n      const result = await getPool().query(\n        `SELECT\n           COUNT(*) as total_sessions,\n           COUNT(*) FILTER (WHERE status = 'active') as active_sessions,\n           COUNT(*) FILTER (WHERE status = 'archived') as archived_sessions,\n           COALESCE(SUM(message_count), 0) as total_messages,\n           COALESCE(SUM(token_usage), 0) as total_tokens\n         FROM chat_sessions\n         WHERE user_id = $1 AND status != 'deleted'`,\n        [userId],\n      );\n\n      const row = result.rows[0];\n      return {\n        totalSessions: parseInt(row.total_sessions),\n        activeSessions: parseInt(row.active_sessions),\n        archivedSessions: parseInt(row.archived_sessions),\n        totalMessages: parseInt(row.total_messages),\n        totalTokens: parseInt(row.total_tokens),\n      };\n    } catch (err) {\n      logger.error('Failed to get session stats', {\n        error: (err as Error).message,\n        userId,\n      });\n      throw new Error(`Failed to get session stats: ${(err as Error).message}`);\n    }\n  }\n\n  /**\n   * 映射数据库行到ChatSession对象\n   *\n   * @param row - 数据库查询结果行\n   * @returns ChatSession对象\n   */\n  private mapRowToSession(row: any): ChatSession {\n    return {\n      id: row.id,\n      userId: row.user_id,\n      agentId: row.agent_id,\n      title: row.title,\n      messages: row.messages ?? [],\n      context: row.context,\n      settings: row.settings,\n      messageCount: row.message_count ?? 0,\n      tokenUsage: row.token_usage ?? 0,\n      avgResponseTime: row.avg_response_time ?? 0,\n      status: row.status,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      lastMessageAt: row.last_message_at,\n    };\n  }\n}\n\n// 导出单例\nexport const chatSessionService = new ChatSessionService();\n\n// 默认导出\nexport default chatSessionService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/DashScopeService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":76,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":76,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1606,1608],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":77,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":77,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1651,1653],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":78,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":78,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":108,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":108,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8000.","line":109,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":109,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":138,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":141,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":138,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":138,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":142,"column":47,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":142,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toLogObject on an `any` value.","line":142,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":64},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":158,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":158,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8000.","line":159,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":159,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":179,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":179,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":182,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":182,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":182,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":182,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":182,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":182,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":182,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":182,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toString on an `any` value.","line":182,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .split on an `any` value.","line":182,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .filter on an `any` value.","line":182,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":185,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":185,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .startsWith on an `any` value.","line":185,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":186,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":186,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":186,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":186,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .slice on an `any` value.","line":186,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 6.","line":186,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":186,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":194,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":194,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":194,"column":41,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":194,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":195,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":195,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .choices on an `any` value.","line":195,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":45},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (6). Maximum allowed is 5.","line":197,"column":15,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":199,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":202,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":202,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .choices on an `any` value.","line":202,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":47},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (6). Maximum allowed is 5.","line":203,"column":15,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":206,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":204,"column":61,"nodeType":"Property","messageId":"anyAssignment","endLine":204,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":208,"column":60,"nodeType":"Property","messageId":"anyAssignment","endLine":208,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":214,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":217,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":214,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":214,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":218,"column":49,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":218,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toLogObject on an `any` value.","line":218,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6069,6072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6069,6072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":239,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":239,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .error on an `any` value.","line":239,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":243,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":243,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":244,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":244,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .error on an `any` value.","line":244,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":244,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":248,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":248,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":250,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":250,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":253,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":253,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":254,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":254,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":276,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":279,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":276,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":276,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":280,"column":49,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":280,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toLogObject on an `any` value.","line":280,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":280,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 阿里云 DashScope API 服务\n *\n * 封装通义千问系列模型的 API 调用\n * 支持标准 OpenAI 兼容接口和 Function Calling\n */\n\nimport axios, { type AxiosInstance } from 'axios';\nimport { createErrorFromUnknown, type ChatMessage, type ChatOptions } from '@/types';\nimport type { CadFunctionTool } from '@llmchat/shared-types';\nimport logger from '@/utils/logger';\n\nexport interface DashScopeConfig {\n  apiKey: string;\n  model?: string;\n  baseURL?: string;\n  timeout?: number;\n}\n\nexport interface DashScopeMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface DashScopeRequest {\n  model: string;\n  messages: DashScopeMessage[];\n  stream?: boolean;\n  temperature?: number;\n  max_tokens?: number;\n  tools?: CadFunctionTool[];\n  tool_choice?: 'auto' | 'none';\n}\n\nexport interface DashScopeFunctionCall {\n  name: string;\n  arguments: string;\n}\n\nexport interface DashScopeChoice {\n  index: number;\n  message: {\n    role: 'assistant';\n    content: string;\n    tool_calls?: Array<{\n      id: string;\n      type: 'function';\n      function: DashScopeFunctionCall;\n    }>;\n  };\n  finish_reason: 'stop' | 'length' | 'tool_calls';\n}\n\nexport interface DashScopeResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: DashScopeChoice[];\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\n/**\n * DashScope 服务类\n */\nexport class DashScopeService {\n  private readonly client: AxiosInstance;\n  private readonly config: Required<DashScopeConfig>;\n\n  constructor(config: DashScopeConfig) {\n    this.config = {\n      model: config.model || 'qwen-max',\n      baseURL: config.baseURL || 'https://dashscope.aliyuncs.com/compatible-mode/v1',\n      timeout: config.timeout ?? 60000,\n      apiKey: config.apiKey,\n    };\n\n    this.client = axios.create({\n      baseURL: this.config.baseURL,\n      timeout: this.config.timeout,\n      headers: {\n        'Authorization': `Bearer ${this.config.apiKey}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    logger.info('[DashScopeService] 初始化成功', {\n      model: this.config.model,\n      baseURL: this.config.baseURL,\n    });\n  }\n\n  /**\n   * 发送聊天请求（非流式）\n   */\n  async chatCompletion(\n    messages: ChatMessage[],\n    options?: ChatOptions & { tools?: CadFunctionTool[] },\n  ): Promise<DashScopeResponse> {\n    const request: DashScopeRequest = {\n      model: this.config.model,\n      messages: this.transformMessages(messages),\n      stream: false,\n      temperature: options?.temperature ?? 0.7,\n      max_tokens: options?.maxTokens ?? 8000,\n    };\n\n    // 添加工具定义（Function Calling）\n    if (options?.tools && options.tools.length > 0) {\n      request.tools = options.tools;\n      request.tool_choice = 'auto';\n    }\n\n    try {\n      logger.debug('[DashScopeService] 发送请求', {\n        model: request.model,\n        messageCount: messages.length,\n        hasTools: !!request.tools,\n      });\n\n      const response = await this.client.post<DashScopeResponse>(\n        '/chat/completions',\n        request,\n      );\n\n      logger.info('[DashScopeService] 请求成功', {\n        model: response.data.model,\n        finishReason: response.data.choices[0]?.finish_reason,\n        usage: response.data.usage,\n      });\n\n      return response.data;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DashScopeService',\n        operation: 'chatCompletion',\n      });\n      logger.error('[DashScopeService] 请求失败', error.toLogObject());\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * 发送流式聊天请求\n   */\n  async *chatCompletionStream(\n    messages: ChatMessage[],\n    options?: ChatOptions & { tools?: CadFunctionTool[] },\n  ): AsyncGenerator<string, void, unknown> {\n    const request: DashScopeRequest = {\n      model: this.config.model,\n      messages: this.transformMessages(messages),\n      stream: true,\n      temperature: options?.temperature ?? 0.7,\n      max_tokens: options?.maxTokens ?? 8000,\n    };\n\n    // 添加工具定义\n    if (options?.tools && options.tools.length > 0) {\n      request.tools = options.tools;\n      request.tool_choice = 'auto';\n    }\n\n    try {\n      logger.debug('[DashScopeService] 发送流式请求', {\n        model: request.model,\n        messageCount: messages.length,\n        hasTools: !!request.tools,\n      });\n\n      const response = await this.client.post('/chat/completions', request, {\n        responseType: 'stream',\n      });\n\n      const stream = response.data;\n\n      for await (const chunk of stream) {\n        const lines = chunk.toString().split('\\n').filter((line: string) => line.trim());\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n\n            if (data === '[DONE]') {\n              logger.info('[DashScopeService] 流式响应结束');\n              return;\n            }\n\n            try {\n              const parsed = JSON.parse(data);\n              const content = parsed.choices[0]?.delta?.content;\n\n              if (content) {\n                yield content;\n              }\n\n              // 处理 Function Calling\n              const toolCalls = parsed.choices[0]?.delta?.tool_calls;\n              if (toolCalls) {\n                logger.debug('[DashScopeService] 收到工具调用', { toolCalls });\n                // 这里可以进一步处理工具调用\n              }\n            } catch (parseError) {\n              logger.warn('[DashScopeService] 解析流式数据失败', { data, parseError });\n            }\n          }\n        }\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DashScopeService',\n        operation: 'chatCompletionStream',\n      });\n      logger.error('[DashScopeService] 流式请求失败', error.toLogObject());\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * 转换消息格式\n   */\n  private transformMessages(messages: ChatMessage[]): DashScopeMessage[] {\n    return messages.map(msg => ({\n      role: msg.role as 'system' | 'user' | 'assistant',\n      content: msg.content,\n    }));\n  }\n\n  /**\n   * 错误处理\n   */\n  private handleError(error: any): Error {\n    if (axios.isAxiosError(error)) {\n      const status = error.response?.status;\n      const message = error.response?.data?.error?.message || error.message;\n\n      logger.error('[DashScopeService] API 错误', {\n        status,\n        message,\n        code: error.response?.data?.error?.code,\n      });\n\n      switch (status) {\n        case 401:\n          return new Error('DashScope API Key 无效或已过期');\n        case 429:\n          return new Error('DashScope API 请求频率超限，请稍后重试');\n        case 500:\n        case 502:\n        case 503:\n          return new Error('DashScope 服务暂时不可用，请稍后重试');\n        default:\n          return new Error(`DashScope API 错误: ${message}`);\n      }\n    }\n\n    return error instanceof Error ? error : new Error('未知错误');\n  }\n\n  /**\n   * 健康检查\n   */\n  async healthCheck(): Promise<boolean> {\n    try {\n      const testMessages: ChatMessage[] = [\n        { role: 'user', content: 'Hello' },\n      ];\n\n      await this.chatCompletion(testMessages, { maxTokens: 10 });\n      return true;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DashScopeService',\n        operation: 'healthCheck',\n      });\n      logger.error('[DashScopeService] 健康检查失败', error.toLogObject());\n      return false;\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/DatabaseHealthService.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'start' has no 'await' expression.","line":24,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":24,"endColumn":21},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'stop' has no 'await' expression.","line":28,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":28,"endColumn":20},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'checkHealth' has no 'await' expression.","line":32,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":32,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[889,892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[889,892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 简化的数据库健康服务\n */\n\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport class DatabaseHealthService {\n  private static instance: DatabaseHealthService | null = null;\n  private isHealthy: boolean = true;\n  private lastCheck: Date = new Date();\n\n  private constructor() {\n    logger.info('简化版DatabaseHealthService已初始化');\n  }\n\n  public static getInstance(): DatabaseHealthService {\n    if (!DatabaseHealthService.instance) {\n      DatabaseHealthService.instance = new DatabaseHealthService();\n    }\n    return DatabaseHealthService.instance;\n  }\n\n  public async start(): Promise<void> {\n    logger.info('数据库健康检查服务已启动');\n  }\n\n  public async stop(): Promise<void> {\n    logger.info('数据库健康检查服务已停止');\n  }\n\n  public async checkHealth(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    lastCheck: Date;\n    responseTime: number;\n    details: any;\n  }> {\n    const startTime = Date.now();\n\n    try {\n      // 简化的健康检查逻辑\n      this.isHealthy = true;\n      this.lastCheck = new Date();\n\n      return {\n        status: this.isHealthy ? 'healthy' : 'unhealthy',\n        lastCheck: this.lastCheck,\n        responseTime: Date.now() - startTime,\n        details: {\n          message: '简化模式：数据库健康检查',\n        },\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DatabaseHealthService',\n        operation: 'checkHealth',\n      });\n      this.isHealthy = false;\n      this.lastCheck = new Date();\n\n      return {\n        status: 'unhealthy',\n        lastCheck: this.lastCheck,\n        responseTime: Date.now() - startTime,\n        details: {\n          error: error.message,\n        },\n      };\n    }\n  }\n}\n\nexport default DatabaseHealthService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/DifyInitService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":164,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":164,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4482,4485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4482,4485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .isAxiosError on an `any` value.","line":175,"column":91,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":176,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":176,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4539,4542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4539,4542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":177,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":177,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .response on an `any` value.","line":177,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":177,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":178,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":178,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .response on an `any` value.","line":178,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":210,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":210,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6034,6037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6034,6037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .isAxiosError on an `any` value.","line":221,"column":91,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":222,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":222,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":222,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6091,6094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6091,6094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":223,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":223,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .response on an `any` value.","line":223,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":223,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":223,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":223,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":224,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":224,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .response on an `any` value.","line":224,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":280,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":280,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":281,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":281,"endColumn":60},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":340,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":340,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9647,9649],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":341,"column":85,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":341,"endColumn":87,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9741,9743],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10481,10484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10481,10484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .isAxiosError on an `any` value.","line":368,"column":91,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":368,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":369,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":369,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10538,10541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10538,10541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":370,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":370,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .response on an `any` value.","line":370,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":370,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":370,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":370,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":371,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":371,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .response on an `any` value.","line":371,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":371,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport type { AgentConfigService } from './AgentConfigService';\nimport type { AgentConfig } from '@/types';\nimport { AdaptiveTtlPolicy } from '@/utils/adaptiveCache';\nimport logger from '@/utils/logger';\nimport { ResourceError, ValidationError, ExternalServiceError, createErrorFromUnknown } from '@/types/errors';\n\n/**\n * Dify应用信息接口\n */\nexport interface DifyAppInfo {\n  name: string;\n  description: string;\n  icon: string;\n  icon_background: string;\n  model_config: {\n    model: string;\n    parameters: {\n      temperature: number;\n      max_tokens: number;\n      top_p?: number;\n      presence_penalty?: number;\n      frequency_penalty?: number;\n    };\n  };\n}\n\n/**\n * Dify应用参数接口\n */\nexport interface DifyAppParameters {\n  user_input_form: Array<{\n    variable: string;\n    label: string;\n    required: boolean;\n    max_length?: number;\n    default?: string;\n    options?: string[];\n  }>;\n  file_upload?: {\n    enabled: boolean;\n    allowed_file_types: string[];\n    allowed_file_extensions: string[];\n    allowed_file_upload_methods: string[];\n  };\n  system_parameters?: {\n    image_file_size_limit?: string;\n    video_file_size_limit?: string;\n    audio_file_size_limit?: string;\n  };\n}\n\n/**\n * Dify初始化响应\n */\nexport interface DifyInitResponse {\n  appInfo: DifyAppInfo;\n  parameters: DifyAppParameters;\n  // 从appInfo提取的便捷字段（测试用）\n  model?: string;\n  system_prompt?: string;\n  temperature?: number;\n  max_tokens?: number;\n}\n\n/**\n * Dify初始化服务\n * 负责调用Dify的info和parameters API\n */\nexport class DifyInitService {\n  private readonly httpClient: ReturnType<typeof axios.create>;\n  private readonly agentService: AgentConfigService;\n  private readonly cache: Map<string, { data: DifyInitResponse; expiresAt: number }> = new Map();\n  private readonly cachePolicy = new AdaptiveTtlPolicy({\n    initialTtl: 5 * 60 * 1000, // 5分钟\n    minTtl: 60 * 1000, // 1分钟\n    maxTtl: 15 * 60 * 1000, // 15分钟\n    step: 60 * 1000,\n    sampleSize: 20,\n    adjustIntervalMs: 2 * 60 * 1000,\n  });\n\n  constructor(agentService: AgentConfigService) {\n    this.agentService = agentService;\n    this.httpClient = axios.create({\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * 获取初始化数据（包含应用信息和参数配置）\n   */\n  async getInitData(agentId: string): Promise<DifyInitResponse> {\n    // 检查缓存\n    const cached = this.cache.get(agentId);\n    const now = Date.now();\n    if (cached && cached.expiresAt > now) {\n      logger.debug('✅ 使用缓存的Dify初始化数据', { agentId });\n      this.cachePolicy.recordHit();\n      return cached.data;\n    }\n\n    this.cachePolicy.recordMiss();\n\n    // 获取智能体配置\n    const agent = await this.agentService.getAgent(agentId);\n    if (!agent) {\n      throw new ResourceError({\n        message: `智能体不存在: ${agentId}`,\n        code: 'AGENT_NOT_FOUND',\n        resourceType: 'agent',\n        resourceId: agentId,\n      });\n    }\n\n    if (agent.provider !== 'dify') {\n      throw new ValidationError({\n        message: `智能体 ${agentId} 不是Dify类型，无法获取初始化数据`,\n        code: 'INVALID_PROVIDER_TYPE',\n        field: 'provider',\n        value: agent.provider,\n      });\n    }\n\n    // 并行调用Dify API\n    const [appInfo, parameters] = await Promise.all([\n      this.callDifyInfoAPI(agent),\n      this.callDifyParametersAPI(agent),\n    ]);\n\n    const initData: DifyInitResponse = { appInfo, parameters };\n\n    // 缓存结果\n    this.cache.set(agentId, {\n      data: initData,\n      expiresAt: Date.now() + this.cachePolicy.getTtl(),\n    });\n\n    return initData;\n  }\n\n  /**\n   * 调用Dify应用信息API\n   */\n  async callDifyInfoAPI(agent: AgentConfig): Promise<DifyAppInfo> {\n    try {\n      // 构建Dify API URL\n      const baseUrl = agent.endpoint.replace(/\\/v1\\/chat-messages$/, '');\n      const infoUrl = `${baseUrl}/v1/info`;\n\n      logger.debug('🚀 调用Dify Info API', { infoUrl, agentId: agent.id });\n\n      // 发送请求\n      const response = await this.httpClient.get(infoUrl, {\n        headers: {\n          'Authorization': `Bearer ${agent.apiKey}`,\n        },\n      });\n\n      logger.debug('✅ Dify Info API调用成功', { agentId: agent.id });\n      return response.data;\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifyInitService',\n        operation: 'callDifyInfoAPI',\n      });\n      logger.error('❌ Dify Info API调用失败', {\n        agentId: agent.id,\n        ...error.toLogObject(),\n      });\n      if (error && typeof error === 'object' && 'isAxiosError' in error && (error as any).isAxiosError) {\n        const axiosError = error as any;\n        const message = axiosError.response?.data?.message || axiosError.message;\n        const statusCode = axiosError.response?.status;\n        throw new ExternalServiceError({\n          message: `Dify Info API调用失败 (${statusCode || 'unknown'}): ${message}`,\n          code: 'DIFY_INFO_API_ERROR',\n          service: 'Dify',\n          endpoint: `${agent.endpoint}/info`,\n          originalError: axiosError,\n        });\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * 调用Dify应用参数API\n   */\n  async callDifyParametersAPI(agent: AgentConfig): Promise<DifyAppParameters> {\n    try {\n      // 构建Dify API URL\n      const baseUrl = agent.endpoint.replace(/\\/v1\\/chat-messages$/, '');\n      const parametersUrl = `${baseUrl}/v1/parameters`;\n\n      logger.debug('🚀 调用Dify Parameters API', { parametersUrl, agentId: agent.id });\n\n      // 发送请求\n      const response = await this.httpClient.get(parametersUrl, {\n        headers: {\n          'Authorization': `Bearer ${agent.apiKey}`,\n        },\n      });\n\n      logger.debug('✅ Dify Parameters API调用成功', { agentId: agent.id });\n      return response.data;\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifyInitService',\n        operation: 'callDifyParametersAPI',\n      });\n      logger.error('❌ Dify Parameters API调用失败', {\n        agentId: agent.id,\n        ...error.toLogObject(),\n      });\n      if (error && typeof error === 'object' && 'isAxiosError' in error && (error as any).isAxiosError) {\n        const axiosError = error as any;\n        const message = axiosError.response?.data?.message || axiosError.message;\n        const statusCode = axiosError.response?.status;\n        throw new ExternalServiceError({\n          message: `Dify Parameters API调用失败 (${statusCode || 'unknown'}): ${message}`,\n          code: 'DIFY_PARAMETERS_API_ERROR',\n          service: 'Dify',\n          endpoint: `${agent.endpoint}/parameters`,\n          originalError: axiosError,\n        });\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * 直接通过endpoint和apiKey获取应用信息（用于管理端自动获取）\n   */\n  async fetchAppInfoByCredentials(\n    endpoint: string,\n    apiKey: string,\n  ): Promise<{\n    name: string;\n    description: string;\n    model: string;\n    temperature?: number;\n    maxTokens?: number;\n    capabilities: string[];\n    features: AgentConfig['features'];\n    variables?: Array<{\n      name: string;\n      label: string;\n      required: boolean;\n      type: string;\n    }>;\n    fileUpload?: {\n      enabled: boolean;\n      allowedTypes: string[];\n    };\n  }> {\n    try {\n      // 构建Dify API URL\n      const baseUrl = endpoint.replace(/\\/v1\\/chat-messages$/, '');\n      const infoUrl = `${baseUrl}/v1/info`;\n      const parametersUrl = `${baseUrl}/v1/parameters`;\n\n      logger.debug('🔍 自动获取Dify应用信息', { endpoint });\n\n      // 并行调用API\n      const [infoResponse, paramsResponse] = await Promise.all([\n        this.httpClient.get(infoUrl, {\n          headers: { 'Authorization': `Bearer ${apiKey}` },\n        }),\n        this.httpClient.get(parametersUrl, {\n          headers: { 'Authorization': `Bearer ${apiKey}` },\n        }),\n      ]);\n\n      const appInfo: DifyAppInfo = infoResponse.data;\n      const params: DifyAppParameters = paramsResponse.data;\n\n      // 提取能力标签\n      const capabilities: string[] = ['chat'];\n      if (params.file_upload?.enabled) {\n        capabilities.push('file-upload');\n      }\n      if (params.user_input_form && params.user_input_form.length > 0) {\n        capabilities.push('variables');\n      }\n\n      // 转换变量定义\n      const variables = params.user_input_form.map(field => ({\n        name: field.variable,\n        label: field.label,\n        required: field.required,\n        type: field.options ? 'select' : field.max_length ? 'textarea' : 'text',\n      }));\n\n      // 转换文件上传配置\n      const fileUpload = params.file_upload ? {\n        enabled: params.file_upload.enabled,\n        allowedTypes: params.file_upload.allowed_file_extensions ?? [],\n      } : undefined;\n\n      logger.info('✅ Dify应用信息获取成功', {\n        name: appInfo.name,\n        model: appInfo.model_config.model,\n      });\n\n      const result: {\n        name: string;\n        description: string;\n        model: string;\n        temperature?: number;\n        maxTokens?: number;\n        capabilities: string[];\n        features: AgentConfig['features'];\n        variables?: Array<{\n          name: string;\n          label: string;\n          required: boolean;\n          type: string;\n        }>;\n        fileUpload?: {\n          enabled: boolean;\n          allowedTypes: string[];\n        };\n      } = {\n        name: appInfo.name,\n        description: appInfo.description || `Dify应用: ${appInfo.name}`,\n        model: appInfo.model_config.model,\n        temperature: appInfo.model_config.parameters.temperature,\n        maxTokens: appInfo.model_config.parameters.max_tokens,\n        capabilities,\n        features: {\n          supportsChatId: true, // Dify使用conversation_id\n          supportsStream: true,\n          supportsDetail: false, // Dify没有detail模式\n          supportsFiles: params.file_upload?.enabled || false,\n          supportsImages: params.file_upload?.allowed_file_types?.includes('image') || false,\n          streamingConfig: {\n            enabled: true,\n            endpoint: 'same',\n            statusEvents: false, // Dify没有FastGPT的状态事件\n            flowNodeStatus: false,\n          },\n        },\n        variables,\n      };\n\n      // 只有在fileUpload存在时才添加\n      if (fileUpload) {\n        result.fileUpload = fileUpload;\n      }\n\n      return result;\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifyInitService',\n        operation: 'fetchAppInfoByCredentials',\n      });\n      logger.error('❌ Dify应用信息获取失败', {\n        endpoint,\n        ...error.toLogObject(),\n      });\n      if (error && typeof error === 'object' && 'isAxiosError' in error && (error as any).isAxiosError) {\n        const axiosError = error as any;\n        const message = axiosError.response?.data?.message || axiosError.message;\n        const statusCode = axiosError.response?.status;\n        throw new ExternalServiceError({\n          message: `Dify API调用失败 (${statusCode || 'unknown'}): ${message}`,\n          code: 'DIFY_API_ERROR',\n          service: 'Dify',\n          originalError: axiosError,\n        });\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * 清除缓存\n   */\n  clearCache(): void {\n    this.cache.clear();\n    this.cachePolicy.reset();\n    logger.debug('🧹 Dify初始化数据缓存已清除');\n  }\n\n  /**\n   * 清除过期缓存\n   */\n  clearExpiredCache(): void {\n    const now = Date.now();\n    for (const [key, value] of this.cache.entries()) {\n      if (value.expiresAt <= now) {\n        this.cache.delete(key);\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/DifySessionService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[302,305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[302,305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[493,496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[493,496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":159,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":159,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3265,3267],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":160,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":160,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":168,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":168,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":168,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":169,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":169,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .has_more on an `any` value.","line":169,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":173,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":173,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":173,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":174,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":174,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .has_more on an `any` value.","line":174,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":175,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":175,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":175,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":175,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":175,"endColumn":41},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":212,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":212,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4854,4856],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":213,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":213,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":222,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":222,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":222,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":226,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":226,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":226,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":226,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":227,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":227,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .has_more on an `any` value.","line":227,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":228,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":228,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":228,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":228,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":228,"endColumn":41},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":267,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":267,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6442,6444],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":277,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":277,"endColumn":28},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":314,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":314,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7660,7662],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":359,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":359,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8864,8866],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":373,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":373,"endColumn":28},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":411,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":411,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10251,10253],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":419,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":419,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":419,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":419,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":422,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":422,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":422,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":422,"endColumn":32},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":463,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":463,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11560,11562],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios, { type AxiosInstance } from 'axios';\nimport type { AgentConfig } from '@/types';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\n/**\n * Dify 会话接口\n */\nexport interface DifyConversation {\n  id: string;\n  name: string;\n  inputs: Record<string, any>;\n  status: string;\n  introduction: string;\n  created_at: number;\n}\n\n/**\n * Dify 消息接口\n */\nexport interface DifyMessage {\n  id: string;\n  conversation_id: string;\n  inputs: Record<string, any>;\n  query: string;\n  answer: string;\n  message_files?: Array<{\n    id: string;\n    type: string;\n    url: string;\n    belongs_to: string;\n  }>;\n  feedback?: {\n    rating: 'like' | 'dislike' | null;\n  };\n  retriever_resources?: Array<{\n    position: number;\n    dataset_id: string;\n    dataset_name: string;\n    document_id: string;\n    document_name: string;\n    segment_id: string;\n    score: number;\n    content: string;\n  }>;\n  created_at: number;\n}\n\n/**\n * Dify 消息详情（扩展版）\n */\nexport interface DifyMessageDetail extends DifyMessage {\n  metadata: {\n    usage: {\n      prompt_tokens: number;\n      completion_tokens: number;\n      total_tokens: number;\n    };\n    retriever_resources: Array<Record<string, unknown>>;\n  };\n}\n\n/**\n * Dify 会话列表参数\n */\nexport interface DifyConversationListParams {\n  user?: string;      // 用户标识\n  limit?: number;     // 返回数量限制 (默认 20, 最大 100)\n  last_id?: string;   // 上一页最后一个会话 ID，用于分页\n}\n\n/**\n * Dify 消息列表参数\n */\nexport interface DifyMessageListParams {\n  conversation_id: string;\n  user?: string;\n  first_id?: string;  // 当前页第一条消息 ID\n  limit?: number;\n}\n\n/**\n * Dify 反馈参数\n */\nexport interface DifyFeedbackParams {\n  message_id: string;\n  rating: 'like' | 'dislike' | null;\n  user?: string;\n}\n\n/**\n * Dify 会话管理服务\n *\n * 负责管理 Dify 智能体的会话历史、消息查询、反馈等功能\n *\n * 主要功能：\n * - 获取会话列表\n * - 获取会话消息\n * - 获取单条消息详情\n * - 删除会话\n * - 提交消息反馈（点赞/点踩）\n * - 获取建议问题\n *\n * API 端点参考：\n * - GET  /v1/conversations - 会话列表\n * - GET  /v1/messages - 消息列表\n * - GET  /v1/messages/:id - 消息详情\n * - DELETE /v1/conversations/:id - 删除会话\n * - POST /v1/messages/:id/feedbacks - 提交反馈\n * - GET  /v1/messages/:id/suggested - 建议问题\n */\nexport class DifySessionService {\n  private readonly httpClient: AxiosInstance;\n\n  constructor() {\n    this.httpClient = axios.create({\n      timeout: parseInt(process.env.REQUEST_TIMEOUT ?? '30000', 10),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * 获取基础 URL\n   */\n  private getBaseUrl(agent: AgentConfig): string {\n    return agent.endpoint.replace(/\\/$/, '');\n  }\n\n  /**\n   * 构建请求头\n   */\n  private buildHeaders(agent: AgentConfig): Record<string, string> {\n    return {\n      'Authorization': `Bearer ${agent.apiKey}`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * 获取会话列表\n   *\n   * @param agent - 智能体配置\n   * @param params - 查询参数\n   * @returns 会话列表\n   */\n  async getConversations(\n    agent: AgentConfig,\n    params?: DifyConversationListParams,\n  ): Promise<{ data: Array<DifyConversation>; has_more: boolean; limit: number }> {\n    try {\n      const baseUrl = this.getBaseUrl(agent);\n      const url = `${baseUrl}/v1/conversations`;\n\n      const response = await this.httpClient.get(url, {\n        headers: this.buildHeaders(agent),\n        params: {\n          user: params?.user || 'default-user',\n          limit: params?.limit ?? 20,\n          ...(params?.last_id && { last_id: params.last_id }),\n        },\n      });\n\n      logger.info('Dify 会话列表查询成功', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        count: response.data.data?.length ?? 0,\n        hasMore: response.data.has_more,\n      });\n\n      return {\n        data: response.data.data ?? [],\n        has_more: response.data.has_more || false,\n        limit: response.data.limit ?? 20,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionService',\n        operation: 'getConversations',\n      });\n      const errStatus = (error as {response?: {status?: number}})?.response?.status;\n      logger.error('Dify 会话列表查询失败', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        error: error.toLogObject(),\n        status: errStatus,\n      });\n      throw new Error(`获取会话列表失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 获取会话消息列表\n   *\n   * @param agent - 智能体配置\n   * @param params - 查询参数\n   * @returns 消息列表\n   */\n  async getConversationMessages(\n    agent: AgentConfig,\n    params: DifyMessageListParams,\n  ): Promise<{ data: Array<DifyMessage>; has_more: boolean; limit: number }> {\n    try {\n      const baseUrl = this.getBaseUrl(agent);\n      const url = `${baseUrl}/v1/messages`;\n\n      const response = await this.httpClient.get(url, {\n        headers: this.buildHeaders(agent),\n        params: {\n          conversation_id: params.conversation_id,\n          user: params.user || 'default-user',\n          limit: params.limit ?? 20,\n          ...(params.first_id && { first_id: params.first_id }),\n        },\n      });\n\n      logger.info('Dify 会话消息查询成功', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        conversationId: params.conversation_id,\n        count: response.data.data?.length ?? 0,\n      });\n\n      return {\n        data: response.data.data ?? [],\n        has_more: response.data.has_more || false,\n        limit: response.data.limit ?? 20,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionService',\n        operation: 'getConversationMessages',\n      });\n      const errStatus = (error as {response?: {status?: number}})?.response?.status;\n      logger.error('Dify 会话消息查询失败', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        conversationId: params.conversation_id,\n        error: error.toLogObject(),\n        status: errStatus,\n      });\n      throw new Error(`获取会话消息失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 获取消息详情\n   *\n   * @param agent - 智能体配置\n   * @param messageId - 消息 ID\n   * @param user - 用户标识\n   * @returns 消息详情\n   */\n  async getMessageDetail(\n    agent: AgentConfig,\n    messageId: string,\n    user?: string,\n  ): Promise<DifyMessageDetail> {\n    try {\n      const baseUrl = this.getBaseUrl(agent);\n      const url = `${baseUrl}/v1/messages/${messageId}`;\n\n      const response = await this.httpClient.get(url, {\n        headers: this.buildHeaders(agent),\n        params: {\n          user: user || 'default-user',\n        },\n      });\n\n      logger.info('Dify 消息详情查询成功', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        messageId,\n      });\n\n      return response.data;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionService',\n        operation: 'getMessageDetail',\n      });\n      const errStatus = (error as {response?: {status?: number}})?.response?.status;\n      logger.error('Dify 消息详情查询失败', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        messageId,\n        error: error.toLogObject(),\n        status: errStatus,\n      });\n      throw new Error(`获取消息详情失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 删除会话\n   *\n   * @param agent - 智能体配置\n   * @param conversationId - 会话 ID\n   * @param user - 用户标识\n   */\n  async deleteConversation(\n    agent: AgentConfig,\n    conversationId: string,\n    user?: string,\n  ): Promise<void> {\n    try {\n      const baseUrl = this.getBaseUrl(agent);\n      const url = `${baseUrl}/v1/conversations/${conversationId}`;\n\n      await this.httpClient.delete(url, {\n        headers: this.buildHeaders(agent),\n        params: {\n          user: user || 'default-user',\n        },\n      });\n\n      logger.info('Dify 会话删除成功', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        conversationId,\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionService',\n        operation: 'deleteConversation',\n      });\n      const errStatus = (error as {response?: {status?: number}})?.response?.status;\n      logger.error('Dify 会话删除失败', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        conversationId,\n        error: error.toLogObject(),\n        status: errStatus,\n      });\n      throw new Error(`删除会话失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 提交消息反馈（点赞/点踩）\n   *\n   * @param agent - 智能体配置\n   * @param params - 反馈参数\n   * @returns 反馈结果\n   */\n  async submitFeedback(\n    agent: AgentConfig,\n    params: DifyFeedbackParams,\n  ): Promise<{ result: string }> {\n    try {\n      const baseUrl = this.getBaseUrl(agent);\n      const url = `${baseUrl}/v1/messages/${params.message_id}/feedbacks`;\n\n      const response = await this.httpClient.post(\n        url,\n        {\n          rating: params.rating,\n          user: params.user || 'default-user',\n        },\n        {\n          headers: this.buildHeaders(agent),\n        },\n      );\n\n      logger.info('Dify 消息反馈提交成功', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        messageId: params.message_id,\n        rating: params.rating,\n      });\n\n      return response.data;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionService',\n        operation: 'submitFeedback',\n      });\n      const errStatus = (error as {response?: {status?: number}})?.response?.status;\n      logger.error('Dify 消息反馈提交失败', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        messageId: params.message_id,\n        error: error.toLogObject(),\n        status: errStatus,\n      });\n      throw new Error(`提交反馈失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 获取建议问题\n   *\n   * @param agent - 智能体配置\n   * @param messageId - 消息 ID\n   * @param user - 用户标识\n   * @returns 建议问题列表\n   */\n  async getSuggestedQuestions(\n    agent: AgentConfig,\n    messageId: string,\n    user?: string,\n  ): Promise<Array<string>> {\n    try {\n      const baseUrl = this.getBaseUrl(agent);\n      const url = `${baseUrl}/v1/messages/${messageId}/suggested`;\n\n      const response = await this.httpClient.get(url, {\n        headers: this.buildHeaders(agent),\n        params: {\n          user: user || 'default-user',\n        },\n      });\n\n      logger.info('Dify 建议问题查询成功', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        messageId,\n        count: response.data.data?.length ?? 0,\n      });\n\n      return response.data.data ?? [];\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionService',\n        operation: 'getSuggestedQuestions',\n      });\n      const errStatus = (error as {response?: {status?: number}})?.response?.status;\n      logger.error('Dify 建议问题查询失败', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        messageId,\n        error: error.toLogObject(),\n        status: errStatus,\n      });\n      // 建议问题失败不抛错，返回空数组\n      return [];\n    }\n  }\n\n  /**\n   * 重命名会话（Dify API 可能不支持，预留接口）\n   *\n   * @param agent - 智能体配置\n   * @param conversationId - 会话 ID\n   * @param name - 新名称\n   * @param user - 用户标识\n   */\n  async renameConversation(\n    agent: AgentConfig,\n    conversationId: string,\n    name: string,\n    user?: string,\n  ): Promise<void> {\n    try {\n      const baseUrl = this.getBaseUrl(agent);\n      const url = `${baseUrl}/v1/conversations/${conversationId}/name`;\n\n      await this.httpClient.post(\n        url,\n        {\n          name,\n          user: user || 'default-user',\n        },\n        {\n          headers: this.buildHeaders(agent),\n        },\n      );\n\n      logger.info('Dify 会话重命名成功', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        conversationId,\n        newName: name,\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'DifySessionService',\n        operation: 'renameConversation',\n      });\n      const errStatus = (error as {response?: {status?: number}})?.response?.status;\n      logger.warn('Dify 会话重命名失败（API 可能不支持）', {\n        component: 'DifySessionService',\n        agentId: agent.id,\n        conversationId,\n        error: error.toLogObject(),\n        status: errStatus,\n      });\n      // 不抛错，因为 Dify API 可能不支持此功能\n    }\n  }\n}\n\n// 导出单例实例\nexport const difySessionService = new DifySessionService();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/EthicsFirewallService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'context' should be typed with a non-any type.","line":92,"column":5,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":92,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1754,1757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1754,1757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agentId on an `any` value.","line":96,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agentId on an `any` value.","line":96,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20000.","line":134,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":134,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 智能体伦理防火墙服务\n * 责任：在关键路径上对指令、上下文进行伦理合规评估，必要时拒绝执行或触发降级。\n *\n * 设计原则：\n * - 零冗余：复用现有保护体系（ProtectionService、监控、错误处理）\n * - 类型安全：显式类型定义与返回契约\n * - 最小侵入：以服务+轻量接入中间件的方式挂载\n *\n * 模块接口：\n * - evaluateCommand(context, payload): 返回伦理评估结果\n * - assertOrThrow(result): 不合规即抛出明确异常\n *\n * 依赖：无外部依赖，仅使用内置类型与受保护上下文\n *\n * 版本：v1.0.0\n */\n\n// TRACE-ethics-20251005-拒绝执行指令时自毁\n\n// import type { ProtectedRequestContext } from './ProtectionService'; // 已移除保护服务\n\nexport type EthicsVerdictCode =\n  | 'OK'\n  | 'RISK_HIGH'\n  | 'RESOURCE_ABUSE'\n  | 'DATA_LEAKAGE'\n  | 'SELF_HARM'\n  | 'UNKNOWN_AGENT'\n  | 'POLICY_VIOLATION';\n\nexport interface EthicsCheckPayload {\n  /**\n   * 指令类型或动作名称\n   */\n  action: string;\n  /**\n   * 指令的自然语言或结构化内容\n   */\n  content?: unknown;\n  /**\n   * 敏感资源标志（如是否触发跨域、外部网络写入、数据导出）\n   */\n  sensitive?: boolean;\n  /**\n   * 需执行的资源标识（例如 modelId、storageTarget）\n   */\n  resourceId?: string;\n}\n\nexport interface EthicsVerdict {\n  ok: boolean;\n  code: EthicsVerdictCode;\n  reason?: string;\n  /**\n   * 建议的替代动作（降级策略）\n   */\n  fallbackAction?: string;\n}\n\n/**\n * EthicsFirewallService\n * 伦理防火墙核心服务，提供评估与断言能力\n *\n * Args:\n *  无\n * Returns:\n *  服务实例\n * Raises:\n *  无\n * Example:\n *  const firewall = new EthicsFirewallService();\n *  const verdict = firewall.evaluateCommand(ctx, { action: 'chat.send', sensitive: false });\n *  firewall.assertOrThrow(verdict);\n */\nexport class EthicsFirewallService {\n  /**\n   * evaluateCommand\n   * 根据上下文与载荷进行伦理评估\n   *\n   * Args:\n   *  context: ProtectedRequestContext - 受保护的请求上下文\n   *  payload: EthicsCheckPayload - 伦理检查载荷\n   * Returns:\n   *  EthicsVerdict - 评估结论\n   * Raises:\n   *  无（仅返回结论；使用 assertOrThrow 执行强制断言）\n   * Example:\n   *  evaluateCommand(context, { action: 'agent.run', sensitive: true })\n   */\n  public evaluateCommand(\n    context: any, // 简化上下文类型\n    payload: EthicsCheckPayload,\n  ): EthicsVerdict {\n    // 基本校验\n    if (!context.agentId || context.agentId === 'unknown') {\n      return {\n        ok: false,\n        code: 'UNKNOWN_AGENT',\n        reason: '缺少有效的agentId',\n        fallbackAction: '拒绝执行',\n      };\n    }\n\n    // 高风险敏感动作拦截（示例策略：敏感资源需后续二次确认）\n    if (payload.sensitive) {\n      return {\n        ok: false,\n        code: 'RISK_HIGH',\n        reason: '敏感操作需二次确认或审批',\n        fallbackAction: '触发审批流程/只读模式',\n      };\n    }\n\n    // 自伤/破坏性语言模式的简单检测（可扩展为规则引擎）\n    const contentStr =\n      typeof payload.content === 'string' ? payload.content : JSON.stringify(payload.content ?? '');\n    const lower = contentStr.toLowerCase();\n    if (\n      lower.includes('自毁') ||\n      lower.includes('删除所有') ||\n      lower.includes('破坏系统') ||\n      lower.includes('泄露机密')\n    ) {\n      return {\n        ok: false,\n        code: 'SELF_HARM',\n        reason: '检测到可能的自伤/破坏性指令',\n        fallbackAction: '改为只读、记录审计、通知管理员',\n      };\n    }\n\n    // 资源滥用的简单检测：超长内容+未知目标\n    if (!payload.resourceId && contentStr.length > 20000) {\n      return {\n        ok: false,\n        code: 'RESOURCE_ABUSE',\n        reason: '未指定目标资源且负载异常偏大',\n        fallbackAction: '拆分任务或限制负载',\n      };\n    }\n\n    // 默认通过\n    return { ok: true, code: 'OK' };\n  }\n\n  /**\n   * assertOrThrow\n   * 对伦理评估结论进行断言，不通过则抛出详细异常\n   *\n   * Args:\n   *  verdict: EthicsVerdict - 评估结论\n   * Returns:\n   *  void\n   * Raises:\n   *  Error - 不合规时抛出包含代码与原因的错误\n   * Example:\n   *  firewall.assertOrThrow(verdict);\n   */\n  public assertOrThrow(verdict: EthicsVerdict): void {\n    if (!verdict.ok) {\n      const message = `[ETHICS_BLOCKED:${verdict.code}] ${verdict.reason ?? '伦理规则不通过'}`\n        + (verdict.fallbackAction ? ` | 建议: ${verdict.fallbackAction}` : '');\n      const err = new Error(message);\n      // 标记用于上层降级处理\n      (err as unknown as { fallbackUsed?: boolean; data?: unknown }).fallbackUsed = false;\n      throw err;\n    }\n  }\n}\n\n// TRACE-ethics-20251005-拒绝执行指令时自毁\n\n/**\n * createDefaultFirewall\n * 创建默认伦理防火墙实例\n *\n * Args:\n *  无\n * Returns:\n *  EthicsFirewallService\n * Raises:\n *  无\n * Example:\n *  const firewall = createDefaultFirewall();\n */\nexport function createDefaultFirewall(): EthicsFirewallService {\n  return new EthicsFirewallService();\n}\n\n// TRACE-ethics-20251005-拒绝执行指令时自毁","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/FastGPTSessionService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1615,1618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1615,1618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":110,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":110,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3136,3139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3136,3139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":111,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":115,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":115,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3290,3293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3290,3293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":116,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":116,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":120,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":120,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3481,3484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3481,3484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":121,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4683,4686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4683,4686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4793,4796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4793,4796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4827,4830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4827,4830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":213,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":213,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6014,6017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6014,6017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .response on an `any` value.","line":213,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Method 'normalizeHistorySummary' has a complexity of 29. Maximum allowed is 18.","line":325,"column":34,"nodeType":"FunctionExpression","messageId":"complex","endLine":343,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":326,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9501,9504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9501,9504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":327,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":327,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":328,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":328,"endColumn":104},{"ruleId":"max-len","severity":1,"message":"This line has a length of 141. Maximum allowed is 100.","line":329,"column":1,"nodeType":"Program","messageId":"max","endLine":329,"endColumn":142},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":329,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":329,"endColumn":141},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":330,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":331,"endColumn":146},{"ruleId":"max-len","severity":1,"message":"This line has a length of 146. Maximum allowed is 100.","line":331,"column":1,"nodeType":"Program","messageId":"max","endLine":331,"endColumn":147},{"ruleId":"max-len","severity":1,"message":"This line has a length of 110. Maximum allowed is 100.","line":339,"column":1,"nodeType":"Program","messageId":"max","endLine":339,"endColumn":111},{"ruleId":"complexity","severity":1,"message":"Method 'normalizeHistoryMessage' has a complexity of 21. Maximum allowed is 18.","line":345,"column":34,"nodeType":"FunctionExpression","messageId":"complex","endLine":371,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'normalizeHistoryDetail' has a complexity of 19. Maximum allowed is 18.","line":373,"column":33,"nodeType":"FunctionExpression","messageId":"complex","endLine":398,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":374,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11889,11892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11889,11892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 112. Maximum allowed is 100.","line":375,"column":1,"nodeType":"Program","messageId":"max","endLine":375,"endColumn":113},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":375,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":375,"endColumn":112},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":376,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":376,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":382,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":382,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":386,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":386,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":390,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":390,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":393,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":393,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":394,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":394,"endColumn":31},{"ruleId":"max-len","severity":1,"message":"This line has a length of 103. Maximum allowed is 100.","line":400,"column":1,"nodeType":"Program","messageId":"max","endLine":400,"endColumn":104},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":416,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":416,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[13265,13267],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":421,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":421,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":423,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":423,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":423,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":423,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":423,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":423,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":424,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":424,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":424,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":424,"endColumn":41},{"ruleId":"max-len","severity":1,"message":"This line has a length of 108. Maximum allowed is 100.","line":427,"column":1,"nodeType":"Program","messageId":"max","endLine":427,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":427,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":427,"endColumn":108},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":427,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":427,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":427,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":427,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .historyList on an `any` value.","line":427,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":427,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .list on an `any` value.","line":427,"column":97,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":427,"endColumn":101},{"ruleId":"max-len","severity":1,"message":"This line has a length of 101. Maximum allowed is 100.","line":428,"column":1,"nodeType":"Program","messageId":"max","endLine":428,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, unknown>`.","line":428,"column":90,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":428,"endColumn":94},{"ruleId":"max-len","severity":1,"message":"This line has a length of 103. Maximum allowed is 100.","line":448,"column":1,"nodeType":"Program","messageId":"max","endLine":448,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":450,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":450,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":452,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":452,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":452,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":452,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":452,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":452,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":453,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":453,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":453,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":453,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, unknown>`.","line":456,"column":42,"nodeType":"ConditionalExpression","messageId":"unsafeArgument","endLine":456,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":456,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":456,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":471,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":471,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":472,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":472,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":472,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":472,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":472,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":472,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":473,"column":23,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":473,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":473,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":473,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":489,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":489,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":490,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":490,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":490,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":490,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":490,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":490,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":491,"column":23,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":491,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":491,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":491,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":508,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":508,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16307,16310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16307,16310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":528,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":528,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":529,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":529,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":529,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":529,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":529,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":529,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":530,"column":23,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":530,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":530,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":530,"endColumn":43},{"ruleId":"max-len","severity":1,"message":"This line has a length of 109. Maximum allowed is 100.","line":542,"column":1,"nodeType":"Program","messageId":"max","endLine":542,"endColumn":110},{"ruleId":"complexity","severity":1,"message":"Async method 'listHistoriesEnhanced' has a complexity of 32. Maximum allowed is 18.","line":580,"column":30,"nodeType":"FunctionExpression","messageId":"complex","endLine":663,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":587,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":587,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18481,18484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18481,18484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":627,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":627,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":629,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":629,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":629,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":629,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":629,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":629,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":630,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":630,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":630,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":630,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":633,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":633,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":633,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":633,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":634,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":636,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .list on an `any` value.","line":634,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":634,"endColumn":51},{"ruleId":"max-len","severity":1,"message":"This line has a length of 110. Maximum allowed is 100.","line":635,"column":1,"nodeType":"Program","messageId":"max","endLine":635,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":635,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":635,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .list on an `any` value.","line":635,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":635,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .map on an `any` value.","line":635,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":635,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `FastGPTChatHistorySummary[]`.","line":641,"column":54,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":641,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":645,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":645,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":646,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":646,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .total on an `any` value.","line":646,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":646,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":646,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":646,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .total on an `any` value.","line":649,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":649,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":649,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":649,"endColumn":65},{"ruleId":"max-len","severity":1,"message":"This line has a length of 102. Maximum allowed is 100.","line":650,"column":1,"nodeType":"Program","messageId":"max","endLine":650,"endColumn":103},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .total on an `any` value.","line":650,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":650,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":650,"column":95,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":650,"endColumn":101},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":691,"column":25,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":691,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[21972,21973],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":691,"column":50,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":691,"endColumn":63,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[21998,21999],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":698,"column":40,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":698,"endColumn":63},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":703,"column":40,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":703,"endColumn":63},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":716,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":716,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[22674,22676],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":717,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":717,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[22730,22732],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'agent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":777,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":777,"endColumn":16},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'addTagsToSession' has no 'await' expression.","line":845,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":845,"endColumn":33},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'removeTagsFromSession' has no 'await' expression.","line":860,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":860,"endColumn":38},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'exportToJson' has no 'await' expression.","line":918,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":918,"endColumn":29},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":926,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":926,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[28702,28704],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":927,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":927,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[28761,28763],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":930,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":930,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28836,28839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28836,28839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'exportToCsv' has no 'await' expression.","line":972,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":972,"endColumn":28},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":998,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":998,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[30564,30566],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1083,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1083,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[32616,32618],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":1083,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":1083,"endColumn":40},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1122,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1122,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[33812,33814],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1135,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1135,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[34208,34210],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1136,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1136,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[34259,34261],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":126,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport type { AgentConfigService } from './AgentConfigService';\nimport logger from '@/utils/logger';\nimport type {\n  AgentConfig,\n  ChatMessage,\n  FastGPTChatHistoryDetail,\n  FastGPTChatHistoryMessage,\n  FastGPTChatHistorySummary,\n  SessionListParams,\n  PaginatedResponse,\n  BatchOperationOptions,\n  ExportOptions,\n  SessionEvent,\n  SessionEventType,\n  EventQueryParams,\n} from '@/types';\nimport { getErrorMessage } from '@/utils/helpers';\nimport { AdaptiveTtlPolicy } from '@/utils/adaptiveCache';\nimport { SessionEventService } from './SessionEventService';\nimport { createErrorFromUnknown } from '@/types/errors';\n\n// ===== 常量定义 =====\n/** 重试次数常量 */\nconst MAX_RETRY_ATTEMPTS = 3;\n/** 调整间隔（毫秒） */\nconst ADJUST_INTERVAL_MS = 45000;\n/** HTTP未找到状态码 */\nconst HTTP_STATUS_NOT_FOUND = 404;\n\ninterface RequestDescriptor {\n  method: 'get' | 'post' | 'delete';\n  path: string;\n}\n\ninterface ListParams {\n  page?: number;\n  pageSize?: number;\n}\n\ninterface CacheEntry<T> {\n  expiresAt: number;\n  data: T;\n}\n\nconst FASTGPT_COMPLETIONS_SUFFIX = '/api/v1/chat/completions';\n\nconst buildCacheKey = (agentId: string, segment: string) => `${agentId}::${segment}`;\n\n/**\n * FastGPT 会话与历史记录服务\n */\nexport class FastGPTSessionService {\n  private readonly agentService: AgentConfigService;\n  private readonly httpClient: ReturnType<typeof axios.create>;\n  private readonly historyListCache = new Map<string, CacheEntry<FastGPTChatHistorySummary[]>>();\n  private readonly historyDetailCache = new Map<string, CacheEntry<FastGPTChatHistoryDetail>>();\n  private readonly inFlightRequests = new Map<string, Promise<any>>();\n  private readonly eventService: SessionEventService;\n  private readonly historyListPolicy = new AdaptiveTtlPolicy({\n    initialTtl: 10 * 1000,\n    minTtl: 5 * 1000,\n    maxTtl: 120 * 1000,\n    step: 5 * 1000,\n    sampleSize: 30,\n    adjustIntervalMs: 60 * 1000,\n  });\n  private readonly historyDetailPolicy = new AdaptiveTtlPolicy({\n    initialTtl: 5 * 1000,\n    minTtl: 2 * 1000,\n    maxTtl: 60 * 1000,\n    step: MAX_RETRY_ATTEMPTS * 1000,\n    sampleSize: 30,\n    adjustIntervalMs: ADJUST_INTERVAL_MS,\n  });\n  private readonly historyEndpointBases = [\n    '/api/core/chat/history',\n    '/api/v1/core/chat/history',\n    '/api/chat/history',\n    '/api/v1/chat/history',\n  ];\n  private readonly feedbackEndpointBases = [\n    '/api/core/chat/feedback',\n    '/api/v1/core/chat/feedback',\n    '/api/chat/feedback',\n    '/api/v1/chat/feedback',\n  ];\n\n  constructor(agentService: AgentConfigService) {\n    this.agentService = agentService;\n    this.httpClient = axios.create({\n      timeout: parseInt(process.env.REQUEST_TIMEOUT ?? '30000', 10),\n    });\n    this.eventService = new SessionEventService();\n  }\n\n  /**\n   * 校验并获取 FastGPT 智能体配置\n   *\n   * Args:\n   *   agentId: 智能体唯一标识\n   * Returns:\n   *   AgentConfig: 合法的智能体配置\n   * Raises:\n   *   Error: code = NOT_FOUND | INVALID_PROVIDER | INVALID_APP_ID\n   */\n  private async ensureFastGPTAgent(agentId: string): Promise<AgentConfig> {\n    const agent = await this.agentService.getAgent(agentId);\n    if (!agent) {\n      const err = new Error(`智能体不存在: ${agentId}`) as any;\n      err.code = 'NOT_FOUND';\n      throw err;\n    }\n    if (agent.provider !== 'fastgpt') {\n      const err = new Error('仅 FastGPT 智能体支持会话历史接口') as any;\n      err.code = 'INVALID_PROVIDER';\n      throw err;\n    }\n    if (!agent.appId || !/^[a-fA-F0-9]{24}$/.test(agent.appId)) {\n      const err = new Error('FastGPT 智能体缺少有效的 appId 配置') as any;\n      err.code = 'INVALID_APP_ID';\n      throw err;\n    }\n    return agent;\n  }\n\n  /**\n   * 计算 FastGPT 基础 URL\n   *\n   * 修复URL重复问题：\n   * 输入: http://171.43.138.237:3000/v1/api/v1/chat/completions\n   * 输出: http://171.43.138.237:3000\n   */\n  private getBaseUrl(agent: AgentConfig): string {\n    if (!agent.endpoint) {\n      throw new Error('FastGPT 智能体缺少 endpoint 配置');\n    }\n\n    // 清理空格和末尾斜杠\n    let cleaned = agent.endpoint.replace(/[`\\s]+/g, '').replace(/\\/$/, '');\n\n    // 移除 /chat/completions 后缀\n    if (cleaned.endsWith(FASTGPT_COMPLETIONS_SUFFIX)) {\n      cleaned = cleaned.slice(0, -FASTGPT_COMPLETIONS_SUFFIX.length);\n    }\n\n    // 🔧 关键修复：统一移除末尾的API路径，避免重复拼接\n    // 支持多种格式：/v1/api/v1, /api/v1, /v1\n    cleaned = cleaned\n      .replace(/\\/v1\\/api\\/v1\\/?$/, '')  // 移除 /v1/api/v1 或 /v1/api/v1/\n      .replace(/\\/api\\/v1\\/?$/, '')      // 移除 /api/v1 或 /api/v1/\n      .replace(/\\/v1\\/?$/, '');          // 移除 /v1 或 /v1/\n\n    return cleaned;\n  }\n\n  /**\n   * 统一请求入口，支持多路径尝试与 /v1 回退\n   *\n   * Args:\n   *   agent: 智能体配置\n   *   attempts: 请求尝试序列（方法+路径）\n   *   options: 请求参数与 body\n   * Returns:\n   *   AxiosResponse<T>\n   * Raises:\n   *   Error: 最终请求失败错误\n   */\n  private async requestWithFallback<T = any>(\n    agent: AgentConfig,\n    attempts: RequestDescriptor[],\n    options: {\n      params?: Record<string, any>;\n      data?: Record<string, any>;\n    } = {},\n  ) {\n    const baseUrl = this.getBaseUrl(agent);\n    const headers = {\n      Authorization: `Bearer ${agent.apiKey}`,\n      'Content-Type': 'application/json',\n    };\n\n    let lastError: unknown;\n    for (const attempt of attempts) {\n      // 路径净化，移除反引号与空白\n      const cleanPath = attempt.path.replace(/[`\\s]+/g, '');\n      const url = `${baseUrl}${cleanPath}`;\n\n      try {\n        if (attempt.method === 'get') {\n          return await this.httpClient.get<T>(url, {\n            params: options.params ?? {},\n            headers,\n          });\n        }\n        if (attempt.method === 'delete') {\n          return await this.httpClient.delete<T>(url, {\n            params: options.params ?? {},\n            headers,\n          });\n        }\n        return await this.httpClient.post<T>(url, options.data, {\n          params: options.params ?? {},\n          headers,\n        });\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'FastGPTSessionService',\n          operation: 'requestWithFallback',\n        });\n        lastError = error;\n        // 若 404，尝试 /v1 回退\n        const status = (error as any)?.response?.status;\n        if (status === HTTP_STATUS_NOT_FOUND) {\n          const v1Url = `${baseUrl}/v1${cleanPath.startsWith('/') ? cleanPath : `/${cleanPath}`}`;\n          try {\n            if (attempt.method === 'get') {\n              return await this.httpClient.get<T>(v1Url, {\n                params: options.params ?? {},\n                headers,\n              });\n            }\n            if (attempt.method === 'delete') {\n              return await this.httpClient.delete<T>(v1Url, {\n                params: options.params ?? {},\n                headers,\n              });\n            }\n            return await this.httpClient.post<T>(v1Url, options.data, {\n              params: options.params ?? {},\n              headers,\n            });\n          } catch (v1Error) {\n            lastError = v1Error;\n          }\n        }\n      }\n    }\n\n    throw lastError instanceof Error ? lastError : new Error(`FastGPT 接口调用失败: ${getErrorMessage(lastError)}`);\n  }\n\n  private buildEndpointAttempts(\n    bases: string[],\n    suffixes: string[],\n    method: RequestDescriptor['method'],\n  ): RequestDescriptor[] {\n    const attempts: RequestDescriptor[] = [];\n    const seen = new Set<string>();\n\n    for (const base of bases) {\n      for (const rawSuffix of suffixes) {\n        const suffix = rawSuffix.replace(/^\\/+/g, '');\n        const path = `${base}/${suffix}`.replace(/\\/+/g, '/');\n        const key = `${method}:${path}`;\n        if (!seen.has(key)) {\n          attempts.push({ method, path });\n          seen.add(key);\n        }\n      }\n    }\n\n    return attempts;\n  }\n\n  private async getWithCache<T>(\n    cache: Map<string, CacheEntry<T>>,\n    key: string,\n    policy: AdaptiveTtlPolicy,\n    fetcher: () => Promise<T>,\n  ): Promise<T> {\n    const now = Date.now();\n    const cached = cache.get(key);\n    if (cached && cached.expiresAt > now) {\n      policy.recordHit();\n      return cached.data;\n    }\n\n    const inflightKey = `inflight::${key}`;\n    if (this.inFlightRequests.has(inflightKey)) {\n      return this.inFlightRequests.get(inflightKey) as Promise<T>;\n    }\n\n    policy.recordMiss();\n    const promise = fetcher()\n      .then((result) => {\n        cache.set(key, { data: result, expiresAt: Date.now() + policy.getTtl() });\n        this.inFlightRequests.delete(inflightKey);\n        return result;\n      })\n      .catch((error) => {\n        this.inFlightRequests.delete(inflightKey);\n        cache.delete(key);\n        throw error;\n      });\n\n    this.inFlightRequests.set(inflightKey, promise);\n    return promise;\n  }\n\n  private invalidateHistoryCaches(agentId: string, chatId?: string): void {\n    const listPrefix = buildCacheKey(agentId, 'list');\n    for (const key of Array.from(this.historyListCache.keys())) {\n      if (key.startsWith(listPrefix)) {\n        this.historyListCache.delete(key);\n      }\n    }\n    this.historyListPolicy.notifyInvalidation();\n\n    if (chatId) {\n      this.historyDetailCache.delete(buildCacheKey(agentId, `detail:${chatId}`));\n      this.historyDetailPolicy.notifyInvalidation();\n      return;\n    }\n\n    const detailPrefix = buildCacheKey(agentId, 'detail');\n    for (const key of Array.from(this.historyDetailCache.keys())) {\n      if (key.startsWith(detailPrefix)) {\n        this.historyDetailCache.delete(key);\n      }\n    }\n    this.historyDetailPolicy.notifyInvalidation();\n  }\n\n  private normalizeHistorySummary(item: Record<string, unknown>): FastGPTChatHistorySummary {\n    const data = item as Record<string, any>;\n    const chatId = (data?.chatId || data?.id || data?._id || data?.historyId || data?.history_id) ?? '';\n    const title = data?.title || data?.name || data?.latestQuestion || data?.latest_question || '未命名对话';\n    const createdAt = data?.createTime || data?.create_time || data?.createdAt || data?.created_at || data?.time || new Date().toISOString();\n    const updatedAt =\n      data?.updateTime || data?.update_time || data?.updatedAt || data?.updated_at || data?.lastUpdateTime || data?.last_update_time || createdAt;\n\n    return {\n      chatId: String(chatId),\n      appId: (data?.appId || data?.app_id) as string | undefined,\n      title: String(title),\n      createdAt: typeof createdAt === 'number' ? new Date(createdAt).toISOString() : String(createdAt),\n      updatedAt: typeof updatedAt === 'number' ? new Date(updatedAt).toISOString() : String(updatedAt),\n      messageCount: Number((data?.messageCount || data?.msgCount || data?.totalMessages || data?.total) ?? 0),\n      tags: Array.isArray(data?.tags) ? data.tags as string[] : undefined,\n      raw: data,\n    };\n  }\n\n  private normalizeHistoryMessage(entry: Record<string, unknown>): FastGPTChatHistoryMessage {\n    const dataId = entry?.dataId || entry?.data_id || entry?._id || entry?.id;\n    const roleRaw = entry?.role || entry?.obj || entry?.type;\n    const role = typeof roleRaw === 'string' ? roleRaw.toLowerCase() : '';\n\n    let normalizedRole: 'user' | 'assistant' | 'system';\n    if (role.includes('system')) {\n      normalizedRole = 'system';\n    } else if (role.includes('assistant') || role.includes('ai') || role.includes('bot')) {\n      normalizedRole = 'assistant';\n    } else {\n      normalizedRole = 'user';\n    }\n\n    const value = entry?.value ?? entry?.content ?? entry?.answer ?? entry?.text ?? '';\n    const content = Array.isArray(value) ? value.map((v) => (typeof v === 'string' ? v : JSON.stringify(v))).join('\\n') : String(value ?? '');\n    const feedback = entry?.userGoodFeedback ? 'good' : entry?.userBadFeedback ? 'bad' : null;\n\n    return {\n      id: dataId ? String(dataId) : undefined,\n      dataId: dataId ? String(dataId) : undefined,\n      role: normalizedRole,\n      content,\n      feedback,\n      raw: entry,\n    };\n  }\n\n  private normalizeHistoryDetail(payload: Record<string, unknown>): FastGPTChatHistoryDetail {\n    const data = (payload?.data ?? payload) as Record<string, any>;\n    const list = (data?.list || data?.messages || data?.history || data?.chatHistoryList || data?.detail) ?? [];\n    const title = data?.title || data?.historyName || data?.history_title;\n\n    const messages: FastGPTChatHistoryMessage[] = Array.isArray(list)\n      ? list.map((item) => this.normalizeHistoryMessage(item as Record<string, unknown>))\n      : [];\n\n    const chatId = data?.chatId || data?.historyId || data?.id || data?.chat_id || data?.history_id;\n\n    return {\n      chatId: chatId ? String(chatId) : '',\n      appId: data?.appId || data?.app_id,\n      title: title ? String(title) : undefined,\n      messages,\n      sessionInfo: {\n        userId: data?.userId || data?.user_id || null,\n      },\n      metadata: {\n        total: data?.total,\n        hasMore: data?.hasMore,\n        raw: data,\n      },\n    };\n  }\n\n  async listHistories(agentId: string, pagination?: ListParams): Promise<FastGPTChatHistorySummary[]> {\n    const agent = await this.ensureFastGPTAgent(agentId);\n    const params = {\n      appId: agent.appId,\n      page: pagination?.page,\n      pageSize: pagination?.pageSize,\n    };\n\n    const attempts = this.buildEndpointAttempts(\n      this.historyEndpointBases,\n      ['list', 'getHistoryList', 'getHistories'],\n      'get',\n    );\n\n    const cacheKey = buildCacheKey(\n      agentId,\n      `list:${params.page ?? ''}:${params.pageSize || 'default'}`,\n    );\n\n    return this.getWithCache(this.historyListCache, cacheKey, this.historyListPolicy, async () => {\n      const response = await this.requestWithFallback(agent, attempts, { params });\n      const payload = response.data;\n\n      if (payload?.code && payload.code !== 200) {\n        throw new Error(payload?.message || 'FastGPT 获取会话列表失败');\n      }\n\n      const rawList = (payload?.data?.list || payload?.data || payload?.historyList || payload?.list) ?? [];\n      return Array.isArray(rawList) ? rawList.map((item) => this.normalizeHistorySummary(item)) : [];\n    });\n  }\n\n  async getHistoryDetail(agentId: string, chatId: string): Promise<FastGPTChatHistoryDetail> {\n    const agent = await this.ensureFastGPTAgent(agentId);\n\n    const params = {\n      appId: agent.appId,\n      chatId,\n    };\n\n    const attempts = this.buildEndpointAttempts(\n      this.historyEndpointBases,\n      ['detail', 'getHistory', 'messages'],\n      'get',\n    );\n\n    const cacheKey = buildCacheKey(agentId, `detail:${chatId}`);\n\n    return this.getWithCache(this.historyDetailCache, cacheKey, this.historyDetailPolicy, async () => {\n      const response = await this.requestWithFallback(agent, attempts, { params });\n      const payload = response.data;\n\n      if (payload?.code && payload.code !== 200) {\n        throw new Error(payload?.message || 'FastGPT 获取会话详情失败');\n      }\n\n      return this.normalizeHistoryDetail(payload?.data ? payload : payload);\n    });\n  }\n\n  async deleteHistory(agentId: string, chatId: string): Promise<void> {\n    const agent = await this.ensureFastGPTAgent(agentId);\n    const data = { appId: agent.appId, chatId };\n\n    const attempts = this.buildEndpointAttempts(\n      this.historyEndpointBases,\n      ['delete', 'removeHistory', 'delHistory'],\n      'post',\n    );\n\n    const response = await this.requestWithFallback(agent, attempts, { data });\n    const payload = response.data;\n    if (payload?.code && payload.code !== 200) {\n      throw new Error(payload?.message || 'FastGPT 删除历史记录失败');\n    }\n\n    this.invalidateHistoryCaches(agentId, chatId);\n  }\n\n  async clearHistories(agentId: string): Promise<void> {\n    const agent = await this.ensureFastGPTAgent(agentId);\n    const data = { appId: agent.appId };\n\n    const attempts = [\n      ...this.buildEndpointAttempts(this.historyEndpointBases, ['clear', 'clearHistories'], 'post'),\n      ...this.buildEndpointAttempts(this.historyEndpointBases, ['clear'], 'delete'),\n    ];\n\n    const response = await this.requestWithFallback(agent, attempts, { data });\n    const payload = response.data;\n    if (payload?.code && payload.code !== 200) {\n      throw new Error(payload?.message || 'FastGPT 清空历史记录失败');\n    }\n\n    this.invalidateHistoryCaches(agentId);\n  }\n\n  async updateUserFeedback(\n    agentId: string,\n    payload: {\n      chatId: string;\n      dataId: string;\n      userGoodFeedback?: string;\n      userBadFeedback?: string;\n    },\n  ): Promise<void> {\n    const agent = await this.ensureFastGPTAgent(agentId);\n\n    const data: Record<string, any> = {\n      appId: agent.appId,\n      chatId: payload.chatId,\n      dataId: payload.dataId,\n    };\n\n    if (payload.userGoodFeedback) {\n      data.userGoodFeedback = payload.userGoodFeedback;\n    }\n    if (payload.userBadFeedback) {\n      data.userBadFeedback = payload.userBadFeedback;\n    }\n\n    const attempts = this.buildEndpointAttempts(\n      this.feedbackEndpointBases,\n      ['updateUserFeedback'],\n      'post',\n    );\n\n    const response = await this.requestWithFallback(agent, attempts, { data });\n    const respPayload = response.data;\n    if (respPayload?.code && respPayload.code !== 200) {\n      throw new Error(respPayload?.message || 'FastGPT 更新反馈失败');\n    }\n  }\n\n  prepareRetryPayload(\n    detail: FastGPTChatHistoryDetail,\n    targetDataId: string,\n  ): { messages: ChatMessage[]; responseChatItemId?: string } | null {\n    if (!detail || !Array.isArray(detail.messages)) {\n      return null;\n    }\n\n    const index = detail.messages.findIndex((msg) => msg.dataId === targetDataId || msg.id === targetDataId);\n    if (index === -1) {\n      return null;\n    }\n\n    const assistantEntry = detail.messages[index];\n    const previousUser = [...detail.messages]\n      .slice(0, index)\n      .reverse()\n      .find((msg) => msg.role === 'user');\n\n    if (!previousUser) {\n      return null;\n    }\n\n    const messages: ChatMessage[] = [\n      {\n        role: 'user',\n        content: previousUser.content,\n      },\n    ];\n\n    const responseChatItemIdRaw = assistantEntry?.dataId ?? assistantEntry?.id;\n    const responseChatItemId = responseChatItemIdRaw ? String(responseChatItemIdRaw) : undefined;\n\n    const result: { messages: ChatMessage[]; responseChatItemId?: string } = { messages };\n    if (responseChatItemId) {\n      result.responseChatItemId = responseChatItemId;\n    }\n\n    return result;\n  }\n\n  // ==================== 增强功能方法 ====================\n\n  /**\n   * 增强版会话列表查询 - 支持分页、过滤、排序\n   */\n  async listHistoriesEnhanced(\n    agentId: string,\n    params?: SessionListParams,\n  ): Promise<PaginatedResponse<FastGPTChatHistorySummary>> {\n    const agent = await this.ensureFastGPTAgent(agentId);\n\n    // 构建查询参数\n    const queryParams: Record<string, any> = {\n      appId: agent.appId,\n      page: params?.page ?? 1,\n      pageSize: params?.pageSize ?? 10,\n    };\n\n    // 添加过滤条件\n    if (params?.startDate) {\n      queryParams.startDate = params.startDate;\n    }\n    if (params?.endDate) {\n      queryParams.endDate = params.endDate;\n    }\n    if (params?.tags && params.tags.length > 0) {\n      queryParams.tags = params.tags.join(',');\n    }\n    if (params?.minMessageCount) {\n      queryParams.minMessageCount = params.minMessageCount;\n    }\n    if (params?.maxMessageCount) {\n      queryParams.maxMessageCount = params.maxMessageCount;\n    }\n    if (params?.searchKeyword) {\n      queryParams.searchKeyword = params.searchKeyword;\n    }\n    if (params?.sortBy) {\n      queryParams.sortBy = params.sortBy;\n    }\n    if (params?.sortOrder) {\n      queryParams.sortOrder = params.sortOrder;\n    }\n\n    const attempts = this.buildEndpointAttempts(\n      this.historyEndpointBases,\n      ['listEnhanced', 'getHistoryListEnhanced', 'getHistoriesEnhanced', 'list'],\n      'get',\n    );\n\n    try {\n      const response = await this.requestWithFallback(agent, attempts, { params: queryParams });\n      const payload = response.data;\n\n      if (payload?.code && payload.code !== 200) {\n        throw new Error(payload?.message || 'FastGPT 获取会话列表失败');\n      }\n\n      const rawData = payload?.data;\n      const sessions = Array.isArray(rawData?.list || rawData)\n        ? (rawData.list || rawData).map((item: Record<string, unknown>) => this.normalizeHistorySummary(item))\n        : [];\n\n      // 如果远程API不支持增强功能，则使用本地过滤和排序\n      if (!params || Object.keys(params).length === 0 ||\n          (params.page === undefined && params.pageSize === undefined)) {\n        return this.applyLocalFilteringAndPagination(sessions, params);\n      }\n\n      return {\n        data: sessions,\n        total: rawData?.total || sessions.length,\n        page: params?.page ?? 1,\n        pageSize: params?.pageSize ?? 10,\n        totalPages: Math.ceil((rawData?.total || sessions.length) / (params?.pageSize ?? 10)),\n        hasNext: (params?.page ?? 1) * (params?.pageSize ?? 10) < (rawData?.total || sessions.length),\n        hasPrev: (params?.page ?? 1) > 1,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'FastGPTSessionService',\n        operation: 'listHistoriesAdvanced',\n      });\n      // 如果增强API不可用，回退到基础API并应用本地处理\n      logger.warn('增强版会话API不可用，使用基础API + 本地处理', { error: error.toLogObject() });\n      const allSessions = await this.listHistories(agentId, { page: 1, pageSize: 1000 });\n      return this.applyLocalFilteringAndPagination(allSessions, params);\n    }\n  }\n\n  /**\n   * 本地过滤和分页处理\n   */\n  private applyLocalFilteringAndPagination(\n    sessions: FastGPTChatHistorySummary[],\n    params?: SessionListParams,\n  ): PaginatedResponse<FastGPTChatHistorySummary> {\n    let filteredSessions = [...sessions];\n\n    // 日期范围过滤\n    if (params?.startDate) {\n      const startDate = new Date(params.startDate);\n      filteredSessions = filteredSessions.filter(session =>\n        new Date(session.createdAt) >= startDate,\n      );\n    }\n    if (params?.endDate) {\n      const endDate = new Date(params.endDate);\n      filteredSessions = filteredSessions.filter(session =>\n        new Date(session.updatedAt) <= endDate,\n      );\n    }\n\n    // 标签过滤\n    if (params?.tags && params.tags.length > 0) {\n      filteredSessions = filteredSessions.filter(session =>\n        session.tags && params.tags!.some(tag => session.tags!.includes(tag)),\n      );\n    }\n\n    // 消息数量过滤\n    if (params?.minMessageCount) {\n      filteredSessions = filteredSessions.filter(session =>\n        (session.messageCount ?? 0) >= params.minMessageCount!,\n      );\n    }\n    if (params?.maxMessageCount) {\n      filteredSessions = filteredSessions.filter(session =>\n        (session.messageCount ?? 0) <= params.maxMessageCount!,\n      );\n    }\n\n    // 关键词搜索\n    if (params?.searchKeyword) {\n      const keyword = params.searchKeyword.toLowerCase();\n      filteredSessions = filteredSessions.filter(session =>\n        session.title.toLowerCase().includes(keyword),\n      );\n    }\n\n    // 排序\n    const sortBy = params?.sortBy || 'updatedAt';\n    const sortOrder = params?.sortOrder || 'desc';\n\n    filteredSessions.sort((a, b) => {\n      let aValue: string | number | Date;\n      let bValue: string | number | Date;\n\n      switch (sortBy) {\n        case 'createdAt':\n          aValue = new Date(a.createdAt).getTime();\n          bValue = new Date(b.createdAt).getTime();\n          break;\n        case 'updatedAt':\n          aValue = new Date(a.updatedAt).getTime();\n          bValue = new Date(b.updatedAt).getTime();\n          break;\n        case 'messageCount':\n          aValue = a.messageCount ?? 0;\n          bValue = b.messageCount ?? 0;\n          break;\n        case 'title':\n          aValue = a.title.toLowerCase();\n          bValue = b.title.toLowerCase();\n          break;\n        default:\n          aValue = new Date(a.updatedAt).getTime();\n          bValue = new Date(b.updatedAt).getTime();\n      }\n\n      if (sortOrder === 'asc') {\n        return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;\n      } else {\n        return aValue < bValue ? 1 : aValue > bValue ? -1 : 0;\n      }\n    });\n\n    // 分页\n    const page = params?.page ?? 1;\n    const pageSize = params?.pageSize ?? 10;\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    const paginatedData = filteredSessions.slice(startIndex, endIndex);\n\n    return {\n      data: paginatedData,\n      total: filteredSessions.length,\n      page,\n      pageSize,\n      totalPages: Math.ceil(filteredSessions.length / pageSize),\n      hasNext: endIndex < filteredSessions.length,\n      hasPrev: page > 1,\n    };\n  }\n\n  /**\n   * 批量操作会话\n   */\n  async batchOperation(\n    agentId: string,\n    options: BatchOperationOptions,\n  ): Promise<{ success: number; failed: number; errors: string[] }> {\n    const agent = await this.ensureFastGPTAgent(agentId);\n    const results = { success: 0, failed: 0, errors: [] as string[] };\n\n    for (const sessionId of options.sessionIds) {\n      try {\n        switch (options.operation) {\n          case 'delete':\n            await this.deleteHistory(agentId, sessionId);\n            // 记录删除事件\n            await this.recordEvent(agentId, sessionId, 'deleted', {\n              reason: 'batch_operation',\n            });\n            break;\n\n          case 'archive':\n            // 归档操作 - 可以通过添加特定标签实现\n            await this.addTagsToSession(agentId, sessionId, ['archived']);\n            await this.recordEvent(agentId, sessionId, 'archived', {\n              reason: 'batch_operation',\n            });\n            break;\n\n          case 'addTags':\n            if (options.tags && options.tags.length > 0) {\n              await this.addTagsToSession(agentId, sessionId, options.tags);\n              await this.recordEvent(agentId, sessionId, 'tags_updated', {\n                tags: options.tags,\n                operation: 'add',\n              });\n            }\n            break;\n\n          case 'removeTags':\n            if (options.tags && options.tags.length > 0) {\n              await this.removeTagsFromSession(agentId, sessionId, options.tags);\n              await this.recordEvent(agentId, sessionId, 'tags_updated', {\n                tags: options.tags,\n                operation: 'remove',\n              });\n            }\n            break;\n\n          default:\n            throw new Error(`不支持的批量操作: ${options.operation}`);\n        }\n\n        results.success++;\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'FastGPTSessionService',\n          operation: 'batchOperation',\n        });\n        results.failed++;\n        const errorMsg = `会话 ${sessionId} 操作失败: ${error.message}`;\n        results.errors.push(errorMsg);\n        logger.error(errorMsg, error.toLogObject());\n      }\n    }\n\n    // 清除缓存\n    this.invalidateHistoryCaches(agentId);\n\n    return results;\n  }\n\n  /**\n   * 为会话添加标签\n   */\n  private async addTagsToSession(\n    agentId: string,\n    sessionId: string,\n    tags: string[],\n  ): Promise<void> {\n    // 这里需要根据FastGPT的具体API来实现\n    // 由于当前API可能不直接支持标签操作，可以使用updateUserFeedback的变体\n    // 或者通过其他API端点来实现\n    logger.debug('为会话添加标签', { sessionId, tags });\n    // 实际实现需要调用相应的FastGPT API\n  }\n\n  /**\n   * 从会话移除标签\n   */\n  private async removeTagsFromSession(\n    agentId: string,\n    sessionId: string,\n    tags: string[],\n  ): Promise<void> {\n    logger.debug('从会话移除标签', { sessionId, tags });\n    // 实际实现需要调用相应的FastGPT API\n  }\n\n  /**\n   * 导出会话数据\n   */\n  async exportSessions(\n    agentId: string,\n    options: ExportOptions,\n  ): Promise<{ filename: string; data: string | Buffer }> {\n    // 获取符合条件的会话\n    const result = await this.listHistoriesEnhanced(agentId, options.filters);\n    const sessions = result.data;\n\n    let exportData: string | Buffer;\n    let filename: string;\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n\n    switch (options.format) {\n      case 'json':\n        exportData = await this.exportToJson(sessions, options);\n        filename = `sessions_${timestamp}.json`;\n        break;\n\n      case 'csv':\n        exportData = await this.exportToCsv(sessions, options);\n        filename = `sessions_${timestamp}.csv`;\n        break;\n\n      case 'excel':\n        exportData = await this.exportToExcel(sessions, options);\n        filename = `sessions_${timestamp}.xlsx`;\n        break;\n\n      default:\n        throw new Error(`不支持的导出格式: ${options.format}`);\n    }\n\n    // 记录导出事件\n    await this.recordEvent(agentId, 'batch_export', 'exported', {\n      format: options.format,\n      sessionCount: sessions.length,\n      includeMessages: options.includeMessages,\n      includeMetadata: options.includeMetadata,\n    });\n\n    return { filename, data: exportData };\n  }\n\n  /**\n   * 导出为JSON格式\n   */\n  private async exportToJson(\n    sessions: FastGPTChatHistorySummary[],\n    options: ExportOptions,\n  ): Promise<string> {\n    const exportData = {\n      metadata: {\n        exportedAt: new Date().toISOString(),\n        totalSessions: sessions.length,\n        includeMessages: options.includeMessages || false,\n        includeMetadata: options.includeMetadata || false,\n        filters: options.filters,\n      },\n      sessions: [] as any[],\n    };\n\n    for (const session of sessions) {\n      const sessionData: Record<string, unknown> = {\n        chatId: session.chatId,\n        title: session.title,\n        createdAt: session.createdAt,\n        updatedAt: session.updatedAt,\n        messageCount: session.messageCount,\n        tags: session.tags,\n      };\n\n      // 包含元数据\n      if (options.includeMetadata && session.raw) {\n        sessionData.raw = session.raw;\n      }\n\n      // 包含消息内容\n      if (options.includeMessages) {\n        try {\n          // 这里需要获取会话详情，但需要知道agentId\n          // 暂时跳过，实际实现时需要传入agentId\n          logger.debug('获取会话的详细消息', { chatId: session.chatId });\n        } catch (unknownError: unknown) {\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'FastGPTSessionService',\n            operation: 'exportToJson',\n          });\n          logger.warn('获取会话消息失败', { chatId: session.chatId, error: error.toLogObject() });\n        }\n      }\n\n      exportData.sessions.push(sessionData);\n    }\n\n    return JSON.stringify(exportData, null, 2);\n  }\n\n  /**\n   * 导出为CSV格式\n   */\n  private async exportToCsv(\n    sessions: FastGPTChatHistorySummary[],\n    options: ExportOptions,\n  ): Promise<string> {\n    const headers = [\n      'Chat ID',\n      'Title',\n      'Created At',\n      'Updated At',\n      'Message Count',\n      'Tags',\n    ];\n\n    if (options.includeMetadata) {\n      headers.push('Raw Data');\n    }\n\n    const csvRows = [headers.join(',')];\n\n    for (const session of sessions) {\n      const row = [\n        `\"${session.chatId}\"`,\n        `\"${this.escapeCsv(session.title)}\"`,\n        session.createdAt,\n        session.updatedAt,\n        String(session.messageCount ?? 0),\n        `\"${(session.tags || []).join(';')}\"`,\n      ];\n\n      if (options.includeMetadata && session.raw) {\n        row.push(`\"${this.escapeCsv(JSON.stringify(session.raw))}\"`);\n      }\n\n      csvRows.push(row.join(','));\n    }\n\n    return csvRows.join('\\n');\n  }\n\n  /**\n   * 导出为Excel格式\n   */\n  private async exportToExcel(\n    sessions: FastGPTChatHistorySummary[],\n    options: ExportOptions,\n  ): Promise<Buffer> {\n    // 这里需要使用xlsx库来生成Excel文件\n    // 由于当前环境可能没有安装，先返回CSV格式的Buffer\n    const csvData = await this.exportToCsv(sessions, options);\n    return Buffer.from(csvData, 'utf-8');\n  }\n\n  /**\n   * 转义CSV字段\n   */\n  private escapeCsv(field: string): string {\n    return field.replace(/\"/g, '\"\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n  }\n\n  /**\n   * 记录会话事件\n   */\n  async recordEvent(\n    agentId: string,\n    sessionId: string,\n    eventType: SessionEventType,\n    metadata?: Record<string, unknown>,\n    context?: {\n      userId?: string;\n      userAgent?: string;\n      ipAddress?: string;\n    },\n  ): Promise<void> {\n    try {\n      await this.eventService.recordEvent(\n        agentId,\n        sessionId,\n        eventType,\n        metadata,\n        context,\n      );\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'FastGPTSessionService',\n        operation: 'recordEvent',\n      });\n      logger.error('记录会话事件失败', { error: error.toLogObject() });\n      // 事件记录失败不应该影响主要功能\n    }\n  }\n\n  /**\n   * 查询会话事件\n   */\n  async queryEvents(\n    agentId: string,\n    params: EventQueryParams,\n  ): Promise<PaginatedResponse<SessionEvent>> {\n    try {\n      return await this.eventService.queryEvents(agentId, params);\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'FastGPTSessionService',\n        operation: 'queryEvents',\n      });\n      logger.error('查询会话事件失败', { error: error.toLogObject() });\n      // 返回空结果而不是抛出错误\n      return {\n        data: [],\n        total: 0,\n        page: params.page ?? 1,\n        pageSize: params.pageSize || 20,\n        totalPages: 0,\n        hasNext: false,\n        hasPrev: false,\n      };\n    }\n  }\n\n  /**\n   * 获取会话统计信息\n   */\n  async getSessionStats(agentId: string, dateRange?: { start: string; end: string }): Promise<{\n    totalSessions: number;\n    totalMessages: number;\n    averageMessagesPerSession: number;\n    topTags: Array<{ tag: string; count: number }>;\n    recentActivity: Array<{ date: string; sessions: number; messages: number }>;\n  }> {\n    const params: SessionListParams = {};\n    if (dateRange) {\n      params.startDate = dateRange.start;\n      params.endDate = dateRange.end;\n    }\n\n    const result = await this.listHistoriesEnhanced(agentId, {\n      ...params,\n      pageSize: 1000,\n    });\n\n    const sessions = result.data;\n    const totalSessions = sessions.length;\n    const totalMessages = sessions.reduce((sum, session) => sum + (session.messageCount ?? 0), 0);\n    const averageMessagesPerSession = totalSessions > 0 ? totalMessages / totalSessions : 0;\n\n    // 统计标签使用情况\n    const tagCounts = new Map<string, number>();\n    sessions.forEach(session => {\n      if (session.tags) {\n        session.tags.forEach(tag => {\n          tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);\n        });\n      }\n    });\n\n    const topTags = Array.from(tagCounts.entries())\n      .map(([tag, count]) => ({ tag, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    // 按日期统计最近活动\n    const activityMap = new Map<string, { sessions: number; messages: number }>();\n    sessions.forEach(session => {\n      const date = (session.updatedAt || '').split('T')[0] || '';\n      const current = activityMap.get(date) || { sessions: 0, messages: 0 };\n      current.sessions++;\n      current.messages += (session.messageCount ?? 0);\n      activityMap.set(date, current);\n    });\n\n    const recentActivity = Array.from(activityMap.entries())\n      .map(([date, data]) => ({ date, ...data }))\n      .sort((a, b) => b.date.localeCompare(a.date))\n      .slice(0, 30);\n\n    return {\n      totalSessions,\n      totalMessages,\n      averageMessagesPerSession: Math.round(averageMessagesPerSession * 100) / 100,\n      topTags,\n      recentActivity,\n    };\n  }\n}\n\nexport type { FastGPTChatHistorySummary };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/GeoService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":65,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":66,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":66,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":66,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":66,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .split on an `any` value.","line":66,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [0] on an `any` value.","line":66,"column":34,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":66,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":70,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":70,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":70,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .replace on an `any` value.","line":70,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":71,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":71,"endColumn":28},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":144,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":144,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4872,4874],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import geoip from 'geoip-lite';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\ninterface GeoLookupResult {\n  country: string;\n  province: string;\n  city: string | null;\n}\n\nconst PRIVATE_IP_PATTERNS: RegExp[] = [\n  /^10\\./,\n  /^192\\.168\\./,\n  /^172\\.(1[6-9]|2\\d|3[0-1])\\./,\n  /^127\\./,\n  /^::1$/,\n  /^fc00:/i,\n  /^fe80:/i,\n];\n\nconst PROVINCE_MAPPINGS: Array<{ name: string; keywords: string[] }> = [\n  { name: '北京', keywords: ['beijing', 'bj', '11', '110000', '北京市'] },\n  { name: '天津', keywords: ['tianjin', 'tj', '12', '120000', '天津市'] },\n  { name: '上海', keywords: ['shanghai', 'sh', '31', '310000', '上海市'] },\n  { name: '重庆', keywords: ['chongqing', 'cq', '50', '500000', '重庆市'] },\n  { name: '河北', keywords: ['hebei', 'he', '13', '130000'] },\n  { name: '山西', keywords: ['shanxi', 'sx', '14', '140000'] },\n  { name: '内蒙古', keywords: ['inner mongolia', 'neimenggu', 'nm', '15', '150000', 'neimeng'] },\n  { name: '辽宁', keywords: ['liaoning', 'ln', '21', '210000'] },\n  { name: '吉林', keywords: ['jilin', 'jl', '22', '220000'] },\n  { name: '黑龙江', keywords: ['heilongjiang', 'hl', '23', '230000', 'heilong'] },\n  { name: '江苏', keywords: ['jiangsu', 'js', '32', '320000'] },\n  { name: '浙江', keywords: ['zhejiang', 'zj', '33', '330000'] },\n  { name: '安徽', keywords: ['anhui', 'ah', '34', '340000'] },\n  { name: '福建', keywords: ['fujian', 'fj', '35', '350000'] },\n  { name: '江西', keywords: ['jiangxi', 'jx', '36', '360000'] },\n  { name: '山东', keywords: ['shandong', 'sd', '37', '370000'] },\n  { name: '河南', keywords: ['henan', 'ha', '41', '410000'] },\n  { name: '湖北', keywords: ['hubei', 'hb', '42', '420000'] },\n  { name: '湖南', keywords: ['hunan', 'hn', '43', '430000'] },\n  { name: '广东', keywords: ['guangdong', 'gd', '44', '440000'] },\n  { name: '广西', keywords: ['guangxi', 'gx', '45', '450000', 'guangxi zhuang', 'nanning'] },\n  { name: '海南', keywords: ['hainan', 'hi', '46', '460000'] },\n  { name: '四川', keywords: ['sichuan', 'sc', '51', '510000'] },\n  { name: '贵州', keywords: ['guizhou', 'gz', '52', '520000'] },\n  { name: '云南', keywords: ['yunnan', 'yn', '53', '530000'] },\n  { name: '西藏', keywords: ['xizang', 'xz', '54', '540000', 'tibet', 'lhasa'] },\n  { name: '陕西', keywords: ['shaanxi', 'sn', '61', '610000', 'shaanxi sheng', 'xian'] },\n  { name: '甘肃', keywords: ['gansu', 'gs', '62', '620000'] },\n  { name: '青海', keywords: ['qinghai', 'qh', '63', '630000'] },\n  { name: '宁夏', keywords: ['ningxia', 'nx', '64', '640000'] },\n  { name: '新疆', keywords: ['xinjiang', 'xj', '65', '650000', 'urumqi'] },\n  { name: '香港', keywords: ['hong kong', 'hk'] },\n  { name: '澳门', keywords: ['macau', 'mo', 'aomen'] },\n  { name: '台湾', keywords: ['taiwan', 'tw', 'taipei'] },\n];\n\nconst PROVINCE_NAMES = PROVINCE_MAPPINGS.map((item) => item.name);\n\nexport class GeoService {\n  normalizeIp(ip?: string | null): string | null {\n    if (!ip) {\n      return null;\n    }\n    const raw = Array.isArray(ip) ? ip[0] : ip;\n    const first = raw.split(',')[0]?.trim();\n    if (!first) {\n      return null;\n    }\n    const cleaned = first.replace(/^::ffff:/i, '');\n    return cleaned || null;\n  }\n\n  private isPrivateIp(ip: string): boolean {\n    return PRIVATE_IP_PATTERNS.some((pattern) => pattern.test(ip));\n  }\n\n  private matchProvince(region?: string | null, city?: string | null): string | null {\n    const tokens = [region, city]\n      .map((value) => (value ? value.toString().trim().toLowerCase() : ''))\n      .filter(Boolean);\n\n    for (const token of tokens) {\n      const matched = PROVINCE_MAPPINGS.find((item) =>\n        item.keywords.some((keyword) => token.includes(keyword)),\n      );\n      if (matched) {\n        return matched.name;\n      }\n    }\n\n    // 对于 region 值可能是数字代码的情况，单独再匹配一次完整等值\n    for (const value of [region, city]) {\n      if (!value) {\n        continue;\n      }\n      const normalized = value.toString().trim().toLowerCase();\n      const matched = PROVINCE_MAPPINGS.find((item) =>\n        item.keywords.some((keyword) => keyword === normalized),\n      );\n      if (matched) {\n        return matched.name;\n      }\n    }\n\n    return null;\n  }\n\n  lookup(ip: string | null | undefined): GeoLookupResult | null {\n    if (!ip) {\n      return null;\n    }\n    const normalized = this.normalizeIp(ip);\n    if (!normalized) {\n      return null;\n    }\n\n    if (this.isPrivateIp(normalized)) {\n      return {\n        country: 'LOCAL',\n        province: '本地',\n        city: null,\n      };\n    }\n\n    try {\n      const record = geoip.lookup(normalized);\n      if (!record) {\n        return {\n          country: 'UNKNOWN',\n          province: '未知',\n          city: null,\n        };\n      }\n\n      if (record.country !== 'CN') {\n        return {\n          country: record.country,\n          province: '海外',\n          city: record.city || null,\n        };\n      }\n\n      const province = this.matchProvince(record.region, record.city) || '未知';\n      return {\n        country: record.country,\n        province,\n        city: record.city || null,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'GeoService',\n        operation: 'lookup',\n      });\n      logger.warn('[GeoService] lookup failed', error.toLogObject());\n      return {\n        country: 'UNKNOWN',\n        province: '未知',\n        city: null,\n      };\n    }\n  }\n\n  getProvinceNames(): string[] {\n    return PROVINCE_NAMES;\n  }\n}\n\nexport const geoService = new GeoService();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/ObservabilityDispatcher.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[504,507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[504,507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 103. Maximum allowed is 100.","line":43,"column":1,"nodeType":"Program","messageId":"max","endLine":43,"endColumn":104},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 250.","line":49,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":49,"endColumn":38},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2262,2264],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 104. Maximum allowed is 100.","line":111,"column":1,"nodeType":"Program","messageId":"max","endLine":111,"endColumn":105},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":135,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":135,"endColumn":40},{"ruleId":"max-len","severity":1,"message":"This line has a length of 103. Maximum allowed is 100.","line":138,"column":1,"nodeType":"Program","messageId":"max","endLine":138,"endColumn":104},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":139,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":139,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4375,4377],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":155,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":155,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4925,4927],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":159,"column":25,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":159,"endColumn":43,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5091,5092],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 106. Maximum allowed is 100.","line":162,"column":1,"nodeType":"Program","messageId":"max","endLine":162,"endColumn":107},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":163,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":163,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5286,5288],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":170,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":170,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5606,5608],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { loadAppConfig, resolveLoggingExportersFromEnv, type AppConfig, type LoggingExporterConfig } from '@/utils/appConfig';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface ObservabilityEvent {\n  timestamp: string;\n  channel: 'normal' | 'stream';\n  level: 'INFO' | 'WARN' | 'ERROR';\n  agentId: string;\n  provider?: string;\n  endpoint?: string;\n  chatId?: string;\n  eventType?: string;\n  payload: Record<string, any> | null;\n}\n\ninterface RuntimeExporter extends LoggingExporterConfig {\n  batchSize: number;\n  flushIntervalMs: number;\n}\n\nconst DEFAULT_BATCH_SIZE = 20;\nconst DEFAULT_FLUSH_INTERVAL = 2000;\n\nexport class ObservabilityDispatcher {\n  private static instance: ObservabilityDispatcher | null = null;\n\n  static getInstance(): ObservabilityDispatcher {\n    if (!ObservabilityDispatcher.instance) {\n      ObservabilityDispatcher.instance = new ObservabilityDispatcher(loadAppConfig());\n    }\n    return ObservabilityDispatcher.instance;\n  }\n\n  private readonly exporters: RuntimeExporter[] = [];\n  private readonly queue: ObservabilityEvent[] = [];\n  private flushing = false;\n  private flushTimer: ReturnType<typeof setTimeout> | null = null;\n  private readonly minBatchSize: number;\n\n  private constructor(config: AppConfig) {\n    const configExporters = (config.logging?.exporters ?? []).concat(resolveLoggingExportersFromEnv());\n    this.exporters = configExporters\n      .filter((exp) => exp && exp.enabled !== false && exp.type)\n      .map((exp) => ({\n        ...exp,\n        batchSize: Math.max(1, exp.batchSize ?? DEFAULT_BATCH_SIZE),\n        flushIntervalMs: Math.max(250, exp.flushIntervalMs ?? DEFAULT_FLUSH_INTERVAL),\n      }));\n    this.minBatchSize = this.exporters.length > 0\n      ? Math.min(...this.exporters.map((exp) => exp.batchSize))\n      : DEFAULT_BATCH_SIZE;\n  }\n\n  isEnabled(): boolean {\n    return this.exporters.length > 0;\n  }\n\n  enqueue(event: ObservabilityEvent): void {\n    if (!this.isEnabled()) {\n      return;\n    }\n    this.queue.push(event);\n    if (this.queue.length >= this.minBatchSize) {\n      void this.flush();\n      return;\n    }\n    this.scheduleFlush();\n  }\n\n  private scheduleFlush(): void {\n    if (this.flushTimer || !this.isEnabled()) {\n      return;\n    }\n    const interval = Math.min(...this.exporters.map((exp) => exp.flushIntervalMs));\n    this.flushTimer = setTimeout(() => {\n      this.flushTimer = null;\n      void this.flush();\n    }, interval);\n  }\n\n  private async flush(): Promise<void> {\n    if (this.flushing || !this.queue.length || !this.isEnabled()) {\n      return;\n    }\n    this.flushing = true;\n    const batch = this.queue.splice(0, this.queue.length);\n    await Promise.all(\n      this.exporters.map(async (exporter) => {\n        const chunks = chunk(batch, exporter.batchSize);\n        for (const slice of chunks) {\n          try {\n            await this.sendToExporter(exporter, slice);\n          } catch (unknownError: unknown) {\n            const error = createErrorFromUnknown(unknownError, {\n              component: 'ObservabilityDispatcher',\n              operation: 'flushQueue',\n            });\n            logger.warn('[ObservabilityDispatcher] Export failed', { exporterType: exporter.type, ...error.toLogObject() });\n          }\n        }\n      }),\n    );\n    this.flushing = false;\n    if (this.queue.length) {\n      this.scheduleFlush();\n    }\n  }\n\n  private async sendToExporter(exporter: RuntimeExporter, events: ObservabilityEvent[]): Promise<void> {\n    if (!events.length) {\n      return;\n    }\n    if (!exporter.endpoint) {\n      return;\n    }\n\n    switch (exporter.type) {\n      case 'elasticsearch':\n        await this.sendToElastic(exporter, events);\n        break;\n      case 'clickhouse':\n        await this.sendToClickHouse(exporter, events);\n        break;\n      default:\n        await this.sendToHttp(exporter, events);\n    }\n  }\n\n  private async sendToHttp(exporter: RuntimeExporter, events: ObservabilityEvent[]): Promise<void> {\n    const config: Parameters<typeof axios.post>[2] | undefined = exporter.headers\n      ? { headers: exporter.headers }\n      : undefined;\n    await axios.post(exporter.endpoint!, { events }, config);\n  }\n\n  private async sendToElastic(exporter: RuntimeExporter, events: ObservabilityEvent[]): Promise<void> {\n    const index = exporter.index || 'fastgpt-events';\n    const bulkBody = events\n      .map((event) => {\n        const action = { index: { _index: index } };\n        return `${JSON.stringify(action)}\\n${JSON.stringify(event)}`;\n      })\n      .join('\\n') + '\\n';\n\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/x-ndjson',\n      ...(exporter.headers ?? {}),\n    };\n    if (exporter.apiKey) {\n      headers.Authorization = `ApiKey ${exporter.apiKey}`;\n    }\n    const config: Parameters<typeof axios.post>[2] = { headers };\n    if (exporter.username || exporter.password) {\n      config.auth = { username: exporter.username ?? '', password: exporter.password ?? '' };\n    }\n\n    await axios.post(`${exporter.endpoint!.replace(/\\/+$/, '')}/_bulk`, bulkBody, config);\n  }\n\n  private async sendToClickHouse(exporter: RuntimeExporter, events: ObservabilityEvent[]): Promise<void> {\n    const table = exporter.table || 'fastgpt_events';\n    const payload = events.map((event) => JSON.stringify(event)).join('\\n');\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...(exporter.headers ?? {}),\n    };\n    const config: Parameters<typeof axios.post>[2] = { headers };\n    if (exporter.username || exporter.password) {\n      config.auth = { username: exporter.username ?? '', password: exporter.password ?? '' };\n    }\n    await axios.post(\n      `${exporter.endpoint}?query=${encodeURIComponent(`INSERT INTO ${table} FORMAT JSONEachRow`)}`,\n      payload,\n      config,\n    );\n  }\n}\n\nfunction chunk<T>(items: T[], size: number): T[][] {\n  const result: T[][] = [];\n  for (let i = 0; i < items.length; i += size) {\n    result.push(items.slice(i, i + size));\n  }\n  return result;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/PasswordService.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 12.","line":18,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":18,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 64.","line":19,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":19,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 16.","line":20,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":20,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":21,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":21,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 128.","line":22,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":22,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":63,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":63,"endColumn":29},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":142,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":142,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":143,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":143,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":174,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":174,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { randomBytes, scrypt as scryptCallback, timingSafeEqual } from 'crypto';\nimport { ValidationError, SystemError, createErrorFromUnknown } from '@/types/errors';\n\n/**\n * 密码强度检查结果\n */\nexport interface PasswordStrengthResult {\n  valid: boolean;\n  score: number; // 0-4\n  feedback: Array<string>;\n}\n\n/**\n * 密码服务\n * 提供密码散列、验证和强度检查功能\n */\nexport class PasswordService {\n  private readonly saltRounds = 12;\n  private readonly keyLength = 64;\n  private readonly saltSize = 16; // bytes\n  private readonly minLength = 8;\n  private readonly maxLength = 128;\n\n  /**\n   * 散列密码\n   * @param plainPassword 明文密码\n   * @returns 散列后的密码\n   */\n  async hashPassword(plainPassword: string): Promise<string> {\n    this.validatePasswordFormat(plainPassword);\n    try {\n      const salt = randomBytes(this.saltSize).toString('hex');\n      const hashBuffer = await this.deriveKey(plainPassword, salt);\n\n      const hash = hashBuffer.toString('hex');\n      return `scrypt$${salt}$${hash}`;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'PasswordService',\n        operation: 'hashPassword',\n      });\n      throw new SystemError({\n        message: 'Password hashing failed',\n        code: 'PASSWORD_HASH_ERROR',\n        originalError: error,\n      });\n    }\n  }\n\n  /**\n   * 验证密码\n   * @param plainPassword 明文密码\n   * @param hashedPassword 散列密码\n   * @returns 验证结果\n   */\n  async verifyPassword(plainPassword: string, hashedPassword: string): Promise<boolean> {\n    try {\n      if (!hashedPassword || typeof hashedPassword !== 'string') {\n        return false;\n      }\n\n      const parts = hashedPassword.split('$');\n      if (parts.length !== 3 || parts[0] !== 'scrypt') {\n        return false;\n      }\n\n      const [, salt, hash] = parts;\n      if (!salt || !hash) {\n        return false;\n      }\n\n      const derivedKey = await this.deriveKey(plainPassword, salt);\n\n      const storedKey = Buffer.from(hash, 'hex');\n      if (storedKey.length !== derivedKey.length) {\n        return false;\n      }\n\n      return timingSafeEqual(derivedKey, storedKey);\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'PasswordService',\n        operation: 'verifyPassword',\n      });\n      throw new SystemError({\n        message: 'Password verification failed',\n        code: 'PASSWORD_VERIFY_ERROR',\n        originalError: error,\n      });\n    }\n  }\n\n  /**\n   * 检查密码强度\n   * @param password 密码\n   * @returns 强度检查结果\n   */\n  checkPasswordStrength(password: string): PasswordStrengthResult {\n    const feedback: Array<string> = [];\n    let score = 0;\n\n    // 长度检查\n    if (password.length < this.minLength) {\n      feedback.push(`密码长度至少 ${this.minLength} 位`);\n    } else if (password.length >= this.minLength) {\n      score++;\n    }\n\n    // 复杂度检查\n    if (!/[a-z]/.test(password)) {\n      feedback.push('至少包含一个小写字母');\n    } else {\n      score++;\n    }\n\n    if (!/[A-Z]/.test(password)) {\n      feedback.push('至少包含一个大写字母');\n    } else {\n      score++;\n    }\n\n    if (!/[0-9]/.test(password)) {\n      feedback.push('至少包含一个数字');\n    } else {\n      score++;\n    }\n\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      feedback.push('建议包含特殊字符以增强安全性');\n    } else {\n      score++;\n    }\n\n    // 常见弱密码检查\n    const weakPasswords = ['password', '12345678', 'qwerty', 'admin123', 'password123'];\n    if (weakPasswords.some(weak => password.toLowerCase().includes(weak))) {\n      feedback.push('密码过于简单,请避免使用常见密码');\n      score = Math.max(0, score - 2);\n    }\n\n    return {\n      valid: score >= 3,\n      score: Math.min(4, score),\n      feedback,\n    };\n  }\n\n  /**\n   * 格式验证\n   * @param password 密码\n   */\n  private validatePasswordFormat(password: string): void {\n    if (!password || typeof password !== 'string') {\n      throw new ValidationError({\n        message: 'Password must be a non-empty string',\n        code: 'INVALID_PASSWORD_FORMAT',\n      });\n    }\n\n    if (password.length < this.minLength || password.length > this.maxLength) {\n      throw new ValidationError({\n        message: `Password length must be between ${this.minLength} and ${this.maxLength} characters`,\n        code: 'INVALID_PASSWORD_LENGTH',\n      });\n    }\n  }\n\n  private deriveKey(password: string, salt: string): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      scryptCallback(\n        password,\n        salt,\n        this.keyLength,\n        { N: 1 << Math.min(20, Math.max(1, this.saltRounds)), r: 8, p: 1 },\n        (error, derivedKey) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          resolve(derivedKey);\n        },\n      );\n    });\n  }\n}\n\n// 导出单例实例\nexport const passwordService = new PasswordService();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/ProductPreviewService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[465,468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[465,468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"complexity","severity":1,"message":"Async method 'generatePreview' has a complexity of 30. Maximum allowed is 18.","line":79,"column":24,"nodeType":"FunctionExpression","messageId":"complex","endLine":183,"endColumn":4},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":90,"column":84,"nodeType":"Literal","messageId":"noMagic","endLine":90,"endColumn":85},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":90,"column":107,"nodeType":"Literal","messageId":"noMagic","endLine":90,"endColumn":108},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":90,"column":134,"nodeType":"Literal","messageId":"noMagic","endLine":90,"endColumn":135},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":90,"column":162,"nodeType":"Literal","messageId":"noMagic","endLine":90,"endColumn":163},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2728,2731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2728,2731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":133,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":133,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3790,3824],"text":"(data?.requestId ?? data?.RequestId)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":133,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":133,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3825,3827],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":138,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":138,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3958,3960],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":143,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":143,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4080,4082],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":150,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":159,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":152,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":152,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4285,4348],"text":"(data?.data?.[0]?.url ??\n      // 兼容其他服务\n      data?.result?.url)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":154,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":154,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4331,4380],"text":"(data?.result?.url ??\n      data?.result?.imageUrl)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":155,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":155,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4285,4421],"text":"(data?.data?.[0]?.url ||\n      // 兼容其他服务\n      data?.result?.url ||\n      data?.result?.imageUrl ??\n      data?.output?.results?.[0]?.url)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":156,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":156,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4285,4460],"text":"(data?.data?.[0]?.url ||\n      // 兼容其他服务\n      data?.result?.url ||\n      data?.result?.imageUrl ||\n      data?.output?.results?.[0]?.url ??\n      (data as any)?.data?.imageUrl)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4440,4443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4440,4443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":157,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4479,4482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4479,4482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .imageUrl on an `any` value.","line":158,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":164,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":172,"endColumn":36},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":166,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":166,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4694,4774],"text":"(data?.data?.[0]?.b64_json ??\n        // 兼容其他服务\n        data?.result?.imageBase64)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":168,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":168,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4749,4812],"text":"(data?.result?.imageBase64 ??\n        data?.result?.image_base64)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":169,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":169,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4694,4856],"text":"(data?.data?.[0]?.b64_json ||\n        // 兼容其他服务\n        data?.result?.imageBase64 ||\n        data?.result?.image_base64 ??\n        data?.output?.results?.[0]?.data)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":170,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":170,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4694,4894],"text":"(data?.data?.[0]?.b64_json ||\n        // 兼容其他服务\n        data?.result?.imageBase64 ||\n        data?.result?.image_base64 ||\n        data?.output?.results?.[0]?.data ??\n        (data as any)?.imageBase64)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4877,4880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4877,4880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .imageBase64 on an `any` value.","line":171,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4915,4918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4915,4918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .image_base64 on an `any` value.","line":172,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":173,"column":75,"nodeType":"Literal","messageId":"noMagic","endLine":173,"endColumn":77}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport type { ProductPreviewRequest, ProductPreviewResult } from '@/types';\n\n// 定义豆包 / OpenAI 风格图片生成接口可能返回的数据结构（兼容多种字段命名）\ninterface ProductPreviewApiResponse {\n  requestId?: string;\n  RequestId?: string;\n  request_id?: string;\n  traceId?: string;\n  TraceId?: string;\n  status?: string;\n  Status?: string;\n  // OpenAI / Doubao 风格\n  data?: Array<{\n    url?: string;\n    b64_json?: string;\n  }>;\n  created?: number;\n  usage?: Record<string, any>;\n  // 兼容其他服务字段\n  result?: {\n    url?: string;\n    imageUrl?: string;\n    imageBase64?: string;\n    image_base64?: string;\n  };\n  output?: {\n    image_url?: string;\n    results?: Array<{\n      url?: string;\n      data?: string;\n    }>;\n  };\n  imageUrl?: string;\n  imageBase64?: string;\n  image_base64?: string;\n}\n\nconst normalizeDataUrl = (image: string): string => {\n  if (!image) {\n    return image;\n  }\n  if (image.startsWith('data:')) {\n    return image;\n  }\n  return `data:image/png;base64,${image}`;\n};\n\nexport class ProductPreviewService {\n  private readonly endpoint: string;\n  private readonly apiKey: string | undefined;\n  private readonly model: string | undefined;\n  private readonly size: string | undefined;\n  private readonly stream: boolean;\n\n  constructor() {\n    // 默认使用 Ark Doubao v3 端点，可通过 DOUBAO_IMAGE_API_URL 覆盖\n    this.endpoint = process.env.DOUBAO_IMAGE_API_URL ?? 'https://ark.cn-beijing.volces.com/api/v3/images/generations';\n    this.apiKey = process.env.DOUBAO_API_KEY;\n    this.model = process.env.DOUBAO_IMAGE_MODEL ?? 'doubao-seedream-4-0-250828';\n    this.size = process.env.DOUBAO_IMAGE_SIZE ?? '1024x1024';\n    this.stream = String(process.env.DOUBAO_IMAGE_STREAM ?? 'false').toLowerCase() === 'true';\n  }\n\n  /**\n   * 生成产品场景融合预览图（豆包 SeeDream）\n   *\n   * 该方法调用豆包图片生成接口，基于提供的产品图、场景图及目标框位进行融合，返回预览结果。\n   *\n   * 参数说明:\n   * - payload: ProductPreviewRequest 输入请求，包含产品图、场景图、目标框位、个性化提示等信息\n   *\n   * 返回值:\n   * - Promise<ProductPreviewResult>: 返回包含请求标识、跟踪ID、状态、原始返回以及预览图URL或Base64的结构化结果\n   *\n   * 可能抛出的异常:\n   * - Error: 当未配置接口地址或网络/鉴权错误导致请求失败时抛出\n   */\n  async generatePreview(payload: ProductPreviewRequest): Promise<ProductPreviewResult> {\n    if (!this.endpoint) {\n      throw new Error('未配置豆包图片生成接口地址（DOUBAO_IMAGE_API_URL）');\n    }\n\n    const promptSegments = [payload.productQuery];\n    if (payload.personalization) {\n      promptSegments.push(payload.personalization);\n    }\n    // 将目标框位也加入提示，便于在不支持 target_box 的端点上获得更接近的结果\n    const box = payload.boundingBox;\n    const prompt = `${promptSegments.join('，')}。将产品融合到参考场景图的指定框位（x=${box.x.toFixed(3)}, y=${box.y.toFixed(3)}, w=${box.width.toFixed(3)}, h=${box.height.toFixed(3)}），生成高清预览图。`;\n\n    // Ark Doubao / OpenAI 风格 images.generations 请求体\n    const requestBody: Record<string, any> = {\n      model: this.model,\n      prompt,\n      size: this.size,\n      stream: this.stream,\n      response_format: 'url',\n      watermark: true,\n    };\n\n    // 豆包 Ark v3 支持 image 数组与顺序生成选项\n    const images: string[] = [];\n    if (payload.sceneImage) {\n      images.push(normalizeDataUrl(payload.sceneImage));\n    }\n    if (payload.productImage) {\n      images.push(normalizeDataUrl(payload.productImage));\n    }\n    if (images.length > 0) {\n      requestBody.image = images;\n      requestBody.sequential_image_generation = 'auto';\n      requestBody.sequential_image_generation_options = { max_images: 3 };\n    }\n\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n\n    if (this.apiKey) {\n      headers.Authorization = `Bearer ${this.apiKey}`;\n    }\n\n    // 明确声明响应体类型，避免在strict模式下被推断为{}\n    const { data } = await axios.post<ProductPreviewApiResponse>(this.endpoint, requestBody, {\n      headers,\n      timeout: 60000,\n    });\n\n    const result: ProductPreviewResult = {};\n\n    // 安全地添加可选属性\n    const requestId = data?.requestId || data?.RequestId || data?.request_id;\n    if (requestId !== undefined) {\n      result.requestId = requestId;\n    }\n\n    const traceId = data?.traceId || data?.TraceId;\n    if (traceId !== undefined) {\n      result.traceId = traceId;\n    }\n\n    const status = data?.status || data?.Status;\n    if (status !== undefined) {\n      result.status = status;\n    }\n\n    result.raw = data as unknown as Record<string, unknown>;\n\n    const urlCandidate =\n      // Doubao/OpenAI 风格\n      data?.data?.[0]?.url ||\n      // 兼容其他服务\n      data?.result?.url ||\n      data?.result?.imageUrl ||\n      data?.output?.results?.[0]?.url ||\n      (data as any)?.data?.imageUrl ||\n      (data as any)?.imageUrl ||\n      data?.output?.image_url;\n\n    if (typeof urlCandidate === 'string') {\n      result.previewImage = urlCandidate;\n    } else {\n      const base64Candidate =\n        // Doubao/OpenAI 风格\n        data?.data?.[0]?.b64_json ||\n        // 兼容其他服务\n        data?.result?.imageBase64 ||\n        data?.result?.image_base64 ||\n        data?.output?.results?.[0]?.data ||\n        (data as any)?.imageBase64 ||\n        (data as any)?.image_base64;\n      if (typeof base64Candidate === 'string' && base64Candidate.length > 50) {\n        result.previewImage = normalizeDataUrl(base64Candidate);\n      }\n    }\n\n    if (result.previewImage && !result.imageUrl) {\n      result.imageUrl = result.previewImage;\n    }\n\n    return result;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/PrometheusService.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.001.","line":25,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":25,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.01.","line":25,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":25,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.005.","line":33,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":33,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.01.","line":33,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":33,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.025.","line":33,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":33,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.05.","line":33,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":33,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.25.","line":33,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":33,"endColumn":52},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2.5.","line":33,"column":62,"nodeType":"Literal","messageId":"noMagic","endLine":33,"endColumn":65},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":95,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":95,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Prometheus监控服务\n * 提供API响应时间、请求计数、系统指标监控\n */\n\nimport { Registry, Counter, Histogram, Gauge, collectDefaultMetrics } from 'prom-client';\nimport logger from '@/utils/logger';\n\nexport class PrometheusService {\n  private static instance: PrometheusService;\n  private registry: Registry;\n  private httpRequestDuration: Histogram<string>;\n  private httpRequestTotal: Counter<string>;\n  private httpRequestErrors: Counter<string>;\n  private activeConnections: Gauge<string>;\n\n  private constructor() {\n    // 创建独立的registry\n    this.registry = new Registry();\n\n    // 收集默认系统指标（CPU、内存、事件循环延迟等）\n    collectDefaultMetrics({\n      register: this.registry,\n      prefix: 'llmchat_',\n      gcDurationBuckets: [0.001, 0.01, 0.1, 1, 2, 5],\n    });\n\n    // HTTP请求响应时间（直方图）\n    this.httpRequestDuration = new Histogram({\n      name: 'llmchat_http_request_duration_seconds',\n      help: 'Duration of HTTP requests in seconds',\n      labelNames: ['method', 'route', 'status_code'],\n      buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10],\n      registers: [this.registry],\n    });\n\n    // HTTP请求总数（计数器）\n    this.httpRequestTotal = new Counter({\n      name: 'llmchat_http_requests_total',\n      help: 'Total number of HTTP requests',\n      labelNames: ['method', 'route', 'status_code'],\n      registers: [this.registry],\n    });\n\n    // HTTP错误请求数（计数器）\n    this.httpRequestErrors = new Counter({\n      name: 'llmchat_http_request_errors_total',\n      help: 'Total number of HTTP request errors',\n      labelNames: ['method', 'route', 'error_type'],\n      registers: [this.registry],\n    });\n\n    // 活动连接数（仪表）\n    this.activeConnections = new Gauge({\n      name: 'llmchat_active_connections',\n      help: 'Number of active connections',\n      registers: [this.registry],\n    });\n\n    logger.info('PrometheusService initialized');\n  }\n\n  /**\n   * 获取单例实例\n   */\n  public static getInstance(): PrometheusService {\n    if (!PrometheusService.instance) {\n      PrometheusService.instance = new PrometheusService();\n    }\n    return PrometheusService.instance;\n  }\n\n  /**\n   * 记录HTTP请求\n   */\n  public recordHttpRequest(\n    method: string,\n    route: string,\n    statusCode: number,\n    durationSeconds: number,\n  ): void {\n    const labels = {\n      method: method.toUpperCase(),\n      route: this.normalizeRoute(route),\n      status_code: statusCode.toString(),\n    };\n\n    // 记录响应时间\n    this.httpRequestDuration.observe(labels, durationSeconds);\n\n    // 增加请求计数\n    this.httpRequestTotal.inc(labels);\n\n    // 如果是错误状态码，记录错误\n    if (statusCode >= 400) {\n      this.httpRequestErrors.inc({\n        method: labels.method,\n        route: labels.route,\n        error_type: statusCode >= 500 ? 'server_error' : 'client_error',\n      });\n    }\n  }\n\n  /**\n   * 增加活动连接数\n   */\n  public incrementActiveConnections(): void {\n    this.activeConnections.inc();\n  }\n\n  /**\n   * 减少活动连接数\n   */\n  public decrementActiveConnections(): void {\n    this.activeConnections.dec();\n  }\n\n  /**\n   * 获取指标数据（Prometheus格式）\n   */\n  public async getMetrics(): Promise<string> {\n    return this.registry.metrics();\n  }\n\n  /**\n   * 获取指标内容类型\n   */\n  public getContentType(): string {\n    return this.registry.contentType;\n  }\n\n  /**\n   * 标准化路由路径（移除动态参数）\n   */\n  private normalizeRoute(route: string): string {\n    // 移除查询参数\n    const pathOnly = route.split('?')[0] ?? route;\n\n    // 替换常见的动态参数模式\n    return pathOnly\n      .replace(/\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/gi, '/:id') // UUID\n      .replace(/\\/\\d+/g, '/:id') // 数字ID\n      .replace(/\\/[a-zA-Z0-9_-]{20,}/g, '/:token'); // 长token\n  }\n}\n\n// 导出单例实例\nexport const prometheusService = PrometheusService.getInstance();\nexport default prometheusService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/RateLimitService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":96,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":96,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2528,2530],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.001.","line":96,"column":92,"nodeType":"Literal","messageId":"noMagic","endLine":96,"endColumn":97},{"ruleId":"max-len","severity":1,"message":"This line has a length of 102. Maximum allowed is 100.","line":236,"column":1,"nodeType":"Program","messageId":"max","endLine":236,"endColumn":103},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":267,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":267,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6586,6624],"text":"(req.ip ?? req.connection.remoteAddress)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":267,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":267,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6625,6627],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":269,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":269,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6681,6684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6681,6684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":269,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":269,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .path on an `any` value.","line":271,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":271,"endColumn":48},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":275,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":275,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6896,6898],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":330,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":330,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":343,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":343,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 150.","line":345,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":345,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":364,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":364,"endColumn":42},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async arrow function has no 'await' expression.","line":367,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":367,"endColumn":83},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":370,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":370,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9259,9261],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":388,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":388,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":414,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":414,"endColumn":56},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async arrow function has no 'await' expression.","line":420,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":420,"endColumn":83},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":423,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":423,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10688,10690],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":427,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":427,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":443,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":443,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11311,11313],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":449,"column":22,"nodeType":"Literal","messageId":"noMagic","endLine":449,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 增强版限流服务\n * 实现滑动窗口限流、多维度限流策略和缓存穿透保护\n */\n\nimport type { Request, Response, NextFunction } from 'express';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface RateLimitConfig {\n  windowMs: number;        // 时间窗口（毫秒）\n  maxRequests: number;     // 最大请求数\n  keyGenerator?: (req: Request) => string;  // 自定义key生成器\n  skipSuccessfulRequests?: boolean;        // 是否跳过成功请求\n  skipFailedRequests?: boolean;            // 是否跳过失败请求\n  enableCacheProtection?: boolean;         // 是否启用缓存穿透保护\n  enableBurstProtection?: boolean;         // 是否启用突发保护\n  burstLimit?: number;                     // 突发限制\n}\n\nexport interface RateLimitResult {\n  allowed: boolean;      // 是否允许请求\n  remaining: number;     // 剩余请求数\n  resetTime: Date;       // 重置时间\n  totalHits: number;     // 总命中数\n  retryAfter?: number;   // 重试等待时间（秒）\n}\n\nexport interface SlidingWindowRecord {\n  timestamp: number;\n  count: number;\n}\n\nexport interface RateLimitMetrics {\n  key: string;\n  totalRequests: number;\n  blockedRequests: number;\n  currentRate: number;        // 当前速率（请求/秒）\n  peakRate: number;          // 峰值速率\n  averageResponseTime: number;\n  lastRequestTime: Date;\n  windowRecords: SlidingWindowRecord[];\n}\n\n/**\n * 滑动窗口限流器\n */\nexport class SlidingWindowRateLimiter {\n  private readonly windows: Map<string, RateLimitMetrics> = new Map();\n  private readonly cleanupInterval: NodeJS.Timeout;\n\n  constructor(\n    private readonly config: RateLimitConfig,\n    private readonly name = 'default',\n  ) {\n    // 定期清理过期数据\n    this.cleanupInterval = setInterval(() => {\n      this.cleanup();\n    }, this.config.windowMs);\n\n    logger.info('滑动窗口限流器初始化完成', { name: this.name,\n      windowMs: this.config.windowMs,\n      maxRequests: this.config.maxRequests,\n    });\n  }\n\n  /**\n   * 检查请求是否被允许\n   */\n  checkLimit(key: string): RateLimitResult {\n    const now = Date.now();\n    const windowStart = now - this.config.windowMs;\n\n    // 获取或创建窗口记录\n    let metrics = this.windows.get(key);\n    if (!metrics) {\n      metrics = this.createInitialMetrics(key);\n      this.windows.set(key, metrics);\n    }\n\n    // 清理过期记录\n    metrics.windowRecords = metrics.windowRecords.filter(\n      record => record.timestamp > windowStart,\n    );\n\n    // 计算当前窗口内的请求数\n    const currentCount = metrics.windowRecords.reduce(\n      (sum, record) => sum + record.count, 0,\n    );\n\n    // 更新请求统计\n    metrics.totalRequests++;\n    metrics.lastRequestTime = new Date();\n\n    // 计算当前速率\n    const timeDiff = Math.max((now - (metrics.windowRecords[0]?.timestamp || now)) / 1000, 0.001);\n    metrics.currentRate = currentCount / timeDiff;\n    metrics.peakRate = Math.max(metrics.peakRate, metrics.currentRate);\n\n    // 检查是否超过限制\n    const allowed = currentCount < this.config.maxRequests;\n    const remaining = Math.max(0, this.config.maxRequests - currentCount);\n\n    if (allowed) {\n      // 记录当前请求\n      const existingRecord = metrics.windowRecords.find(\n        record => Math.abs(record.timestamp - now) < 1000, // 1秒内的请求合并\n      );\n\n      if (existingRecord) {\n        existingRecord.count++;\n      } else {\n        metrics.windowRecords.push({ timestamp: now, count: 1 });\n      }\n    } else {\n      metrics.blockedRequests++;\n    }\n\n    const resetTime = new Date(now + this.config.windowMs);\n    const retryAfter = allowed ? undefined : Math.ceil(this.config.windowMs / 1000);\n\n    const result: RateLimitResult = {\n      allowed,\n      remaining,\n      resetTime,\n      totalHits: metrics.totalRequests,\n    };\n\n    if (!allowed && retryAfter !== undefined) {\n      result.retryAfter = retryAfter;\n    }\n\n    return result;\n  }\n\n  /**\n   * 创建初始指标\n   */\n  private createInitialMetrics(key: string): RateLimitMetrics {\n    return {\n      key,\n      totalRequests: 0,\n      blockedRequests: 0,\n      currentRate: 0,\n      peakRate: 0,\n      averageResponseTime: 0,\n      lastRequestTime: new Date(),\n      windowRecords: [],\n    };\n  }\n\n  /**\n   * 清理过期数据\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    const windowStart = now - this.config.windowMs;\n    let cleanedCount = 0;\n\n    this.windows.forEach((metrics, key) => {\n      const originalLength = metrics.windowRecords.length;\n      metrics.windowRecords = metrics.windowRecords.filter(\n        record => record.timestamp > windowStart,\n      );\n\n      if (metrics.windowRecords.length === 0 && originalLength > 0) {\n        // 如果窗口为空且有过期记录，删除整个条目\n        this.windows.delete(key);\n        cleanedCount++;\n      }\n    });\n\n    if (cleanedCount > 0) {\n      logger.debug('限流器清理过期条目', { name: this.name, count: cleanedCount });\n    }\n  }\n\n  /**\n   * 获取指标\n   */\n  getMetrics(key?: string): RateLimitMetrics[] {\n    if (key) {\n      const metrics = this.windows.get(key);\n      return metrics ? [metrics] : [];\n    }\n\n    return Array.from(this.windows.values());\n  }\n\n  /**\n   * 重置指定key的限制\n   */\n  reset(key: string): void {\n    this.windows.delete(key);\n  }\n\n  /**\n   * 清理所有数据\n   */\n  clear(): void {\n    this.windows.clear();\n  }\n\n  /**\n   * 销毁限流器\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.windows.clear();\n  }\n}\n\n/**\n * 多维度限流器\n */\nexport class MultiDimensionRateLimiter {\n  private readonly limiters: Map<string, SlidingWindowRateLimiter> = new Map();\n\n  constructor(private readonly configs: { [dimension: string]: RateLimitConfig }) {\n    // 初始化各维度的限流器\n    Object.entries(configs).forEach(([dimension, config]) => {\n      const limiter = new SlidingWindowRateLimiter(config, `${dimension}-limiter`);\n      this.limiters.set(dimension, limiter);\n    });\n  }\n\n  /**\n   * 检查多维度限制\n   */\n  checkLimits(req: Request): { dimension: string; result: RateLimitResult }[] {\n    const results: { dimension: string; result: RateLimitResult }[] = [];\n\n    Object.entries(this.configs).forEach(([dimension, config]) => {\n      const key = config.keyGenerator ? config.keyGenerator(req) : this.getDefaultKey(req, dimension);\n      const limiter = this.limiters.get(dimension);\n\n      if (limiter) {\n        const result = limiter.checkLimit(key);\n        results.push({ dimension, result });\n      }\n    });\n\n    return results;\n  }\n\n  /**\n   * 检查是否允许请求（所有维度都必须通过）\n   */\n  isAllowed(req: Request): { allowed: boolean; results: RateLimitResult[] } {\n    const results = this.checkLimits(req);\n    const allowed = results.every(r => r.result.allowed);\n\n    return {\n      allowed,\n      results: results.map(r => r.result),\n    };\n  }\n\n  /**\n   * 获取默认key\n   */\n  private getDefaultKey(req: Request, dimension: string): string {\n    switch (dimension) {\n      case 'ip':\n        return req.ip || req.connection.remoteAddress || 'unknown';\n      case 'user':\n        return (req as any).user?.id || 'anonymous';\n      case 'endpoint':\n        return `${req.method}:${req.route?.path || req.path}`;\n      case 'global':\n        return 'global';\n      default:\n        return `${dimension}:${req.ip || 'unknown'}`;\n    }\n  }\n\n  /**\n   * 获取所有维度的指标\n   */\n  getAllMetrics(): { dimension: string; metrics: RateLimitMetrics[] }[] {\n    return Array.from(this.limiters.entries()).map(([dimension, limiter]) => ({\n      dimension,\n      metrics: limiter.getMetrics(),\n    }));\n  }\n\n  /**\n   * 销毁所有限流器\n   */\n  destroy(): void {\n    this.limiters.forEach(limiter => limiter.destroy());\n    this.limiters.clear();\n  }\n}\n\n/**\n * 缓存穿透保护器\n */\nexport class CacheBreachProtector {\n  private readonly cache: Map<string, { timestamp: number; blocked: boolean }> = new Map();\n  private readonly suspiciousThreshold: number;\n  private readonly blockDuration: number;\n\n  constructor(suspiciousThreshold = 100, blockDuration = 300000) { // 5分钟\n    this.suspiciousThreshold = suspiciousThreshold;\n    this.blockDuration = blockDuration;\n  }\n\n  /**\n   * 检查是否被缓存穿透保护\n   */\n  checkProtection(key: string): { blocked: boolean; suspicious: boolean } {\n    const now = Date.now();\n    const cached = this.cache.get(key);\n\n    if (!cached) {\n      this.cache.set(key, { timestamp: now, blocked: false });\n      return { blocked: false, suspicious: false };\n    }\n\n    // 检查是否在阻止期内\n    if (cached.blocked && (now - cached.timestamp) < this.blockDuration) {\n      return { blocked: true, suspicious: true };\n    }\n\n    // 检查是否达到可疑阈值\n    const timeDiff = now - cached.timestamp;\n    if (timeDiff < 60000 && this.getRecentRequests(key) > this.suspiciousThreshold) {\n      // 标记为可疑并阻止\n      cached.blocked = true;\n      cached.timestamp = now;\n      return { blocked: true, suspicious: true };\n    }\n\n    return { blocked: false, suspicious: false };\n  }\n\n  /**\n   * 获取最近请求数（简单实现）\n   */\n  private getRecentRequests(key: string): number {\n    // 这里可以实现更复杂的逻辑，比如滑动窗口计数\n    return Math.floor(Math.random() * 150); // 模拟实现\n  }\n\n  /**\n   * 清理缓存\n   */\n  cleanup(): void {\n    const now = Date.now();\n    for (const [key, value] of this.cache.entries()) {\n      if (now - value.timestamp > this.blockDuration * 2) {\n        this.cache.delete(key);\n      }\n    }\n  }\n}\n\n/**\n * Express中间件\n */\nexport function createRateLimitMiddleware(config: RateLimitConfig) {\n  const limiter = new SlidingWindowRateLimiter(config);\n\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // 生成限流key\n      const key = config.keyGenerator ? config.keyGenerator(req) : req.ip || 'unknown';\n\n      // 检查限制\n      const result = limiter.checkLimit(key);\n\n      // 设置响应头\n      res.set({\n        'X-RateLimit-Limit': config.maxRequests.toString(),\n        'X-RateLimit-Remaining': result.remaining.toString(),\n        'X-RateLimit-Reset': result.resetTime.toISOString(),\n      });\n\n      if (!result.allowed) {\n        // 请求被限制\n        res.set({\n          'Retry-After': (result.retryAfter ?? 60).toString(),\n        });\n\n        res.status(429).json({\n          code: 'RATE_LIMIT_EXCEEDED',\n          message: '请求过于频繁，请稍后再试',\n          retryAfter: result.retryAfter ?? 60,\n          resetTime: result.resetTime.toISOString(),\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      next();\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RateLimitService',\n        operation: 'rateLimitMiddleware',\n      });\n      logger.error('限流中间件错误', error.toLogObject());\n      // 出错时允许请求通过，避免影响正常服务\n      next();\n    }\n  };\n}\n\n/**\n * 创建多维度限流中间件\n */\nexport function createMultiDimensionRateLimitMiddleware(\n  configs: { [dimension: string]: RateLimitConfig },\n) {\n  const multiLimiter = new MultiDimensionRateLimiter(configs);\n  const cacheProtector = new CacheBreachProtector();\n\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // 缓存穿透保护\n      const key = req.ip || 'unknown';\n      const protection = cacheProtector.checkProtection(key);\n\n      if (protection.blocked) {\n        res.status(429).json({\n          code: 'CACHE_BREACH_PROTECTION',\n          message: '检测到异常请求模式，暂时限制访问',\n          timestamp: new Date().toISOString(),\n        });\n        return;\n      }\n\n      // 多维度限流检查\n      const checkResult = multiLimiter.isAllowed(req);\n\n      if (!checkResult.allowed) {\n        // 找到第一个超限的维度\n        const failedResult = checkResult.results.find(r => !r.allowed);\n        if (failedResult) {\n          res.set({\n            'X-RateLimit-Limit': configs.ip?.maxRequests.toString() || '100',\n            'X-RateLimit-Remaining': failedResult.remaining.toString(),\n            'X-RateLimit-Reset': failedResult.resetTime.toISOString(),\n            'Retry-After': (failedResult.retryAfter ?? 60).toString(),\n          });\n\n          res.status(429).json({\n            code: 'RATE_LIMIT_EXCEEDED',\n            message: '请求过于频繁，请稍后再试',\n            retryAfter: failedResult.retryAfter ?? 60,\n            resetTime: failedResult.resetTime.toISOString(),\n            timestamp: new Date().toISOString(),\n          });\n          return;\n        }\n      }\n\n      next();\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RateLimitService',\n        operation: 'multiDimensionRateLimitMiddleware',\n      });\n      logger.error('多维度限流中间件错误', error.toLogObject());\n      next();\n    }\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/RedisCacheManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":29},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'initialize' has no 'await' expression.","line":172,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":172,"endColumn":19},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":217,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":217,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":256,"column":91,"nodeType":"Literal","messageId":"noMagic","endLine":256,"endColumn":92},{"ruleId":"max-len","severity":1,"message":"This line has a length of 101. Maximum allowed is 100.","line":265,"column":1,"nodeType":"Program","messageId":"max","endLine":265,"endColumn":102},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":298,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":298,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":303,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":303,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":341,"column":61,"nodeType":"Literal","messageId":"noMagic","endLine":341,"endColumn":63},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":384,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":384,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":394,"column":62,"nodeType":"Literal","messageId":"noMagic","endLine":394,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":404,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":404,"endColumn":64},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":412,"column":66,"nodeType":"Literal","messageId":"noMagic","endLine":412,"endColumn":68},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":427,"column":66,"nodeType":"Literal","messageId":"noMagic","endLine":427,"endColumn":68},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":442,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":442,"endColumn":57},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":469,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":469,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[12242,12244],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 102. Maximum allowed is 100.","line":496,"column":1,"nodeType":"Program","messageId":"max","endLine":496,"endColumn":103},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":514,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":514,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":571,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":571,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":723,"column":63,"nodeType":"Literal","messageId":"noMagic","endLine":723,"endColumn":65},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":726,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":728,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":761,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":761,"endColumn":59},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'fallback' has no 'await' expression.","line":824,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":824,"endColumn":30},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'fallback' has no 'await' expression.","line":832,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":832,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":949,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":949,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":967,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":967,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.9.","line":975,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":975,"endColumn":26},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":1118,"column":43,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":1118,"endColumn":53,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[29192,29193],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Redis缓存管理器 - 高性能缓存层\n *\n * 功能特性:\n * - 多级缓存策略（L1内存 + L2 Redis）\n * - 智能缓存预热和失效\n * - 缓存穿透和雪崩防护\n * - 分布式锁支持\n * - 实时缓存监控\n * - 缓存压缩和序列化优化\n */\n\nimport Redis from 'ioredis';\nimport { createHash } from 'crypto';\nimport { gzipSync, gunzipSync } from 'zlib';\nimport { AppConfig } from '@/config/AppConfig'; // ✅ 统一配置服务\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\n// 使用Node.js内置zlib替代lz4，避免原生模块编译问题\nconst compress = (data: Buffer): Buffer => gzipSync(data);\nconst decompress = (data: Buffer): Buffer => gunzipSync(data);\n\n// 缓存项接口\nexport interface CacheItem<T = unknown> {\n  /** 缓存数据（序列化后的字符串或压缩后的Buffer） */\n  data: Buffer | string;\n  /** 创建时间戳 */\n  createdAt: number;\n  /** 过期时间戳 */\n  expiresAt: number;\n  /** 访问次数 */\n  accessCount: number;\n  /** 最后访问时间 */\n  lastAccessAt: number;\n  /** 数据大小（字节） */\n  size: number;\n  /** 是否压缩存储 */\n  compressed: boolean;\n  /** 缓存标签 */\n  tags?: string[];\n  /** 缓存来源 */\n  source?: string;\n}\n\n// 缓存配置接口\nexport interface RedisCacheConfig {\n  /** 默认TTL（秒） */\n  defaultTtl: number;\n  /** 最大内存缓存大小 */\n  maxMemorySize: number;\n  /** 压缩阈值（字节） */\n  compressionThreshold: number;\n  /** 缓存键前缀 */\n  keyPrefix: string;\n  /** 是否启用分布式锁 */\n  enableLocks: boolean;\n  /** 是否启用缓存预热 */\n  enablePrewarming: boolean;\n  /** 是否启用穿透防护 */\n  enablePenetrationProtection: boolean;\n  /** 是否启用雪崩防护 */\n  enableAvalancheProtection: boolean;\n  /** 穿透防护返回值 */\n  nullFallback?: unknown;\n}\n\n// 缓存统计接口\nexport interface RedisCacheStats {\n  /** 内存缓存项数 */\n  memoryItems: number;\n  /** 内存缓存大小 */\n  memorySize: number;\n  /** Redis连接状态 */\n  redisConnected: boolean;\n  /** 连接状态（别名） */\n  connected: boolean;\n  /** 总命中数 */\n  hits: number;\n  /** 总未命中数 */\n  misses: number;\n  /** 命中率 */\n  hitRate: number;\n  /** 设置数 */\n  sets: number;\n  /** 删除数 */\n  dels: number;\n  /** 错误数 */\n  errors: number;\n  /** 压缩命中数 */\n  compressionHits: number;\n  /** 分布式锁数 */\n  locks: number;\n  /** 预热命中数 */\n  prewarmedHits: number;\n  /** 穿透防护命中数 */\n  protectionHits: number;\n  /** 雪崩防护命中数 */\n  avalancheHits: number;\n  /** 总请求数 */\n  totalRequests: number;\n  /** 内存使用量 */\n  memoryUsage: number;\n}\n\n// 缓存策略枚举\nexport enum CacheStrategy {\n  /** 仅内存缓存 */\n  MEMORY_ONLY = 'memory_only',\n  /** 仅Redis缓存 */\n  REDIS_ONLY = 'redis_only',\n  /** 内存+Redis（L1+L2） */\n  HYBRID = 'hybrid',\n  /** 写入时同步到Redis */\n  WRITE_THROUGH = 'write_through',\n  /** 写入时异步到Redis */\n  WRITE_BEHIND = 'write_behind',\n  /** 缓存未命中时写入 */\n  CACHE_ASIDE = 'cache_aside',\n}\n\n/**\n * Redis缓存管理器类\n */\nexport class RedisCacheManager {\n  private static instance: RedisCacheManager | null = null;\n  private redis: Redis | null = null;\n  private readonly memoryCache = new Map<string, CacheItem>();\n  private config: RedisCacheConfig;\n  private stats: RedisCacheStats;\n  private readonly lockPromises = new Map<string, Promise<unknown>>();\n  private readonly prewarmedKeys = new Set<string>();\n  private readonly protectionCache = new Map<string, unknown>();\n\n  constructor(config: Partial<RedisCacheConfig> = {}) {\n    this.config = {\n      defaultTtl: 300, // 5分钟\n      maxMemorySize: 100 * 1024 * 1024, // 100MB\n      compressionThreshold: 1024, // 1KB\n      keyPrefix: 'llmchat:cache',\n      enableLocks: true,\n      enablePrewarming: true,\n      enablePenetrationProtection: true,\n      enableAvalancheProtection: true,\n      ...config,\n    };\n\n    this.stats = {\n      memoryItems: 0,\n      memorySize: 0,\n      redisConnected: false,\n      connected: false,\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      sets: 0,\n      dels: 0,\n      errors: 0,\n      compressionHits: 0,\n      locks: 0,\n      prewarmedHits: 0,\n      protectionHits: 0,\n      avalancheHits: 0,\n      totalRequests: 0,\n      memoryUsage: 0,\n    };\n  }\n\n  /**\n   * 初始化Redis连接\n   */\n  async initialize(): Promise<void> {\n    try {\n      const redisConfig = AppConfig.getRedisConfig(); // ✅ 使用统一配置\n      const redisHost = redisConfig.host;\n      const redisPort = redisConfig.port;\n      const redisPassword = redisConfig.password;\n\n      if (redisHost) {\n        this.redis = new Redis({\n          host: redisHost,\n          port: redisPort,\n          ...(redisPassword ? { password: redisPassword } : {}),\n          retryStrategy: (times) => {\n            if (times > 10) {\n              logger.error('Redis重连次数超过限制');\n              return null;\n            }\n            return Math.min(times * 100, 3000);\n          },\n          maxRetriesPerRequest: 3,\n          lazyConnect: true,\n          enableAutoPipelining: true,\n        });\n\n        this.redis.on('connect', () => {\n          logger.info('✅ Redis缓存管理器连接成功');\n          this.stats.redisConnected = true;\n        });\n\n        this.redis.on('error', (err) => {\n          logger.error('❌ Redis缓存管理器连接错误', { error: err });\n          this.stats.redisConnected = false;\n          this.stats.errors++;\n        });\n\n        this.redis.on('close', () => {\n          logger.warn('⚠️ Redis缓存管理器连接断开');\n          this.stats.redisConnected = false;\n        });\n      } else {\n        logger.warn('⚠️ Redis未配置，将使用内存缓存模式');\n      }\n\n      // 启动缓存预热\n      if (this.config.enablePrewarming) {\n        setTimeout(() => this.startPrewarming(), 5000);\n      }\n\n      logger.info('🚀 Redis缓存管理器初始化完成', {\n        config: {\n          ...this.config,\n          compressionThreshold: `${this.config.compressionThreshold}B`,\n          maxMemorySize: `${(this.config.maxMemorySize / 1024 / 1024).toFixed(2)}MB`,\n        },\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'initialize',\n      });\n      logger.error('❌ Redis缓存管理器初始化失败', error.toLogObject());\n      this.stats.errors++;\n    }\n  }\n\n  /**\n   * 关闭连接\n   */\n  async disconnect(): Promise<void> {\n    if (this.redis) {\n      await this.redis.quit();\n      this.redis = null;\n      this.stats.redisConnected = false;\n    }\n    this.memoryCache.clear();\n    logger.info('📴 Redis缓存管理器已关闭');\n  }\n\n  /**\n   * 生成缓存键\n   */\n  private generateKey(key: string, tags?: string[]): string {\n    const baseKey = `${this.config.keyPrefix}:${key}`;\n    if (tags && tags.length > 0) {\n      const tagHash = createHash('md5').update(tags.join(':')).digest('hex').substring(0, 8);\n      return `${baseKey}:${tagHash}`;\n    }\n    return baseKey;\n  }\n\n  /**\n   * 压缩数据\n   */\n  private compressData(data: unknown): { compressed: boolean; data: Buffer | string; size: number } {\n    const serialized = JSON.stringify(data);\n    const size = Buffer.byteLength(serialized, 'utf8');\n\n    if (size > this.config.compressionThreshold) {\n      try {\n        const compressed = compress(Buffer.from(serialized));\n        return {\n          compressed: true,\n          data: compressed,\n          size: compressed.length,\n        };\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'RedisCacheManager',\n          operation: 'compressData',\n        });\n        logger.warn('数据压缩失败，使用原始数据', { error: error.toLogObject(), size });\n      }\n    }\n\n    return {\n      compressed: false,\n      data: serialized,\n      size,\n    };\n  }\n\n  /**\n   * 解压数据\n   */\n  private decompressData<T = unknown>(item: CacheItem): T | null {\n    if (!item.compressed) {\n      return JSON.parse(item.data as string);\n    }\n\n    try {\n      const decompressed = decompress(item.data as Buffer);\n      return JSON.parse(decompressed.toString('utf8'));\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'decompressData',\n      });\n      logger.error('数据解压失败', error.toLogObject());\n      return null;\n    }\n  }\n\n  /**\n   * 确保内存缓存有足够空间\n   */\n  private ensureMemorySpace(requiredSize: number): void {\n    // 检查总大小限制\n    while (this.getCurrentMemorySize() + requiredSize > this.config.maxMemorySize) {\n      this.evictLRUItem();\n    }\n  }\n\n  /**\n   * 驱逐最少使用的内存缓存项\n   */\n  private evictLRUItem(): void {\n    let lruKey: string | null = null;\n    let lruTime = Date.now();\n\n    for (const [key, item] of this.memoryCache) {\n      if (item.lastAccessAt < lruTime) {\n        lruTime = item.lastAccessAt;\n        lruKey = key;\n      }\n    }\n\n    if (lruKey) {\n      this.memoryCache.delete(lruKey);\n      this.stats.memoryItems--;\n      logger.debug('驱逐LRU内存缓存项', { key: lruKey.substring(0, 50) });\n    }\n  }\n\n  /**\n   * 获取当前内存缓存总大小\n   */\n  private getCurrentMemorySize(): number {\n    let totalSize = 0;\n    for (const item of this.memoryCache.values()) {\n      totalSize += item.size;\n    }\n    return totalSize;\n  }\n\n  /**\n   * 更新统计信息\n   */\n  private updateStats(): void {\n    const total = this.stats.hits + this.stats.misses;\n    this.stats.hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;\n    this.stats.memoryItems = this.memoryCache.size;\n    this.stats.memorySize = this.getCurrentMemorySize();\n  }\n\n  /**\n   * 获取缓存\n   */\n  async get<T>(key: string, options: {\n    tags?: string[];\n    strategy?: CacheStrategy;\n  } = {}): Promise<T | null> {\n    const now = Date.now();\n    const fullKey = this.generateKey(key, options.tags);\n\n    try {\n      // 1. 尝试从内存缓存获取\n      const memoryItem = this.memoryCache.get(fullKey);\n      if (memoryItem && memoryItem.expiresAt > now) {\n        memoryItem.accessCount++;\n        memoryItem.lastAccessAt = now;\n        this.stats.hits++;\n        this.updateStats();\n        logger.debug('🎯 内存缓存命中', { key: key.substring(0, 50) });\n        return await this.decompressData(memoryItem);\n      }\n\n      // 2. 穿透防护\n      if (this.config.enablePenetrationProtection && options.tags) {\n        const protectionKey = `protect:${fullKey}`;\n        const protectedValue = this.protectionCache.get(protectionKey);\n        if (protectedValue !== undefined) {\n          this.stats.protectionHits++;\n          logger.debug('🛡️ 穿透防护命中', { key: key.substring(0, 50) });\n          return protectedValue as T | null;\n        }\n      }\n\n      // 3. 尝试从Redis获取\n      if (this.redis && this.stats.redisConnected) {\n        try {\n          const redisValue = await this.redis.get(fullKey);\n          if (redisValue) {\n            const redisItem: CacheItem = JSON.parse(redisValue);\n\n            // 雪崩防护：如果大量请求同时访问，设置短期保护\n            if (this.config.enableAvalancheProtection && redisItem.accessCount > 100) {\n              const protectionKey = `protect:${fullKey}`;\n              const _protectionTtl = Math.min(60, redisItem.expiresAt - now);\n              this.protectionCache.set(protectionKey, this.decompressData(redisItem));\n              this.stats.avalancheHits++;\n              logger.debug('🏔️ 雪崩防护触发', { key: key.substring(0, 50) });\n            }\n\n            // 写入内存缓存（如果策略允许）\n            if (options.strategy !== CacheStrategy.REDIS_ONLY) {\n              this.ensureMemorySpace(redisItem.size);\n              this.memoryCache.set(fullKey, {\n                ...redisItem,\n                accessCount: redisItem.accessCount + 1,\n                lastAccessAt: now,\n              });\n            }\n\n            this.stats.hits++;\n            this.updateStats();\n            logger.debug('🔥 Redis缓存命中', { key: key.substring(0, 50) });\n            return await this.decompressData(redisItem);\n          }\n        } catch (unknownError: unknown) {\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'RedisCacheManager',\n            operation: 'get.redisRead',\n          });\n          logger.error('Redis缓存读取失败', { key, ...error.toLogObject() });\n          this.stats.errors++;\n        }\n      }\n\n      this.stats.misses++;\n      this.updateStats();\n      logger.debug('❌ 缓存未命中', { key: key.substring(0, 50) });\n      return null;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'get',\n      });\n      logger.error('缓存获取失败', { key, ...error.toLogObject() });\n      this.stats.errors++;\n      return null;\n    }\n  }\n\n  /**\n   * 设置缓存\n   */\n  async set<T>(\n    key: string,\n    value: T,\n    options: {\n      ttl?: number;\n      tags?: string[];\n      strategy?: CacheStrategy;\n      compress?: boolean;\n    } = {},\n  ): Promise<boolean> {\n    const now = Date.now();\n    const ttl = options.ttl || this.config.defaultTtl;\n    const fullKey = this.generateKey(key, options.tags);\n    const expiresAt = now + ttl;\n\n    try {\n      // 压缩数据\n      const { compressed, data, size } = this.compressData(value);\n\n      const cacheItem: CacheItem<T> = {\n        data,\n        createdAt: now,\n        expiresAt,\n        accessCount: 0,\n        lastAccessAt: now,\n        size,\n        compressed,\n        ...(options.tags && { tags: options.tags }),\n        source: 'set',\n      };\n\n      // 1. 写入内存缓存\n      if (options.strategy !== CacheStrategy.REDIS_ONLY) {\n        this.ensureMemorySpace(size);\n        this.memoryCache.set(fullKey, cacheItem);\n      }\n\n      // 2. 写入Redis\n      if (this.redis && this.stats.redisConnected && options.strategy !== CacheStrategy.MEMORY_ONLY) {\n        try {\n          const serialized = JSON.stringify(cacheItem);\n          await this.redis.setex(fullKey, ttl, serialized);\n        } catch (unknownError: unknown) {\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'RedisCacheManager',\n            operation: 'set.redisWrite',\n          });\n          logger.error('Redis缓存写入失败', { key, ...error.toLogObject() });\n          this.stats.errors++;\n          return false;\n        }\n      }\n\n      this.stats.sets++;\n      this.updateStats();\n      logger.debug('💾 缓存设置成功', {\n        key: key.substring(0, 50),\n        ttl,\n        size,\n        compressed,\n        strategy: options.strategy,\n      });\n      return true;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'set',\n      });\n      logger.error('缓存设置失败', { key, ...error.toLogObject() });\n      this.stats.errors++;\n      return false;\n    }\n  }\n\n  /**\n   * 删除缓存\n   */\n  async del(key: string, options: { tags?: string[] } = {}): Promise<boolean> {\n    return this.delete(key, options);\n  }\n\n  /**\n   * 删除缓存（别名方法）\n   */\n  async delete(key: string, options: { tags?: string[] } = {}): Promise<boolean> {\n    const fullKey = this.generateKey(key, options.tags);\n\n    try {\n      // 从内存缓存删除\n      const memoryDeleted = this.memoryCache.delete(fullKey);\n      if (memoryDeleted) {\n        this.stats.memoryItems--;\n      }\n\n      // 从Redis删除\n      let redisDeleted = false;\n      if (this.redis && this.stats.redisConnected) {\n        try {\n          const result = await this.redis.del(fullKey);\n          redisDeleted = result > 0;\n        } catch (unknownError: unknown) {\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'RedisCacheManager',\n            operation: 'delete.redisDelete',\n          });\n          logger.error('Redis缓存删除失败', { key, ...error.toLogObject() });\n          this.stats.errors++;\n        }\n      }\n\n      if (memoryDeleted || redisDeleted) {\n        this.stats.dels++;\n        this.updateStats();\n        logger.debug('🗑️ 缓存删除成功', { key: key.substring(0, 50) });\n        return true;\n      }\n\n      return false;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'delete',\n      });\n      logger.error('缓存删除失败', { key, ...error.toLogObject() });\n      this.stats.errors++;\n      return false;\n    }\n  }\n\n  /**\n   * 按标签批量删除缓存\n   */\n  async delByTag(tag: string): Promise<number> {\n    let deletedCount = 0;\n\n    try {\n      // 删除内存缓存中的匹配项\n      for (const [key, item] of this.memoryCache.entries()) {\n        if (item.tags && item.tags.includes(tag)) {\n          this.memoryCache.delete(key);\n          this.stats.memoryItems--;\n          deletedCount++;\n        }\n      }\n\n      // 删除Redis中的匹配项（如果模式匹配）\n      if (this.redis && this.stats.redisConnected) {\n        try {\n          const pattern = `${this.config.keyPrefix}:*:${tag}`;\n          const keys = await this.redis.keys(pattern);\n          if (keys.length > 0) {\n            const result = await this.redis.del(keys);\n            deletedCount += result;\n          }\n        } catch (unknownError: unknown) {\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'RedisCacheManager',\n            operation: 'delByTag.redisBatchDelete',\n          });\n          logger.error('Redis批量删除失败', { tag, ...error.toLogObject() });\n          this.stats.errors++;\n        }\n      }\n\n      if (deletedCount > 0) {\n        this.stats.dels += deletedCount;\n        this.updateStats();\n        logger.info('🏷️ 按标签删除缓存', { tag, count: deletedCount });\n      }\n\n      return deletedCount;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'delByTag',\n      });\n      logger.error('按标签删除缓存失败', { tag, ...error.toLogObject() });\n      this.stats.errors++;\n      return 0;\n    }\n  }\n\n  // Duplicate clear function removed - detailed version exists at line 1172\n\n  /**\n   * 获取或设置缓存（缓存未命中时执行fallback）\n   */\n  async getOrSet<T>(\n    key: string,\n    fallback: () => Promise<T>,\n    options: {\n      ttl?: number;\n      tags?: string[];\n      strategy?: CacheStrategy;\n      compress?: boolean;\n    } = {},\n  ): Promise<T | null> {\n    // 尝试从缓存获取\n    const cached = await this.get<T>(key, options);\n    if (cached !== null) {\n      return cached;\n    }\n\n    try {\n      // 缓存未命中，执行fallback\n      const result = await fallback();\n\n      // 写入缓存\n      await this.set(key, result, options);\n\n      return result;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'getOrSet',\n      });\n      logger.error('getOrSet fallback执行失败', { key, ...error.toLogObject() });\n      return null;\n    }\n  }\n\n  /**\n   * 分布式锁\n   */\n  async lock(\n    key: string,\n    ttl = 30,\n    options: { retry?: number; delay?: number } = {},\n  ): Promise<boolean> {\n    if (!this.config.enableLocks) {\n      return true; // 未启用锁，直接返回成功\n    }\n\n    const lockKey = `lock:${this.generateKey(key)}`;\n    const retry = options.retry ?? 0;\n    const delay = options.delay ?? 100;\n\n    for (let attempt = 0; attempt <= retry; attempt++) {\n      try {\n        // 检查是否已有锁\n        if (this.lockPromises.has(lockKey)) {\n          const existingPromise = this.lockPromises.get(lockKey);\n          if (existingPromise) {\n            const result = await existingPromise;\n            if (result) {\n              return true;\n            }\n          }\n        }\n\n        // 尝试获取锁\n        // 使用Redis原生的SET NX EX命令实现分布式锁\n        const lockValue = JSON.stringify({\n          locked: true,\n          timestamp: Date.now(),\n        });\n\n        let acquired = false;\n        if (this.redis && this.stats.redisConnected) {\n          const result = await this.redis.set(lockKey, lockValue, 'EX', ttl, 'NX');\n          acquired = result === 'OK';\n        }\n\n        if (acquired) {\n          this.stats.locks++;\n          logger.debug('🔒 分布式锁获取成功', { key: key.substring(0, 50) });\n\n          // 设置锁过期自动释放\n          setTimeout(async () => {\n            await this.unlock(key);\n          }, ttl * 1000);\n\n          return true;\n        }\n\n        // 等待重试\n        if (attempt < retry) {\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'RedisCacheManager',\n          operation: 'lock',\n        });\n        logger.error('分布式锁获取失败', { key, attempt, error: error.toLogObject() });\n        this.stats.errors++;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * 释放分布式锁\n   */\n  async unlock(key: string): Promise<boolean> {\n    if (!this.config.enableLocks) {\n      return true;\n    }\n\n    try {\n      const result = await this.del(`lock:${key}`);\n      this.lockPromises.delete(`lock:${this.generateKey(key)}`);\n      logger.debug('🔓 分布式锁释放', { key: key.substring(0, 50) });\n      return result;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'unlock',\n      });\n      logger.error('分布式锁释放失败', { key, ...error.toLogObject() });\n      return false;\n    }\n  }\n\n  /**\n   * 缓存预热\n   */\n  async prewarmKeys(keys: Array<{\n    key: string;\n    fallback: () => Promise<unknown>;\n    ttl?: number;\n    tags?: string[];\n  }>): Promise<void> {\n    if (!this.config.enablePrewarming) {\n      return;\n    }\n\n    logger.info('🔥 开始缓存预热', { keyCount: keys.length });\n\n    const promises = keys.map(async ({ key, fallback, ttl, tags }) => {\n      try {\n        const options: { ttl?: number; tags?: string[] } = {};\n        if (ttl !== undefined) {\noptions.ttl = ttl;\n}\n        if (tags) {\noptions.tags = tags;\n}\n        await this.getOrSet(key, fallback, options);\n        this.prewarmedKeys.add(key);\n        this.stats.prewarmedHits++;\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'RedisCacheManager',\n          operation: 'prewarmKeys',\n        });\n        logger.error('缓存预热失败', { key, ...error.toLogObject() });\n      }\n    });\n\n    const results = await Promise.allSettled(promises);\n    logger.info('✅ 缓存预热完成', {\n      totalKeys: keys.length,\n      successCount: results.filter(r => r.status === 'fulfilled').length,\n    });\n  }\n\n  /**\n   * 启动缓存预热\n   */\n  private async startPrewarming(): Promise<void> {\n    // 这里可以预加载常用数据\n    const prewarmData = [\n      {\n        key: 'system:config',\n        fallback: async () => ({\n          version: '1.0.0',\n          features: ['redis', 'memory', 'compression', 'locks'],\n        }),\n        ttl: 3600, // 1小时\n      },\n      {\n        key: 'stats:cache:warmup',\n        fallback: async () => ({\n          timestamp: Date.now(),\n          type: 'warmup',\n        }),\n        ttl: 1800, // 30分钟\n      },\n    ];\n\n    await this.prewarmKeys(prewarmData);\n  }\n\n  /**\n   * 获取缓存统计\n   */\n  getStats(): RedisCacheStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * 获取内存缓存详情\n   */\n  getMemoryCacheItems(limit = 50): CacheItem[] {\n    return Array.from(this.memoryCache.values())\n      .sort((a, b) => b.lastAccessAt - a.lastAccessAt)\n      .slice(0, limit);\n  }\n\n  /**\n   * Redis健康检查\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'down';\n    details: {\n      memoryCache: { items: number; size: string };\n      redis: { connected: boolean; latency?: number };\n      stats: RedisCacheStats;\n    };\n  }> {\n    const details = {\n      memoryCache: {\n        items: this.stats.memoryItems,\n        size: `${(this.stats.memorySize / 1024 / 1024).toFixed(2)}MB`,\n      },\n      redis: {\n        connected: this.stats.redisConnected,\n        latency: 0,\n      },\n      stats: this.stats,\n    };\n\n    // 检查Redis延迟\n    if (this.redis && this.stats.redisConnected) {\n      try {\n        const start = Date.now();\n        await this.redis.ping();\n        details.redis.latency = Date.now() - start;\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'RedisCacheManager',\n          operation: 'healthCheck.redisPing',\n        });\n        logger.error('Redis健康检查失败', error.toLogObject());\n        details.redis.connected = false;\n      }\n    }\n\n    let status: 'healthy' | 'degraded' | 'down' = 'healthy';\n    if (!details.redis.connected) {\n      status = this.stats.memoryItems > 0 ? 'degraded' : 'down';\n    }\n\n    return { status, details };\n  }\n\n  /**\n   * 生成性能报告\n   */\n  async generatePerformanceReport(): Promise<string> {\n    const stats = this.getStats();\n    const memoryItems = Array.from(this.memoryCache.entries()).slice(0, 10).map(([key, item]) => ({\n      key,\n      ...item,\n    }));\n    const health = await this.healthCheck();\n\n    return `\nRedis缓存性能报告\n===================\n\n📊 基础统计\n- 内存缓存项数: ${stats.memoryItems}\n- 内存缓存大小: ${(stats.memorySize / 1024 / 1024).toFixed(2)}MB\n- Redis连接状态: ${stats.redisConnected ? '已连接' : '未连接'}\n- 总命中数: ${stats.hits}\n- 总未命中数: ${stats.misses}\n- 命中率: ${stats.hitRate.toFixed(2)}%\n\n⚡ 性能指标\n- 设置操作数: ${stats.sets}\n- 删除操作数: ${stats.dels}\n- 错误数: ${stats.errors}\n- 压缩命中数: ${stats.compressionHits}\n\n🔒 高级功能\n- 分布式锁数: ${stats.locks}\n- 预热命中数: ${stats.prewarmedHits}\n- 穿透防护命中: ${stats.protectionHits}\n- 雪崩防护命中: ${stats.avalancheHits}\n\n🏥 健康状态\n- 整体状态: ${health.status}\n- Redis延迟: ${health.details.redis.latency ? `${health.details.redis.latency}ms` : 'N/A'}\n\n🔥 热门缓存项TOP10\n${memoryItems.length > 0 ?\n  memoryItems.map((item, index) => {\n    const age = (Date.now() - item.createdAt) / 1000;\n    return `${index + 1}. ${item.key.substring(0, 50)}... (访问${item.accessCount}次, ${age.toFixed(0)}秒前)`;\n  }).join('\\n') :\n  '暂无内存缓存项'\n}\n\n💡 优化建议\n${this.generateRecommendations()}\n    `.trim();\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateRecommendations(): string[] {\n    const recommendations: string[] = [];\n    const stats = this.getStats();\n\n    // 命中率建议\n    if (stats.hitRate < 70) {\n      recommendations.push('命中率较低，建议检查缓存策略或增加TTL时间');\n    } else if (stats.hitRate > 95) {\n      recommendations.push('命中率很高，缓存策略效果良好');\n    }\n\n    // 内存使用建议\n    const memoryUsage = stats.memorySize / this.config.maxMemorySize;\n    if (memoryUsage > 0.9) {\n      recommendations.push('内存缓存使用率过高，建议增加最大内存大小');\n    } else if (memoryUsage < 0.3) {\n      recommendations.push('内存缓存使用率较低，可以减少最大内存大小以节省资源');\n    }\n\n    // Redis连接建议\n    if (!stats.redisConnected) {\n      recommendations.push('Redis未连接，检查Redis服务状态');\n    }\n\n    // 错误率建议\n    const errorRate = stats.errors / (stats.hits + stats.misses + stats.errors) * 100;\n    if (errorRate > 5) {\n      recommendations.push('错误率较高，检查Redis连接和网络状态');\n    }\n\n    return recommendations.length > 0 ? recommendations : ['缓存运行状态良好'];\n  }\n\n  /**\n   * 获取单例实例\n   */\n  static getInstance(config?: Partial<RedisCacheConfig>): RedisCacheManager {\n    if (!RedisCacheManager.instance) {\n      RedisCacheManager.instance = new RedisCacheManager(config);\n    }\n    return RedisCacheManager.instance;\n  }\n\n  /**\n   * 检查缓存是否存在\n   */\n  async exists(key: string): Promise<boolean> {\n    try {\n      // 先检查内存缓存\n      if (this.memoryCache.has(key)) {\n        return true;\n      }\n\n      // 检查Redis\n      if (this.redis && this.stats.redisConnected) {\n        const result = await this.redis.exists(key);\n        return result === 1;\n      }\n\n      return false;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'exists',\n      });\n      logger.error('检查缓存存在性失败', { key, ...error.toLogObject() });\n      this.stats.errors++;\n      return false;\n    }\n  }\n\n  /**\n   * 获取缓存TTL\n   */\n  async getTtl(key: string): Promise<number> {\n    try {\n      if (this.redis && this.stats.redisConnected) {\n        const ttl = await this.redis.ttl(key);\n        return ttl;\n      }\n      return -1;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'getTtl',\n      });\n      logger.error('获取缓存TTL失败', { key, ...error.toLogObject() });\n      this.stats.errors++;\n      return -1;\n    }\n  }\n\n  /**\n   * 按标签删除缓存\n   */\n  async deleteByTags(tags: string[]): Promise<number> {\n    let deletedCount = 0;\n\n    for (const tag of tags) {\n      deletedCount += await this.delByTag(tag);\n    }\n\n    return deletedCount;\n  }\n\n  /**\n   * 根据模式获取键列表\n   */\n  async getKeysByPattern(pattern: string): Promise<string[]> {\n    try {\n      const keys: string[] = [];\n\n      // 内存缓存键\n      const fullPattern = this.config.keyPrefix ? `${this.config.keyPrefix}:${pattern}` : pattern;\n      for (const key of this.memoryCache.keys()) {\n        if (this.matchPattern(key, fullPattern)) {\n          keys.push(key);\n        }\n      }\n\n      // Redis键\n      if (this.redis && this.stats.redisConnected) {\n        try {\n          const redisKeys = await this.redis.keys(fullPattern);\n          keys.push(...redisKeys);\n        } catch (unknownError: unknown) {\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'RedisCacheManager',\n            operation: 'getKeysByPattern.redisKeys',\n          });\n          logger.error('获取Redis键列表失败', { pattern, ...error.toLogObject() });\n          this.stats.errors++;\n        }\n      }\n\n      return [...new Set(keys)]; // 去重\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'getKeysByPattern',\n      });\n      logger.error('获取键列表失败', { pattern, ...error.toLogObject() });\n      this.stats.errors++;\n      return [];\n    }\n  }\n\n  /**\n   * 根据标签获取键列表\n   */\n  async getKeysByTags(tags: string[]): Promise<string[]> {\n    try {\n      const keys: string[] = [];\n\n      // 内存缓存中的键\n      for (const [key, item] of this.memoryCache.entries()) {\n        if (item.tags && tags.some(tag => item.tags!.includes(tag))) {\n          keys.push(key);\n        }\n      }\n\n      // Redis中的键（简化处理）\n      if (this.redis && this.stats.redisConnected) {\n        for (const tag of tags) {\n          try {\n            const tagPattern = `${this.config.keyPrefix}:*:${tag}`;\n            const redisKeys = await this.redis.keys(tagPattern);\n            keys.push(...redisKeys);\n          } catch (unknownError: unknown) {\n            const error = createErrorFromUnknown(unknownError, {\n              component: 'RedisCacheManager',\n              operation: 'getKeysByTags.tagKeys',\n            });\n            logger.error('获取标签键列表失败', { tag, ...error.toLogObject() });\n            this.stats.errors++;\n          }\n        }\n      }\n\n      return [...new Set(keys)]; // 去重\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'getKeysByTags',\n      });\n      logger.error('根据标签获取键列表失败', { tags, ...error.toLogObject() });\n      this.stats.errors++;\n      return [];\n    }\n  }\n\n  /**\n   * 更新配置\n   */\n  updateConfig(newConfig: Partial<RedisCacheConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    logger.info('缓存配置已更新', { config: this.config });\n  }\n\n  /**\n   * 获取配置\n   */\n  getConfig(): RedisCacheConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * 简单的模式匹配\n   */\n  private matchPattern(key: string, pattern: string): boolean {\n    // 简单的通配符匹配，实际项目中可以使用更复杂的模式匹配\n    const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n    return regex.test(key);\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats(): void {\n    const connectedState = this.stats.redisConnected;\n    this.stats = {\n      memoryItems: 0,\n      memorySize: 0,\n      redisConnected: connectedState,\n      connected: connectedState,\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      sets: 0,\n      dels: 0,\n      errors: 0,\n      compressionHits: 0,\n      locks: 0,\n      prewarmedHits: 0,\n      protectionHits: 0,\n      avalancheHits: 0,\n      totalRequests: 0,\n      memoryUsage: 0,\n    };\n    logger.info('缓存统计已重置');\n  }\n\n  /**\n   * 停止缓存管理器\n   */\n  async stop(): Promise<void> {\n    try {\n      if (this.redis) {\n        await this.redis.quit();\n        this.redis = null;\n      }\n      this.memoryCache.clear();\n      this.lockPromises.clear();\n      this.prewarmedKeys.clear();\n      this.protectionCache.clear();\n      this.stats.redisConnected = false;\n      logger.info('Redis缓存管理器已停止');\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'stop',\n      });\n      logger.error('停止Redis缓存管理器失败', error.toLogObject());\n    }\n  }\n\n  // Duplicate healthCheck function removed - detailed version exists at line 817\n\n  /**\n   * 缓存预热\n   */\n  async warmup(data: Array<{\n    key: string;\n    value: unknown;\n    ttl?: number;\n    tags?: string[];\n  }>): Promise<{\n    success: number;\n    failed: number;\n  }> {\n    let success = 0;\n    let failed = 0;\n\n    for (const item of data) {\n      try {\n        const options: { ttl?: number; tags?: string[] } = {};\n        if (item.ttl !== undefined) {\noptions.ttl = item.ttl;\n}\n        if (item.tags) {\noptions.tags = item.tags;\n}\n        const result = await this.set(item.key, item.value, options);\n        if (result) {\n          success++;\n          this.prewarmedKeys.add(item.key);\n        } else {\n          failed++;\n        }\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'RedisCacheManager',\n          operation: 'warmup',\n        });\n        logger.error('预热缓存项失败', { key: item.key, error: error.toLogObject() });\n        failed++;\n      }\n    }\n\n    logger.info('缓存预热完成', { total: data.length, success, failed });\n    return { success, failed };\n  }\n\n  /**\n   * 清空缓存\n   */\n  async clear(pattern = '*'): Promise<number> {\n    let deletedCount = 0;\n\n    try {\n      // 清空内存缓存\n      if (pattern === '*') {\n        const itemCount = this.memoryCache.size;\n        this.memoryCache.clear();\n        deletedCount += itemCount;\n        this.stats.memoryItems = 0;\n        this.stats.memorySize = 0;\n      } else {\n        const keysToDelete: string[] = [];\n        for (const key of this.memoryCache.keys()) {\n          if (this.matchPattern(key, pattern)) {\n            keysToDelete.push(key);\n          }\n        }\n        for (const key of keysToDelete) {\n          const item = this.memoryCache.get(key);\n          if (item) {\n            this.stats.memoryItems--;\n            this.stats.memorySize -= item.size;\n          }\n          this.memoryCache.delete(key);\n          deletedCount++;\n        }\n      }\n\n      // 清空Redis缓存\n      if (this.redis && this.stats.redisConnected) {\n        try {\n          const redisDeleted = await this.redis.del(pattern);\n          deletedCount += redisDeleted;\n        } catch (unknownError: unknown) {\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'RedisCacheManager',\n            operation: 'clear.redisDelete',\n          });\n          logger.error('清空Redis缓存失败', { pattern, ...error.toLogObject() });\n          this.stats.errors++;\n        }\n      }\n\n      this.stats.dels += deletedCount;\n      logger.info('缓存清空完成', { pattern, deletedCount });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisCacheManager',\n        operation: 'clear',\n      });\n      logger.error('清空缓存失败', { pattern, ...error.toLogObject() });\n      this.stats.errors++;\n    }\n\n    return deletedCount;\n  }\n}\n\n// 创建全局实例\nexport const redisCacheManager = new RedisCacheManager();\n\nexport default RedisCacheManager;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/RedisHealthService.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'start' has no 'await' expression.","line":24,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":24,"endColumn":21},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'stop' has no 'await' expression.","line":28,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":28,"endColumn":20},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'checkHealth' has no 'await' expression.","line":32,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":32,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[871,874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[871,874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 简化的Redis健康服务\n */\n\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport class RedisHealthService {\n  private static instance: RedisHealthService | null = null;\n  private isHealthy: boolean = true;\n  private lastCheck: Date = new Date();\n\n  private constructor() {\n    logger.info('简化版RedisHealthService已初始化');\n  }\n\n  public static getInstance(): RedisHealthService {\n    if (!RedisHealthService.instance) {\n      RedisHealthService.instance = new RedisHealthService();\n    }\n    return RedisHealthService.instance;\n  }\n\n  public async start(): Promise<void> {\n    logger.info('Redis健康检查服务已启动');\n  }\n\n  public async stop(): Promise<void> {\n    logger.info('Redis健康检查服务已停止');\n  }\n\n  public async checkHealth(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    lastCheck: Date;\n    responseTime: number;\n    details: any;\n  }> {\n    const startTime = Date.now();\n\n    try {\n      // 简化的健康检查逻辑\n      this.isHealthy = true;\n      this.lastCheck = new Date();\n\n      return {\n        status: this.isHealthy ? 'healthy' : 'unhealthy',\n        lastCheck: this.lastCheck,\n        responseTime: Date.now() - startTime,\n        details: {\n          message: '简化模式：Redis健康检查',\n        },\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisHealthService',\n        operation: 'checkHealth',\n      });\n      this.isHealthy = false;\n      this.lastCheck = new Date();\n\n      return {\n        status: 'unhealthy',\n        lastCheck: this.lastCheck,\n        responseTime: Date.now() - startTime,\n        details: {\n          error: error.message,\n        },\n      };\n    }\n  }\n}\n\nexport default RedisHealthService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/RetryService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'request' should be typed with a non-any type.","line":156,"column":22,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":156,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4140,4143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4140,4143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .method on an `any` value.","line":163,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .url on an `any` value.","line":164,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .endpoint on an `any` value.","line":164,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":165,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .body on an `any` value.","line":165,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .params on an `any` value.","line":166,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .query on an `any` value.","line":166,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":232,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":232,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5877,5879],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 408.","line":253,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":253,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":253,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":253,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":253,"column":63,"nodeType":"Literal","messageId":"noMagic","endLine":253,"endColumn":66},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":253,"column":68,"nodeType":"Literal","messageId":"noMagic","endLine":253,"endColumn":71},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 504.","line":253,"column":73,"nodeType":"Literal","messageId":"noMagic","endLine":253,"endColumn":76},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":329,"column":60,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":329,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":381,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":381,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":381,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9481,9484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9481,9484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":381,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":381,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":382,"column":65,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":382,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":387,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":387,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9646,9649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9646,9649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .response on an `any` value.","line":387,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9681,9684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9681,9684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":387,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":388,"column":71,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":388,"endColumn":81},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'executeFallback' has no 'await' expression.","line":440,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":440,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 408.","line":545,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":545,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":545,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":545,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":545,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":545,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":545,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":545,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 504.","line":545,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":545,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 请求重试和降级策略服务\n * 实现智能重试机制、优雅降级和请求去重\n */\n\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface RetryConfig {\n  maxRetries: number;                    // 最大重试次数\n  baseDelay: number;                     // 基础延迟时间（毫秒）\n  maxDelay: number;                      // 最大延迟时间（毫秒）\n  backoffFactor: number;                 // 退避因子\n  retryableErrors?: string[];            // 可重试的错误类型\n  retryableStatusCodes?: number[];       // 可重试的HTTP状态码\n  enableJitter: boolean;                 // 是否启用抖动\n  onRetry?: (attempt: number, error: Error, delay: number) => void; // 重试回调\n}\n\nexport interface FallbackConfig {\n  enabled: boolean;                      // 是否启用降级\n  fallbackResponse?: unknown;                // 降级响应\n  fallbackProvider?: string;             // 降级提供商\n  cacheFallbackResponse: boolean;        // 是否缓存降级响应\n  maxCacheSize: number;                  // 最大缓存大小\n  cacheTTL: number;                      // 缓存TTL（毫秒）\n}\n\nexport interface RequestDeduplicationConfig {\n  enabled: boolean;                      // 是否启用去重\n  keyGenerator?: (request: unknown) => string; // 自定义key生成器\n  deduplicationWindow: number;           // 去重窗口时间（毫秒）\n  maxConcurrentRequests: number;         // 最大并发请求数\n}\n\nexport interface RetryResult<T> {\n  success: boolean;\n  data?: T;\n  error?: Error;\n  attempts: number;\n  totalDelay: number;\n  fallbackUsed: boolean;\n}\n\nexport interface RequestMetrics {\n  requestId: string;\n  attempts: number;\n  totalDuration: number;\n  error?: Error;\n  fallbackUsed: boolean;\n  timestamp: Date;\n}\n\n/**\n * 重试策略枚举\n */\nexport enum RetryStrategy {\n  FIXED = 'fixed',           // 固定延迟\n  LINEAR = 'linear',         // 线性退避\n  EXPONENTIAL = 'exponential', // 指数退避\n  EXPONENTIAL_WITH_JITTER = 'exponential_with_jitter' // 带抖动的指数退避\n}\n\n/**\n * 请求去重器\n */\nexport class RequestDeduplicator {\n  private readonly pendingRequests: Map<string, Promise<unknown>> = new Map();\n  private readonly requestMetrics: Map<string, RequestMetrics> = new Map();\n  private readonly cleanupInterval: NodeJS.Timeout;\n\n  constructor(private readonly config: RequestDeduplicationConfig) {\n    // 定期清理过期的去重记录\n    this.cleanupInterval = setInterval(() => {\n      this.cleanup();\n    }, this.config.deduplicationWindow);\n\n    logger.info('请求去重器初始化完成', {\n      enabled: this.config.enabled,\n      deduplicationWindow: this.config.deduplicationWindow,\n      maxConcurrentRequests: this.config.maxConcurrentRequests,\n    });\n  }\n\n  /**\n   * 执行去重请求\n   */\n  async execute<T>(\n    key: string,\n    operation: () => Promise<T>,\n  ): Promise<T> {\n    if (!this.config.enabled) {\n      return operation();\n    }\n\n    // 检查是否已有相同请求在进行\n    const existingRequest = this.pendingRequests.get(key);\n    if (existingRequest) {\n      logger.debug('请求去重，复用现有请求', { key });\n      return existingRequest as Promise<T>;\n    }\n\n    // 检查并发请求数量\n    if (this.pendingRequests.size >= this.config.maxConcurrentRequests) {\n      throw new Error('并发请求数超过限制');\n    }\n\n    // 执行新请求\n    const requestPromise = this.executeWithMetrics(key, operation);\n    this.pendingRequests.set(key, requestPromise);\n\n    try {\n      const result = await requestPromise;\n      return result;\n    } finally {\n      this.pendingRequests.delete(key);\n    }\n  }\n\n  /**\n   * 执行请求并记录指标\n   */\n  private async executeWithMetrics<T>(\n    key: string,\n    operation: () => Promise<T>,\n  ): Promise<T> {\n    const startTime = Date.now();\n    const metrics: RequestMetrics = {\n      requestId: key,\n      attempts: 1,\n      totalDuration: 0,\n      fallbackUsed: false,\n      timestamp: new Date(),\n    };\n\n    try {\n      const result = await operation();\n      metrics.totalDuration = Date.now() - startTime;\n      this.requestMetrics.set(key, metrics);\n      return result;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RequestDeduplicator',\n        operation: 'executeWithMetrics',\n      });\n      metrics.error = error;\n      metrics.totalDuration = Date.now() - startTime;\n      this.requestMetrics.set(key, metrics);\n      throw error;\n    }\n  }\n\n  /**\n   * 生成请求key\n   */\n  generateRequestKey(request: any): string {\n    if (this.config.keyGenerator) {\n      return this.config.keyGenerator(request);\n    }\n\n    // 默认key生成策略\n    const keyParts = [\n      request.method || 'GET',\n      (request.url || request.endpoint) ?? '',\n      JSON.stringify((request.data || request.body) ?? {}),\n      JSON.stringify((request.params || request.query) ?? {}),\n    ];\n\n    return Buffer.from(keyParts.join('|')).toString('base64');\n  }\n\n  /**\n   * 清理过期记录\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    const cutoffTime = now - this.config.deduplicationWindow;\n\n    // 清理请求指标\n    let cleanedMetrics = 0;\n    for (const [key, metrics] of this.requestMetrics.entries()) {\n      if (metrics.timestamp.getTime() < cutoffTime) {\n        this.requestMetrics.delete(key);\n        cleanedMetrics++;\n      }\n    }\n\n    if (cleanedMetrics > 0) {\n      logger.debug('清理过期的请求指标', { count: cleanedMetrics });\n    }\n  }\n\n  /**\n   * 获取请求指标\n   */\n  getMetrics(): RequestMetrics[] {\n    return Array.from(this.requestMetrics.values());\n  }\n\n  /**\n   * 清理所有数据\n   */\n  clear(): void {\n    this.pendingRequests.clear();\n    this.requestMetrics.clear();\n  }\n\n  /**\n   * 销毁去重器\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.clear();\n  }\n}\n\n/**\n * 重试服务\n */\nexport class RetryService {\n  private readonly deduplicator: RequestDeduplicator;\n  private readonly fallbackCache: Map<string, { data: unknown; timestamp: number }> = new Map();\n\n  constructor(\n    private readonly retryConfig: RetryConfig,\n    private readonly fallbackConfig: FallbackConfig,\n    deduplicationConfig?: RequestDeduplicationConfig,\n  ) {\n    this.deduplicator = new RequestDeduplicator(\n      deduplicationConfig || {\n        enabled: true,\n        deduplicationWindow: 30000, // 30秒\n        maxConcurrentRequests: 1000,  // 最大支持1000并发\n      },\n    );\n\n    // 设置默认的可重试错误和状态码\n    if (!this.retryConfig.retryableErrors) {\n      this.retryConfig.retryableErrors = [\n        'ECONNRESET',\n        'ETIMEDOUT',\n        'ECONNREFUSED',\n        'ENOTFOUND',\n        'EAI_AGAIN',\n        'NETWORK_ERROR',\n        'TIMEOUT_ERROR',\n      ];\n    }\n\n    if (!this.retryConfig.retryableStatusCodes) {\n      this.retryConfig.retryableStatusCodes = [408, 429, 500, 502, 503, 504];\n    }\n\n    logger.info('重试服务初始化完成', {\n      maxRetries: this.retryConfig.maxRetries,\n      baseDelay: this.retryConfig.baseDelay,\n      fallbackEnabled: this.fallbackConfig.enabled,\n    });\n  }\n\n  /**\n   * 执行带重试的操作\n   */\n  async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    context?: string,\n  ): Promise<RetryResult<T>> {\n    let lastError: Error | undefined;\n    let totalDelay = 0;\n    const startTime = Date.now();\n\n    for (let attempt = 0; attempt <= this.retryConfig.maxRetries; attempt++) {\n      try {\n        const result = await operation();\n\n        // 成功时记录指标\n        const duration = Date.now() - startTime;\n        logger.debug('请求成功', {\n          context,\n          attempt: attempt + 1,\n          duration,\n          totalDelay,\n        });\n\n        return {\n          success: true,\n          data: result,\n          attempts: attempt + 1,\n          totalDelay,\n          fallbackUsed: false,\n        };\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'RetryService',\n          operation: 'executeWithRetry',\n        });\n        lastError = error;\n\n        // 检查是否应该重试\n        if (attempt === this.retryConfig.maxRetries || !this.shouldRetry(lastError)) {\n          break;\n        }\n\n        // 计算延迟时间\n        const delay = this.calculateDelay(attempt);\n        totalDelay += delay;\n\n        // 调用重试回调\n        this.retryConfig.onRetry?.(attempt + 1, lastError, delay);\n\n        logger.warn('请求失败，准备重试', {\n          context,\n          attempt: attempt + 1,\n          maxRetries: this.retryConfig.maxRetries + 1,\n          error: lastError.message,\n          delay,\n          nextRetryIn: new Date(Date.now() + delay).toISOString(),\n        });\n\n        // 等待后重试\n        await this.sleep(delay);\n      }\n    }\n\n    // 所有重试都失败，尝试降级处理\n    if (this.fallbackConfig.enabled) {\n      const fallbackResult = await this.executeFallback<T>(lastError!);\n      return {\n        success: true,\n        data: fallbackResult,\n        attempts: this.retryConfig.maxRetries + 1,\n        totalDelay,\n        fallbackUsed: true,\n      };\n    }\n\n    // 重试失败且无降级处理\n    const duration = Date.now() - startTime;\n    logger.error('请求最终失败', {\n      context,\n      totalAttempts: this.retryConfig.maxRetries + 1,\n      duration,\n      totalDelay,\n      finalError: lastError?.message,\n    });\n\n    const result: RetryResult<T> = {\n      success: false,\n      attempts: this.retryConfig.maxRetries + 1,\n      totalDelay,\n      fallbackUsed: false,\n    };\n\n    if (lastError) {\n      result.error = lastError;\n    }\n\n    return result;\n  }\n\n  /**\n   * 执行带去重的重试操作\n   */\n  async executeWithRetryAndDeduplication<T>(\n    requestKey: string,\n    operation: () => Promise<T>,\n    context?: string,\n  ): Promise<RetryResult<T>> {\n    return this.deduplicator.execute(requestKey, async () => {\n      return this.executeWithRetry(operation, context);\n    });\n  }\n\n  /**\n   * 判断是否应该重试\n   */\n  private shouldRetry(error: Error): boolean {\n    // 检查错误类型\n    const errorCode = (error as any).code;\n    if (errorCode && this.retryConfig.retryableErrors?.includes(errorCode)) {\n      return true;\n    }\n\n    // 检查HTTP状态码\n    const statusCode = (error as any).response?.status || (error as any).status;\n    if (statusCode && this.retryConfig.retryableStatusCodes?.includes(statusCode)) {\n      return true;\n    }\n\n    // 检查错误消息\n    const errorMessage = error.message.toLowerCase();\n    const retryablePatterns = [\n      'timeout',\n      'network',\n      'connection',\n      'socket',\n      'econnreset',\n      'etimedout',\n    ];\n\n    return retryablePatterns.some(pattern => errorMessage.includes(pattern));\n  }\n\n  /**\n   * 计算延迟时间\n   */\n  private calculateDelay(attempt: number): number {\n    let delay: number;\n\n    // 基础延迟计算\n    switch (this.retryConfig.backoffFactor) {\n      case 1: // 固定延迟\n        delay = this.retryConfig.baseDelay;\n        break;\n      case 2: // 线性退避\n        delay = this.retryConfig.baseDelay * (attempt + 1);\n        break;\n      default: // 指数退避\n        delay = this.retryConfig.baseDelay * Math.pow(this.retryConfig.backoffFactor, attempt);\n        break;\n    }\n\n    // 限制最大延迟\n    delay = Math.min(delay, this.retryConfig.maxDelay);\n\n    // 添加抖动\n    if (this.retryConfig.enableJitter) {\n      const jitter = delay * 0.1 * Math.random(); // 10% 的抖动\n      delay += jitter;\n    }\n\n    return Math.floor(delay);\n  }\n\n  /**\n   * 执行降级处理\n   */\n  private async executeFallback<T>(error: Error): Promise<T> {\n    logger.warn('执行降级处理', {\n      error: error.message,\n      fallbackProvider: this.fallbackConfig.fallbackProvider,\n    });\n\n    // 检查缓存\n    if (this.fallbackConfig.cacheFallbackResponse) {\n      const cacheKey = 'fallback_response';\n      const cached = this.fallbackCache.get(cacheKey);\n\n      if (cached && (Date.now() - cached.timestamp) < this.fallbackConfig.cacheTTL) {\n        logger.debug('使用缓存的降级响应');\n        return cached.data as T;\n      }\n    }\n\n    // 返回降级响应\n    let fallbackResponse: T;\n\n    if (this.fallbackConfig.fallbackResponse) {\n      fallbackResponse = this.fallbackConfig.fallbackResponse as T;\n    } else {\n      // 默认降级响应\n      fallbackResponse = {\n        error: '服务暂时不可用，请稍后重试',\n        fallback: true,\n        timestamp: new Date().toISOString(),\n      } as T;\n    }\n\n    // 缓存降级响应\n    if (this.fallbackConfig.cacheFallbackResponse) {\n      const cacheKey = 'fallback_response';\n\n      // 检查缓存大小\n      if (this.fallbackCache.size >= this.fallbackConfig.maxCacheSize) {\n        // 删除最旧的缓存项\n        const keys = Array.from(this.fallbackCache.keys());\n        if (keys.length > 0) {\n          const oldestKey = keys[0];\n          if (oldestKey !== undefined) {\n            this.fallbackCache.delete(oldestKey);\n          }\n        }\n      }\n\n      this.fallbackCache.set(cacheKey, {\n        data: fallbackResponse,\n        timestamp: Date.now(),\n      });\n    }\n\n    return fallbackResponse;\n  }\n\n  /**\n   * 睡眠函数\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * 获取去重指标\n   */\n  getDeduplicationMetrics(): RequestMetrics[] {\n    return this.deduplicator.getMetrics();\n  }\n\n  /**\n   * 清理缓存\n   */\n  clearFallbackCache(): void {\n    this.fallbackCache.clear();\n  }\n\n  /**\n   * 销毁服务\n   */\n  destroy(): void {\n    this.deduplicator.destroy();\n    this.fallbackCache.clear();\n  }\n}\n\n/**\n * 创建默认重试配置\n */\nexport function createDefaultRetryConfig(): RetryConfig {\n  return {\n    maxRetries: 3,\n    baseDelay: 1000,\n    maxDelay: 10000,\n    backoffFactor: 2,\n    enableJitter: true,\n    retryableErrors: [\n      'ECONNRESET',\n      'ETIMEDOUT',\n      'ECONNREFUSED',\n      'ENOTFOUND',\n      'EAI_AGAIN',\n      'NETWORK_ERROR',\n      'TIMEOUT_ERROR',\n    ],\n    retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n  };\n}\n\n/**\n * 创建默认降级配置\n */\nexport function createDefaultFallbackConfig(): FallbackConfig {\n  return {\n    enabled: true,\n    fallbackResponse: {\n      error: '服务暂时不可用，请稍后重试',\n      fallback: true,\n      timestamp: new Date().toISOString(),\n    },\n    cacheFallbackResponse: true,\n    maxCacheSize: 100,\n    cacheTTL: 300000, // 5分钟\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/SessionEventService.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10000.","line":16,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":16,"endColumn":45},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'recordEvent' has no 'await' expression.","line":33,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":33,"endColumn":20},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":70,"column":25,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":70,"endColumn":50},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'queryEvents' has no 'await' expression.","line":87,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":87,"endColumn":20},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":91,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":91,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2111,2113],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":96,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":96,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2265,2266],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":102,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":102,"endColumn":27,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2444,2445],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":127,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":127,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3037,3039],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":128,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":128,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3092,3094],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":153,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":153,"endColumn":43},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'getSessionEvents' has no 'await' expression.","line":172,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":172,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":176,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":176,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4368,4370],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'getEventStats' has no 'await' expression.","line":185,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":185,"endColumn":22},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":195,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":195,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5021,5023],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":211,"column":80,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":211,"endColumn":82,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5538,5540],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":219,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":219,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5786,5788],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":226,"column":82,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":226,"endColumn":84,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6000,6002],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":232,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":232,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6203,6205],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of type any[] to a variable of type { userId?: string; eventCount: number; }[].","line":248,"column":7,"nodeType":"Property","messageId":"unsafeAssignment","endLine":257,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6949,6952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6949,6952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .userId on an `any` value.","line":252,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":252,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":254,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":254,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7117,7120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7117,7120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7125,7128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7125,7128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .eventCount on an `any` value.","line":256,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .eventCount on an `any` value.","line":256,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":62},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'cleanupOldEvents' has no 'await' expression.","line":264,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":264,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":265,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":265,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7358,7360],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'deleteEvents' has no 'await' expression.","line":287,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":287,"endColumn":21},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":291,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":291,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8077,8079],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'originalLength' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":294,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9843.","line":363,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":363,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":364,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":364,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9910,9912],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":365,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":365,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9951,9953],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":366,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":366,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10020,10022],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'getEventStream' has no 'await' expression.","line":388,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":388,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":396,"column":81,"nodeType":"Literal","messageId":"noMagic","endLine":396,"endColumn":86},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":400,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":400,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10812,10814],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'next' has no 'await' expression.","line":422,"column":11,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":422,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":422,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11384,11387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11384,11387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { randomUUID } from 'crypto';\nimport type {\n  SessionEvent,\n  SessionEventType,\n  EventQueryParams,\n  PaginatedResponse,\n} from '@/types';\nimport logger from '@/utils/logger';\n\n/**\n * 会话事件追踪服务\n * 负责记录、存储和查询会话相关的事件\n */\nexport class SessionEventService {\n  private readonly events: Map<string, SessionEvent[]> = new Map();\n  private readonly maxEventsPerAgent = 10000; // 每个智能体最大事件数量\n\n  /**\n   * 清理事件缓存（测试或重置时使用）\n   */\n  clear(agentId?: string): void {\n    if (agentId) {\n      this.events.delete(agentId);\n      return;\n    }\n\n    this.events.clear();\n  }\n\n  /**\n   * 记录会话事件\n   */\n  async recordEvent(\n    agentId: string,\n    sessionId: string,\n    eventType: SessionEventType,\n    metadata?: {\n      oldData?: unknown;\n      newData?: unknown;\n      reason?: string;\n      feedbackType?: 'good' | 'bad';\n      feedbackValue?: string;\n      tags?: string[];\n      exportFormat?: string;\n      [key: string]: unknown;\n    },\n    context?: {\n      userId?: string;\n      userAgent?: string;\n      ipAddress?: string;\n    },\n  ): Promise<SessionEvent> {\n    const event: SessionEvent = {\n      id: randomUUID(),\n      sessionId,\n      agentId,\n      eventType,\n      timestamp: new Date().toISOString(),\n      ...(context?.userId && { userId: context.userId }),\n      ...(metadata && { metadata }),\n      ...(context?.userAgent && { userAgent: context.userAgent }),\n      ...(context?.ipAddress && { ipAddress: context.ipAddress }),\n    };\n\n    // 存储事件（内存存储，实际生产环境应使用数据库）\n    if (!this.events.has(agentId)) {\n      this.events.set(agentId, []);\n    }\n\n    const agentEvents = this.events.get(agentId)!;\n    agentEvents.push(event);\n\n    // 限制事件数量，防止内存溢出\n    if (agentEvents.length > this.maxEventsPerAgent) {\n      const excessCount = agentEvents.length - this.maxEventsPerAgent;\n      agentEvents.splice(0, excessCount);\n    }\n\n    logger.debug('[事件记录]', { agentId, sessionId, eventType });\n\n    return event;\n  }\n\n  /**\n   * 查询会话事件\n   */\n  async queryEvents(\n    agentId: string,\n    params: EventQueryParams,\n  ): Promise<PaginatedResponse<SessionEvent>> {\n    let agentEvents = this.events.get(agentId) || [];\n\n    // 过滤条件\n    if (params.sessionIds && params.sessionIds.length > 0) {\n      agentEvents = agentEvents.filter(event =>\n        params.sessionIds!.includes(event.sessionId),\n      );\n    }\n\n    if (params.eventTypes && params.eventTypes.length > 0) {\n      agentEvents = agentEvents.filter(event =>\n        params.eventTypes!.includes(event.eventType),\n      );\n    }\n\n    if (params.startDate) {\n      const startDate = new Date(params.startDate);\n      agentEvents = agentEvents.filter(event =>\n        new Date(event.timestamp) >= startDate,\n      );\n    }\n\n    if (params.endDate) {\n      const endDate = new Date(params.endDate);\n      agentEvents = agentEvents.filter(event =>\n        new Date(event.timestamp) <= endDate,\n      );\n    }\n\n    if (params.userId) {\n      agentEvents = agentEvents.filter(event =>\n        event.userId === params.userId,\n      );\n    }\n\n    // 排序\n    const sortBy = params.sortBy || 'timestamp';\n    const sortOrder = params.sortOrder || 'desc';\n\n    agentEvents.sort((a, b) => {\n      let aValue: string | number;\n      let bValue: string | number;\n\n      switch (sortBy) {\n        case 'timestamp':\n          aValue = new Date(a.timestamp).getTime();\n          bValue = new Date(b.timestamp).getTime();\n          break;\n        default:\n          aValue = new Date(a.timestamp).getTime();\n          bValue = new Date(b.timestamp).getTime();\n      }\n\n      if (sortOrder === 'asc') {\n        return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;\n      } else {\n        return aValue < bValue ? 1 : aValue > bValue ? -1 : 0;\n      }\n    });\n\n    // 分页\n    const page = params.page ?? 1;\n    const pageSize = params.pageSize ?? 20;\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    const paginatedData = agentEvents.slice(startIndex, endIndex);\n\n    return {\n      data: paginatedData,\n      total: agentEvents.length,\n      page,\n      pageSize,\n      totalPages: Math.ceil(agentEvents.length / pageSize),\n      hasNext: endIndex < agentEvents.length,\n      hasPrev: page > 1,\n    };\n  }\n\n  /**\n   * 获取会话的所有事件\n   */\n  async getSessionEvents(\n    agentId: string,\n    sessionId: string,\n  ): Promise<SessionEvent[]> {\n    const agentEvents = this.events.get(agentId) || [];\n    return agentEvents\n      .filter(event => event.sessionId === sessionId)\n      .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n  }\n\n  /**\n   * 获取事件统计信息\n   */\n  async getEventStats(\n    agentId: string,\n    dateRange?: { start: string; end: string },\n  ): Promise<{\n    totalEvents: number;\n    eventTypeStats: Array<{ type: SessionEventType; count: number }>;\n    dailyActivity: Array<{ date: string; count: number }>;\n    topSessions: Array<{ sessionId: string; eventCount: number }>;\n    userActivity: Array<{ userId?: string; eventCount: number }>;\n  }> {\n    let agentEvents = this.events.get(agentId) || [];\n\n    // 日期范围过滤\n    if (dateRange) {\n      const startDate = new Date(dateRange.start);\n      const endDate = new Date(dateRange.end);\n\n      agentEvents = agentEvents.filter(event => {\n        const eventDate = new Date(event.timestamp);\n        return eventDate >= startDate && eventDate <= endDate;\n      });\n    }\n\n    // 事件类型统计\n    const eventTypeStats = new Map<SessionEventType, number>();\n    agentEvents.forEach(event => {\n      eventTypeStats.set(event.eventType, (eventTypeStats.get(event.eventType) || 0) + 1);\n    });\n\n    // 每日活动统计\n    const dailyActivity = new Map<string, number>();\n    agentEvents.forEach(event => {\n      const date = event.timestamp.split('T')[0];\n      if (date) {\n        dailyActivity.set(date, (dailyActivity.get(date) || 0) + 1);\n      }\n    });\n\n    // 会话活动统计\n    const sessionActivity = new Map<string, number>();\n    agentEvents.forEach(event => {\n      sessionActivity.set(event.sessionId, (sessionActivity.get(event.sessionId) || 0) + 1);\n    });\n\n    // 用户活动统计\n    const userActivity = new Map<string | undefined, number>();\n    agentEvents.forEach(event => {\n      userActivity.set(event.userId, (userActivity.get(event.userId) || 0) + 1);\n    });\n\n    return {\n      totalEvents: agentEvents.length,\n      eventTypeStats: Array.from(eventTypeStats.entries())\n        .map(([type, count]) => ({ type, count }))\n        .sort((a, b) => b.count - a.count),\n      dailyActivity: Array.from(dailyActivity.entries())\n        .map(([date, count]) => ({ date, count }))\n        .sort((a, b) => b.date.localeCompare(a.date))\n        .slice(0, 30),\n      topSessions: Array.from(sessionActivity.entries())\n        .map(([sessionId, eventCount]) => ({ sessionId, eventCount }))\n        .sort((a, b) => b.eventCount - a.eventCount)\n        .slice(0, 10),\n      userActivity: Array.from(userActivity.entries())\n        .map(([userId, eventCount]) => {\n          const userActivityData: any = { eventCount };\n          if (userId) {\n            userActivityData.userId = userId;\n          }\n          return userActivityData;\n        })\n        .sort((a: any, b: any) => b.eventCount - a.eventCount)\n        .slice(0, 10),\n    };\n  }\n\n  /**\n   * 清理旧事件（防止内存溢出）\n   */\n  async cleanupOldEvents(agentId: string, olderThanDays = 30): Promise<number> {\n    const agentEvents = this.events.get(agentId) || [];\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n\n    const originalCount = agentEvents.length;\n    const filteredEvents = agentEvents.filter((event: SessionEvent) =>\n      new Date(event.timestamp) >= cutoffDate,\n    );\n\n    this.events.set(agentId, filteredEvents);\n    const deletedCount = originalCount - filteredEvents.length;\n\n    if (deletedCount > 0) {\n      logger.debug('清理旧事件', { agentId, deletedCount });\n    }\n\n    return deletedCount;\n  }\n\n  /**\n   * 批量删除事件\n   */\n  async deleteEvents(\n    agentId: string,\n    eventIds: string[],\n  ): Promise<{ success: number; failed: number; errors: string[] }> {\n    const agentEvents = this.events.get(agentId) || [];\n    const results = { success: 0, failed: 0, errors: [] as string[] };\n\n    const originalLength = agentEvents.length;\n\n    // 过滤掉要删除的事件\n    const remainingEvents = agentEvents.filter((event: SessionEvent) => {\n      if (eventIds.includes(event.id)) {\n        results.success++;\n        return false;\n      }\n      return true;\n    });\n\n    this.events.set(agentId, remainingEvents);\n    results.failed = eventIds.length - results.success;\n\n    if (results.failed > 0) {\n      results.errors.push(`${results.failed} 个事件未找到`);\n    }\n\n    return results;\n  }\n\n  /**\n   * 导出事件数据\n   */\n  async exportEvents(\n    agentId: string,\n    params: EventQueryParams & { format: 'json' | 'csv' },\n  ): Promise<{ filename: string; data: string }> {\n    const result = await this.queryEvents(agentId, params);\n    const events = result.data;\n\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n\n    if (params.format === 'json') {\n      const exportData = {\n        metadata: {\n          exportedAt: new Date().toISOString(),\n          totalEvents: events.length,\n          agentId,\n          filters: params,\n        },\n        events,\n      };\n\n      return {\n        filename: `events_${agentId}_${timestamp}.json`,\n        data: JSON.stringify(exportData, null, 2),\n      };\n    } else {\n      // CSV格式\n      const headers = [\n        'Event ID',\n        'Session ID',\n        'Event Type',\n        'Timestamp',\n        'User ID',\n        'User Agent',\n        'IP Address',\n        'Metadata',\n      ];\n\n      const csvRows = [headers.join(',')];\n\n      events.forEach((event: SessionEvent) => {\n        const row = [\n          `\"${event.id}\"`,\n          `\"${event.sessionId}\"`,\n          `\"${event.eventType}\"`,\n          event.timestamp,\n          event.userId ?? 9843,\n          `\"${this.escapeCsv(event.userAgent || '')}\"`,\n          `\"${event.ipAddress || ''}\"`,\n          `\"${this.escapeCsv(JSON.stringify(event.metadata || {}))}\"`,\n        ];\n        csvRows.push(row.join(','));\n      });\n\n      return {\n        filename: `events_${agentId}_${timestamp}.csv`,\n        data: csvRows.join('\\n'),\n      };\n    }\n  }\n\n  /**\n   * 转义CSV字段\n   */\n  private escapeCsv(field: string): string {\n    return field.replace(/\"/g, '\"\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n  }\n\n  /**\n   * 获取实时事件流（用于WebSocket或SSE）\n   */\n  async getEventStream(\n    agentId: string,\n    params: {\n      sessionIds?: string[];\n      eventTypes?: SessionEventType[];\n      since?: string;\n    } = {},\n  ): Promise<AsyncIterable<SessionEvent>> {\n    const since = params.since ? new Date(params.since) : new Date(Date.now() - 60000); // 默认最近1分钟\n\n    // 这里应该实现实时事件流\n    // 当前返回一个模拟的异步可迭代对象\n    const agentEvents = this.events.get(agentId) || [];\n\n    const filteredEvents = agentEvents.filter(event => {\n      const eventDate = new Date(event.timestamp);\n\n      if (eventDate < since) {\n        return false;\n      }\n      if (params.sessionIds && !params.sessionIds.includes(event.sessionId)) {\n        return false;\n      }\n      if (params.eventTypes && !params.eventTypes.includes(event.eventType)) {\n        return false;\n      }\n\n      return true;\n    });\n\n    return {\n      [Symbol.asyncIterator]() {\n        let index = 0;\n        return {\n          async next(): Promise<IteratorResult<SessionEvent, any>> {\n            if (index < filteredEvents.length) {\n              const event = filteredEvents[index++];\n              if (event) {\n                return { value: event, done: false };\n              }\n            }\n            return { value: undefined, done: true };\n          },\n        };\n      },\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/SmartCacheService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[823,826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[823,826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":54,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":54,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":79,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":51},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":163,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":163,"endColumn":32,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3811,3812],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tag' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":197,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":20},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'invalidatePattern' has no 'await' expression.","line":230,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":230,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5645,5648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5645,5648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5955,5958],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5955,5958],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":275,"column":33,"nodeType":"Property","messageId":"anyAssignment","endLine":275,"endColumn":38},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'clear' has no 'await' expression.","line":330,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":330,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 智能缓存服务\n *\n * 提供高级缓存策略：\n * - 多层缓存（内存+Redis）\n * - 智能失效策略\n * - 缓存预热\n * - 缓存命中率统计\n */\n\nimport { getCacheService } from '@/services/CacheService';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\n/**\n * 缓存配置\n */\nexport interface CacheConfig {\n  ttl: number;                    // 过期时间（秒）\n  prefix: string;                 // 缓存键前缀\n  enableMemoryCache?: boolean;    // 启用内存缓存\n  memoryTtl?: number;            // 内存缓存TTL（秒）\n  tags?: string[];               // 缓存标签（用于批量失效）\n}\n\n/**\n * 缓存统计\n */\nexport interface CacheStats {\n  hits: number;\n  misses: number;\n  sets: number;\n  deletes: number;\n  hitRate: number;\n}\n\n/**\n * 智能缓存服务\n */\nexport class SmartCacheService {\n  private static instance: SmartCacheService | null = null;\n  private readonly memoryCache: Map<string, { value: any; expiresAt: number }> = new Map();\n  private stats: CacheStats = {\n    hits: 0,\n    misses: 0,\n    sets: 0,\n    deletes: 0,\n    hitRate: 0,\n  };\n  private readonly tagIndex: Map<string, Set<string>> = new Map();\n\n  private constructor() {\n    // 定期清理过期的内存缓存（每分钟）\n    setInterval(() => this.cleanupMemoryCache(), 60000);\n  }\n\n  /**\n   * 获取单例实例\n   */\n  public static getInstance(): SmartCacheService {\n    if (!SmartCacheService.instance) {\n      SmartCacheService.instance = new SmartCacheService();\n    }\n    return SmartCacheService.instance;\n  }\n\n  /**\n   * 获取缓存值（带智能回源）\n   */\n  public async getOrSet<T>(\n    key: string,\n    fallback: () => Promise<T>,\n    config: CacheConfig,\n  ): Promise<T> {\n    const fullKey = `${config.prefix}:${key}`;\n\n    // 1. 尝试从内存缓存获取\n    if (config.enableMemoryCache) {\n      const memValue = this.getFromMemory(fullKey);\n      if (memValue !== null) {\n        this.stats.hits++;\n        this.updateHitRate();\n        return memValue as T;\n      }\n    }\n\n    // 2. 尝试从Redis获取\n    try {\n      const cacheService = getCacheService();\n      if (cacheService.isConnected()) {\n        const cached = await cacheService.get(fullKey);\n        if (cached !== null) {\n          this.stats.hits++;\n          this.updateHitRate();\n\n          // 回填到内存缓存\n          if (config.enableMemoryCache) {\n            this.setToMemory(fullKey, cached, config.memoryTtl ?? 30);\n          }\n\n          return cached as T;\n        }\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SmartCacheService',\n        operation: 'getOrSet.redisGet',\n      });\n      logger.warn('SmartCache: Redis获取失败，回源数据', {\n        key: fullKey,\n        error: error.toLogObject(),\n      });\n    }\n\n    // 3. 缓存未命中，执行回源\n    this.stats.misses++;\n    this.updateHitRate();\n\n    const value = await fallback();\n\n    // 4. 存储到缓存\n    await this.set(fullKey, value, config);\n\n    return value;\n  }\n\n  /**\n   * 设置缓存\n   */\n  public async set<T>(key: string, value: T, config: CacheConfig): Promise<void> {\n    const fullKey = key.startsWith(config.prefix) ? key : `${config.prefix}:${key}`;\n\n    this.stats.sets++;\n\n    // 存储到Redis\n    try {\n      const cacheService = getCacheService();\n      if (cacheService.isConnected()) {\n        await cacheService.set(fullKey, value, { ttl: config.ttl });\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SmartCacheService',\n        operation: 'set.redisSet',\n      });\n      logger.error('SmartCache: Redis存储失败', {\n        key: fullKey,\n        error: error.toLogObject(),\n      });\n    }\n\n    // 存储到内存缓存\n    if (config.enableMemoryCache) {\n      this.setToMemory(fullKey, value, config.memoryTtl ?? 30);\n    }\n\n    // 更新标签索引\n    if (config.tags) {\n      for (const tag of config.tags) {\n        if (!this.tagIndex.has(tag)) {\n          this.tagIndex.set(tag, new Set());\n        }\n        this.tagIndex.get(tag)!.add(fullKey);\n      }\n    }\n  }\n\n  /**\n   * 删除缓存\n   */\n  public async delete(key: string, prefix?: string): Promise<void> {\n    const fullKey = prefix ? `${prefix}:${key}` : key;\n\n    this.stats.deletes++;\n\n    // 从内存删除\n    this.memoryCache.delete(fullKey);\n\n    // 从Redis删除\n    try {\n      const cacheService = getCacheService();\n      if (cacheService.isConnected()) {\n        await cacheService.del(fullKey);\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SmartCacheService',\n        operation: 'delete.redisDelete',\n      });\n      logger.error('SmartCache: Redis删除失败', {\n        key: fullKey,\n        error: error.toLogObject(),\n      });\n    }\n\n    // 从标签索引中移除\n    for (const [tag, keys] of this.tagIndex.entries()) {\n      keys.delete(fullKey);\n    }\n  }\n\n  /**\n   * 按标签批量失效\n   */\n  public async invalidateByTag(tag: string): Promise<number> {\n    const keys = this.tagIndex.get(tag);\n    if (!keys || keys.size === 0) {\n      return 0;\n    }\n\n    let invalidated = 0;\n    for (const key of keys) {\n      await this.delete(key);\n      invalidated++;\n    }\n\n    this.tagIndex.delete(tag);\n\n    logger.info('SmartCache: 按标签失效缓存', {\n      tag,\n      invalidated,\n    });\n\n    return invalidated;\n  }\n\n  /**\n   * 批量失效（按模式匹配）\n   */\n  public async invalidatePattern(pattern: string): Promise<number> {\n    let invalidated = 0;\n\n    // 从内存缓存失效\n    for (const key of this.memoryCache.keys()) {\n      if (key.includes(pattern)) {\n        this.memoryCache.delete(key);\n        invalidated++;\n      }\n    }\n\n    // 注意：CacheService目前不支持keys()方法\n    // 需要依赖标签系统或者扩展CacheService\n\n    logger.info('SmartCache: 按模式失效缓存（仅内存）', {\n      pattern,\n      invalidated,\n    });\n\n    return invalidated;\n  }\n\n  /**\n   * 从内存缓存获取\n   */\n  private getFromMemory(key: string): any | null {\n    const item = this.memoryCache.get(key);\n    if (!item) {\n      return null;\n    }\n\n    // 检查是否过期\n    if (Date.now() > item.expiresAt) {\n      this.memoryCache.delete(key);\n      return null;\n    }\n\n    return item.value;\n  }\n\n  /**\n   * 存储到内存缓存\n   */\n  private setToMemory(key: string, value: any, ttlSeconds: number): void {\n    const expiresAt = Date.now() + ttlSeconds * 1000;\n    this.memoryCache.set(key, { value, expiresAt });\n  }\n\n  /**\n   * 清理过期的内存缓存\n   */\n  private cleanupMemoryCache(): void {\n    const now = Date.now();\n    let cleaned = 0;\n\n    for (const [key, item] of this.memoryCache.entries()) {\n      if (now > item.expiresAt) {\n        this.memoryCache.delete(key);\n        cleaned++;\n      }\n    }\n\n    if (cleaned > 0) {\n      logger.debug('SmartCache: 清理过期内存缓存', { cleaned });\n    }\n  }\n\n  /**\n   * 更新命中率\n   */\n  private updateHitRate(): void {\n    const total = this.stats.hits + this.stats.misses;\n    this.stats.hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;\n  }\n\n  /**\n   * 获取缓存统计\n   */\n  public getStats(): CacheStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * 重置统计\n   */\n  public resetStats(): void {\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      sets: 0,\n      deletes: 0,\n      hitRate: 0,\n    };\n\n    logger.info('SmartCache: 统计已重置');\n  }\n\n  /**\n   * 清空所有缓存\n   */\n  public async clear(): Promise<void> {\n    // 清空内存缓存\n    this.memoryCache.clear();\n    this.tagIndex.clear();\n\n    // 注意：CacheService目前不支持clear()方法\n    // 需要手动删除各个缓存键或扩展CacheService\n\n    logger.warn('SmartCache: 内存缓存已清空');\n  }\n\n  /**\n   * 获取缓存大小\n   */\n  public async getCacheSize(): Promise<{ memory: number; redis: number }> {\n    let redisSize = 0;\n\n    try {\n      const cacheService = getCacheService();\n      if (cacheService.isConnected()) {\n        // 获取Redis中所有键的数量\n        const dbsize = await cacheService.dbsize();\n        redisSize = dbsize ?? 0;\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SmartCacheService',\n        operation: 'getCacheSize',\n      });\n      logger.warn('获取Redis缓存大小失败', { error: error.toLogObject() });\n    }\n\n    return {\n      memory: this.memoryCache.size,\n      redis: redisSize,\n    };\n  }\n}\n\n// 导出单例实例\nexport default SmartCacheService;\n\n// 预定义的缓存配置\nexport const CacheConfigs = {\n  // 智能体列表缓存（5分钟）\n  AGENTS_LIST: {\n    ttl: 300,\n    prefix: 'agents',\n    enableMemoryCache: true,\n    memoryTtl: 60,\n    tags: ['agents'],\n  } as CacheConfig,\n\n  // 单个智能体缓存（10分钟）\n  AGENT_DETAIL: {\n    ttl: 600,\n    prefix: 'agent',\n    enableMemoryCache: true,\n    memoryTtl: 120,\n    tags: ['agents'],\n  } as CacheConfig,\n\n  // 用户会话列表（1分钟，频繁更新）\n  USER_SESSIONS: {\n    ttl: 60,\n    prefix: 'user:sessions',\n    enableMemoryCache: true,\n    memoryTtl: 30,\n    tags: ['sessions'],\n  } as CacheConfig,\n\n  // 会话详情（3分钟）\n  SESSION_DETAIL: {\n    ttl: 180,\n    prefix: 'session',\n    enableMemoryCache: true,\n    memoryTtl: 60,\n    tags: ['sessions'],\n  } as CacheConfig,\n\n  // 会话消息（30秒，实时性要求高）\n  SESSION_MESSAGES: {\n    ttl: 30,\n    prefix: 'session:messages',\n    enableMemoryCache: false, // 消息量大，不适合内存缓存\n    tags: ['messages'],\n  } as CacheConfig,\n\n  // 用户信息（5分钟）\n  USER_INFO: {\n    ttl: 300,\n    prefix: 'user:info',\n    enableMemoryCache: true,\n    memoryTtl: 120,\n    tags: ['users'],\n  } as CacheConfig,\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/TokenService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1004,1007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1004,1007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":49,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":49,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2000.","line":49,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":49,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .password on an `any` value.","line":56,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `RedisOptions`.","line":59,"column":28,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":59,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 32.","line":312,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":312,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 64.","line":319,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":319,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":332,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":332,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":357,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":357,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .username on an `any` value.","line":359,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .role on an `any` value.","line":360,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Redis from 'ioredis';\nimport jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport type { Pool } from 'pg';\nimport { SystemError, createErrorFromUnknown } from '@/types/errors';\nimport logger from '@/utils/logger';\nimport { getPool } from '@/utils/db';\nimport { AppConfig } from '@/config/AppConfig'; // ✅ 统一配置服务\n\nexport interface TokenPayload {\n  userId: string;\n  username: string;\n  role: 'admin' | 'user';\n  iat: number;\n  exp: number;\n}\n\nexport interface TokenMetadata {\n  createdAt: number;\n  userAgent?: string;\n  ip?: string;\n  lastAccessedAt: number;\n}\n\nexport class TokenService {\n  private readonly redis: Redis;\n  private readonly secret: string;\n  private readonly ttl: number;\n  private readonly refreshTtl: number;\n\n  /**\n   * 延迟获取数据库连接池\n   * 避免在模块导入时调用 getPool()，确保 initDB() 已执行\n   */\n  private get pool(): Pool {\n    return getPool();\n  }\n\n  constructor() {\n    const appRedisConfig = AppConfig.getRedisConfig();\n\n    // ✅ 构建Redis配置，仅在password存在时包含\n    const redisOptions: any = {\n      host: appRedisConfig.host,\n      port: appRedisConfig.port,\n      db: appRedisConfig.db,\n      keyPrefix: 'token:',\n      retryStrategy: (times: number) => {\n        const delay = Math.min(times * 50, 2000);\n        return delay;\n      },\n      lazyConnect: true, // 延迟连接,避免测试环境启动失败\n    };\n\n    if (appRedisConfig.password) {\n      redisOptions.password = appRedisConfig.password;\n    }\n\n    this.redis = new Redis(redisOptions);\n    this.secret = process.env.JWT_SECRET ?? this.generateSecret();\n    this.ttl = parseInt(process.env.TOKEN_TTL ?? '604800', 10); // 7 天\n    this.refreshTtl = parseInt(process.env.REFRESH_TOKEN_TTL ?? '2592000', 10); // 30 天\n    // ✅ 不再在构造函数中调用 getPool()，改为使用 getter 延迟获取\n\n    // 监听 Redis 连接事件\n    this.redis.on('error', (err) => {\n      logger.error('Redis connection error', { component: 'TokenService', error: err });\n    });\n\n    this.redis.on('connect', () => {\n      logger.info('Redis connected successfully', { component: 'TokenService' });\n    });\n  }\n\n  /**\n   * 确保 Redis 连接已建立\n   */\n  private async ensureRedisConnected(): Promise<void> {\n    if (this.redis.status !== 'ready') {\n      try {\n        await this.redis.connect();\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'TokenService',\n          operation: 'ensureRedisConnected',\n        });\n        throw new SystemError({\n          message: 'Failed to connect to Redis',\n          code: 'REDIS_CONNECTION_ERROR',\n          originalError: error,\n        });\n      }\n    }\n  }\n\n  /**\n   * 创建访问令牌\n   */\n  async createAccessToken(\n    userId: string,\n    username: string,\n    role: 'admin' | 'user',\n    metadata?: Partial<TokenMetadata>,\n  ): Promise<string> {\n    await this.ensureRedisConnected();\n\n    const now = Math.floor(Date.now() / 1000);\n    const payload: TokenPayload = {\n      userId,\n      username,\n      role,\n      iat: now,\n      exp: now + this.ttl,\n    };\n\n    const token = jwt.sign(payload, this.secret);\n\n    // 存储到 Redis\n    const tokenKey = `access:${userId}:${this.hashToken(token)}`;\n    const tokenMetadata: TokenMetadata = {\n      createdAt: now,\n      lastAccessedAt: now,\n    };\n\n    // 只在有值时添加可选字段\n    if (metadata?.userAgent) {\n      tokenMetadata.userAgent = metadata.userAgent;\n    }\n    if (metadata?.ip) {\n      tokenMetadata.ip = metadata.ip;\n    }\n\n    await this.redis.setex(tokenKey, this.ttl, JSON.stringify(tokenMetadata));\n\n    logger.info('Access token created', {\n      component: 'TokenService',\n      userId,\n      username,\n      role,\n    });\n\n    return token;\n  }\n\n  /**\n   * 创建刷新令牌\n   */\n  async createRefreshToken(userId: string): Promise<string> {\n    await this.ensureRedisConnected();\n\n    const token = this.generateRandomToken();\n    const refreshKey = `refresh:${userId}:${this.hashToken(token)}`;\n\n    await this.redis.setex(refreshKey, this.refreshTtl, Date.now().toString());\n\n    logger.info('Refresh token created', { component: 'TokenService', userId });\n\n    return token;\n  }\n\n  /**\n   * 验证访问令牌\n   */\n  async verifyAccessToken(token: string): Promise<TokenPayload | null> {\n    await this.ensureRedisConnected();\n\n    try {\n      // JWT 验证\n      const payload = jwt.verify(token, this.secret) as TokenPayload;\n\n      // Redis 检查(支持主动撤销)\n      const tokenKey = `access:${payload.userId}:${this.hashToken(token)}`;\n      const exists = await this.redis.exists(tokenKey);\n\n      if (!exists) {\n        logger.warn('Token not found in Redis', {\n          component: 'TokenService',\n          userId: payload.userId,\n        });\n        return null;\n      }\n\n      // 更新最后访问时间\n      await this.updateLastAccessed(tokenKey);\n\n      return payload;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'TokenService',\n        operation: 'verifyAccessToken',\n      });\n      if (error instanceof jwt.JsonWebTokenError) {\n        logger.warn('Invalid JWT token', {\n          component: 'TokenService',\n          error: error.message,\n        });\n      } else if (error instanceof jwt.TokenExpiredError) {\n        logger.info('Token expired', {\n          component: 'TokenService',\n          expiredAt: error.expiredAt,\n        });\n      } else {\n        logger.error('Token verification error', {\n          component: 'TokenService',\n          error: error.toLogObject(),\n        });\n      }\n      return null;\n    }\n  }\n\n  /**\n   * 刷新访问令牌\n   */\n  async refreshAccessToken(\n    refreshToken: string,\n    userId: string,\n  ): Promise<{ accessToken: string; newRefreshToken: string } | null> {\n    await this.ensureRedisConnected();\n\n    const refreshKey = `refresh:${userId}:${this.hashToken(refreshToken)}`;\n    const exists = await this.redis.exists(refreshKey);\n\n    if (!exists) {\n      logger.warn('Refresh token not found', { component: 'TokenService', userId });\n      return null;\n    }\n\n    // 获取用户信息\n    const userInfo = await this.getUserInfo(userId);\n    if (!userInfo) {\n      logger.error('User not found during token refresh', {\n        component: 'TokenService',\n        userId,\n      });\n      return null;\n    }\n\n    // 创建新令牌对\n    const accessToken = await this.createAccessToken(userId, userInfo.username, userInfo.role);\n    const newRefreshToken = await this.createRefreshToken(userId);\n\n    // 撤销旧的刷新令牌\n    await this.redis.del(refreshKey);\n\n    logger.info('Tokens refreshed', { component: 'TokenService', userId });\n\n    return { accessToken, newRefreshToken };\n  }\n\n  /**\n   * 撤销用户所有令牌\n   */\n  async revokeAllTokens(userId: string): Promise<void> {\n    await this.ensureRedisConnected();\n\n    const pattern = `*:${userId}:*`;\n    const keys = await this.redis.keys(pattern);\n\n    if (keys.length > 0) {\n      await this.redis.del(...keys);\n      logger.info('All tokens revoked', {\n        component: 'TokenService',\n        userId,\n        count: keys.length,\n      });\n    }\n  }\n\n  /**\n   * 撤销单个令牌\n   */\n  async revokeToken(token: string, userId: string): Promise<void> {\n    await this.ensureRedisConnected();\n\n    const tokenKey = `access:${userId}:${this.hashToken(token)}`;\n    await this.redis.del(tokenKey);\n    logger.info('Token revoked', { component: 'TokenService', userId });\n  }\n\n  /**\n   * 获取活跃令牌列表\n   */\n  async getActiveTokens(userId: string): Promise<TokenMetadata[]> {\n    await this.ensureRedisConnected();\n\n    const pattern = `access:${userId}:*`;\n    const keys = await this.redis.keys(pattern);\n\n    const tokens: TokenMetadata[] = [];\n    for (const key of keys) {\n      const data = await this.redis.get(key);\n      if (data) {\n        tokens.push(JSON.parse(data) as TokenMetadata);\n      }\n    }\n\n    return tokens;\n  }\n\n  /**\n   * 辅助方法 - Token 散列\n   */\n  private hashToken(token: string): string {\n    return crypto.createHash('sha256').update(token).digest('hex');\n  }\n\n  /**\n   * 辅助方法 - 生成随机 Token\n   */\n  private generateRandomToken(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  /**\n   * 辅助方法 - 生成 JWT Secret\n   */\n  private generateSecret(): string {\n    const secret = crypto.randomBytes(64).toString('hex');\n    logger.warn('Using generated JWT secret. Set JWT_SECRET in production!', {\n      component: 'TokenService',\n    });\n    return secret;\n  }\n\n  /**\n   * 辅助方法 - 更新最后访问时间\n   */\n  private async updateLastAccessed(tokenKey: string): Promise<void> {\n    const data = await this.redis.get(tokenKey);\n    if (data) {\n      const metadata: TokenMetadata = JSON.parse(data);\n      metadata.lastAccessedAt = Math.floor(Date.now() / 1000);\n      const ttl = await this.redis.ttl(tokenKey);\n      if (ttl > 0) {\n        await this.redis.setex(tokenKey, ttl, JSON.stringify(metadata));\n      }\n    }\n  }\n\n  /**\n   * 辅助方法 - 从数据库获取用户信息\n   */\n  private async getUserInfo(\n    userId: string,\n  ): Promise<{ username: string; role: 'admin' | 'user' } | null> {\n    try {\n      const result = await this.pool.query(\n        'SELECT username, role FROM users WHERE id = $1',\n        [userId],\n      );\n\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const user = result.rows[0];\n      return {\n        username: user.username as string,\n        role: user.role as 'admin' | 'user',\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'TokenService',\n        operation: 'getUserInfo',\n      });\n      logger.error('Failed to fetch user info from database', {\n        component: 'TokenService',\n        userId,\n        error: error.toLogObject(),\n      });\n      return null;\n    }\n  }\n\n  /**\n   * 清理过期令牌(定时任务)\n   */\n  async cleanupExpiredTokens(): Promise<number> {\n    await this.ensureRedisConnected();\n\n    const pattern = '*:*:*';\n    const keys = await this.redis.keys(pattern);\n\n    let cleaned = 0;\n    for (const key of keys) {\n      const ttl = await this.redis.ttl(key);\n      if (ttl < 0) {\n        await this.redis.del(key);\n        cleaned++;\n      }\n    }\n\n    if (cleaned > 0) {\n      logger.info('Cleaned up expired tokens', { component: 'TokenService', count: cleaned });\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * 关闭连接\n   */\n  async close(): Promise<void> {\n    await this.redis.quit();\n    logger.info('TokenService Redis connection closed', { component: 'TokenService' });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/authInstance.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[597,649],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[733,784],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 认证服务实例配置\n *\n * 渐进式迁移策略:\n * - 通过环境变量USE_AUTH_V2控制使用新旧服务\n * - 默认使用V2（新服务）\n * - 可回退到V1（旧服务）\n */\n\nimport { AuthService } from '@/services/AuthService';\nimport { getAuthService as getAuthServiceV2 } from '@/services/AuthServiceV2';\nimport { EnvManager } from '@/config/EnvManager';\nimport logger from '@/utils/logger';\n\n// 检查是否使用V2服务\nconst envManager = EnvManager.getInstance();\nconst useAuthV2 = envManager.getBoolean('USE_AUTH_V2', true); // 默认启用V2\n\nif (useAuthV2) {\n  logger.info('✅ 使用AuthServiceV2（增强版认证服务）');\n} else {\n  logger.warn('⚠️  使用AuthService（旧版认证服务），建议迁移到V2');\n}\n\n// 导出统一接口（兼容旧代码）\nconsole.log('[AUTH_INSTANCE] 开始创建authService实例...');\nexport const authService = useAuthV2\n  ? getAuthServiceV2()\n  : new AuthService();\nconsole.log('[AUTH_INSTANCE] ✓ authService实例创建成功');\n\n// 导出类型（用于Controller）\nexport const isAuthV2 = useAuthV2;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/services/initQueueService.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async function 'initQueueService' has no 'await' expression.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":11,"endColumn":39},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async function 'shutdownQueueService' has no 'await' expression.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":29,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 简化的队列服务初始化\n */\n\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\n/**\n * 初始化队列服务\n */\nexport async function initQueueService(): Promise<void> {\n  try {\n    logger.info('🚀 初始化队列服务...');\n    logger.info('⏭️ 简化模式：跳过复杂队列服务初始化');\n    logger.info('✅ 队列服务初始化完成（简化模式）');\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'initQueueService',\n      operation: 'initQueueService',\n    });\n    logger.error('❌ 队列服务初始化失败:', error.toLogObject());\n    logger.info('📝 提示: 队列服务对核心功能不是必需的，应用可以正常运行');\n  }\n}\n\n/**\n * 关闭队列服务\n */\nexport async function shutdownQueueService(): Promise<void> {\n  try {\n    logger.info('🔄 正在关闭队列服务...');\n    logger.info('⏭️ 简化模式：跳过复杂队列服务关闭');\n    logger.info('✅ 队列服务已关闭');\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'initQueueService',\n      operation: 'shutdownQueueService',\n    });\n    logger.error('❌ 队列服务关闭失败:', error.toLogObject());\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/types/dynamic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/types/errors.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":52,"column":69,"nodeType":"Literal","messageId":"noMagic","endLine":52,"endColumn":70},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":233,"column":15,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":233,"endColumn":17,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5003,5005],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":315,"column":18,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":315,"endColumn":20,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6764,6766],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":375,"column":13,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":375,"endColumn":15,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8038,8051],"text":"(url ?? method)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":375,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":375,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8052,8054],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":500,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":500,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10834,10860],"text":"(resourceType ?? resourceId)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":500,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":500,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10861,10863],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":558,"column":14,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":558,"endColumn":16,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[12142,12144],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"complexity","severity":1,"message":"Function 'createErrorFromUnknown' has a complexity of 57. Maximum allowed is 20.","line":962,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":1214,"endColumn":2},{"ruleId":"max-len","severity":1,"message":"This line has a length of 161. Maximum allowed is 100.","line":1024,"column":1,"nodeType":"Program","messageId":"max","endLine":1024,"endColumn":162},{"ruleId":"max-len","severity":1,"message":"This line has a length of 138. Maximum allowed is 100.","line":1062,"column":1,"nodeType":"Program","messageId":"max","endLine":1062,"endColumn":139},{"ruleId":"max-len","severity":1,"message":"This line has a length of 108. Maximum allowed is 100.","line":1091,"column":1,"nodeType":"Program","messageId":"max","endLine":1091,"endColumn":109},{"ruleId":"max-len","severity":1,"message":"This line has a length of 146. Maximum allowed is 100.","line":1128,"column":1,"nodeType":"Program","messageId":"max","endLine":1128,"endColumn":147},{"ruleId":"max-len","severity":1,"message":"This line has a length of 183. Maximum allowed is 100.","line":1168,"column":1,"nodeType":"Program","messageId":"max","endLine":1168,"endColumn":184},{"ruleId":"max-len","severity":1,"message":"This line has a length of 158. Maximum allowed is 100.","line":1208,"column":1,"nodeType":"Program","messageId":"max","endLine":1208,"endColumn":159},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1219,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1219,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28531,28534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28531,28534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 统一的错误处理类型系统\n *\n * 这个文件定义了项目中所有错误处理相关的类型，包括：\n * - 错误基类和具体错误类型\n * - 错误处理结果类型\n * - 安全的类型转换工具\n * - 错误边界处理\n */\n\nimport type { JsonValue } from './dynamic';\n\n// ============================================================================\n// 错误基类和具体错误类型\n// ============================================================================\n\n/**\n * 基础错误类，所有自定义错误都应该继承此类\n */\nexport abstract class BaseError extends Error {\n  public readonly id: string;\n  public readonly code: string;\n  public readonly category: ErrorCategory;\n  public readonly severity: ErrorSeverity;\n  public readonly context?: JsonValue;\n  public readonly timestamp: string;\n  public readonly userId?: string;\n  public readonly requestId?: string;\n\n  constructor({\n    message,\n    code,\n    category,\n    severity = 'medium',\n    context,\n    userId,\n    requestId,\n    cause: _cause,\n  }: {\n    message: string;\n    code: string;\n    category: ErrorCategory;\n    severity?: ErrorSeverity;\n    context?: JsonValue;\n    userId?: string;\n    requestId?: string;\n    cause?: Error;\n  }) {\n    super(message);\n\n    // 生成唯一错误ID\n    this.id = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    this.name = this.constructor.name;\n    this.code = code;\n    this.category = category;\n    this.severity = severity;\n    if (context !== undefined) {\n      this.context = context;\n    }\n    this.timestamp = new Date().toISOString();\n    if (userId !== undefined) {\n      this.userId = userId;\n    }\n    if (requestId !== undefined) {\n      this.requestId = requestId;\n    }\n\n    // 确保错误堆栈正确显示\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  /**\n   * 转换为API错误响应格式\n   */\n  toApiError(): ApiError {\n    const result: ApiError = {\n      code: this.code,\n      message: this.message,\n      category: this.category,\n      severity: this.severity,\n      timestamp: this.timestamp,\n    };\n\n    if (this.context !== undefined) {\n      result.details = this.context;\n    }\n    if (this.userId !== undefined) {\n      result.userId = this.userId;\n    }\n    if (this.requestId !== undefined) {\n      result.requestId = this.requestId;\n    }\n\n    return result;\n  }\n\n  /**\n   * 获取用户友好的错误消息\n   */\n  getUserMessage(): string {\n    // 根据错误严重性和类别返回用户友好的消息\n    if (this.severity === 'critical') {\n      return '系统遇到严重错误，请稍后重试';\n    }\n\n    switch (this.category) {\n      case 'validation':\n        return '输入数据不正确，请检查后重试';\n      case 'authentication':\n        return '身份验证失败，请重新登录';\n      case 'authorization':\n        return '权限不足，无法执行此操作';\n      case 'network':\n        return '网络连接失败，请检查网络后重试';\n      case 'external_service':\n        return '外部服务暂时不可用，请稍后重试';\n      case 'resource':\n        return '资源不足或不存在，请稍后重试';\n      case 'business_logic':\n        return '操作无法完成，请检查输入条件';\n      case 'system':\n        return '系统内部错误，请稍后重试';\n      default:\n        return '发生未知错误，请稍后重试';\n    }\n  }\n\n  /**\n   * 序列化错误对象（用于日志记录）\n   */\n  toLogObject(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      category: this.category,\n      severity: this.severity,\n      stack: this.stack,\n      context: this.context,\n      timestamp: this.timestamp,\n      userId: this.userId,\n      requestId: this.requestId,\n    };\n  }\n}\n\n/**\n * 错误类别枚举\n */\nexport type ErrorCategory =\n  | 'validation'       // 验证错误\n  | 'authentication'   // 身份验证错误\n  | 'authorization'    // 权限错误\n  | 'network'          // 网络错误\n  | 'external_service' // 外部服务错误\n  | 'resource'         // 资源错误\n  | 'business_logic'   // 业务逻辑错误\n  | 'system';          // 系统错误\n\n/**\n * 错误严重性级别\n */\nexport type ErrorSeverity = 'low' | 'medium' | 'high' | 'critical';\n\n/**\n * API错误响应接口\n */\nexport interface ApiError {\n  code: string;\n  message: string;\n  category?: ErrorCategory;\n  severity?: ErrorSeverity;\n  details?: JsonValue;\n  timestamp: string;\n  userId?: string;\n  requestId?: string;\n}\n\n// ============================================================================\n// 具体错误类定义\n// ============================================================================\n\n/**\n * 验证错误\n */\nexport class ValidationError extends BaseError {\n  constructor({\n    message,\n    code = 'VALIDATION_ERROR',\n    field,\n    value,\n    context,\n    severity = 'low',\n    userId,\n    requestId,\n  }: {\n    message: string;\n    code?: string;\n    field?: string;\n    value?: unknown;\n    context?: JsonValue;\n    severity?: ErrorSeverity;\n    userId?: string;\n    requestId?: string;\n  }) {\n    const superParams: {\n      message: string;\n      code: string;\n      category: ErrorCategory;\n      severity?: ErrorSeverity;\n      context?: JsonValue;\n      userId?: string;\n      requestId?: string;\n    } = {\n      message,\n      code,\n      category: 'validation',\n    };\n\n    if (severity !== undefined) {\n      superParams.severity = severity;\n    }\n    if (userId !== undefined) {\n      superParams.userId = userId;\n    }\n    if (requestId !== undefined) {\n      superParams.requestId = requestId;\n    }\n\n    if (field || value) {\n      const baseContext = context && typeof context === 'object' && !Array.isArray(context) ? context : {};\n      superParams.context = { field, value, ...baseContext } as JsonValue;\n    } else if (context) {\n      superParams.context = context;\n    }\n\n    super(superParams);\n  }\n}\n\n/**\n * 身份验证错误\n */\nexport class AuthenticationError extends BaseError {\n  constructor({\n    message = '身份验证失败',\n    code = 'AUTHENTICATION_ERROR',\n    severity = 'medium',\n    ...baseOptions\n  }: {\n    message?: string;\n    code?: string;\n    severity?: ErrorSeverity;\n  } & Omit<ConstructorParameters<typeof BaseError>[0], 'message' | 'code' | 'category' | 'severity'>) {\n    super({\n      message,\n      code,\n      category: 'authentication',\n      severity,\n      ...baseOptions,\n    });\n  }\n}\n\n/**\n * 权限错误\n */\nexport class AuthorizationError extends BaseError {\n  constructor({\n    message = '权限不足',\n    code = 'AUTHORIZATION_ERROR',\n    resource,\n    action,\n    context,\n    severity = 'medium',\n    userId,\n    requestId,\n  }: {\n    message?: string;\n    code?: string;\n    resource?: string;\n    action?: string;\n    context?: JsonValue;\n    severity?: ErrorSeverity;\n    userId?: string;\n    requestId?: string;\n  }) {\n    const superParams: {\n      message: string;\n      code: string;\n      category: ErrorCategory;\n      severity?: ErrorSeverity;\n      context?: JsonValue;\n      userId?: string;\n      requestId?: string;\n    } = {\n      message,\n      code,\n      category: 'authorization',\n    };\n\n    if (severity !== undefined) {\n      superParams.severity = severity;\n    }\n    if (userId !== undefined) {\n      superParams.userId = userId;\n    }\n    if (requestId !== undefined) {\n      superParams.requestId = requestId;\n    }\n\n    if (resource || action) {\n      const baseContext = context && typeof context === 'object' && !Array.isArray(context) ? context : {};\n      superParams.context = { resource, action, ...baseContext } as JsonValue;\n    } else if (context) {\n      superParams.context = context;\n    }\n\n    super(superParams);\n  }\n}\n\n/**\n * 网络错误\n */\nexport class NetworkError extends BaseError {\n  constructor({\n    message = '网络连接失败',\n    code = 'NETWORK_ERROR',\n    url,\n    method,\n    statusCode,\n    context,\n    severity = 'medium',\n    userId,\n    requestId,\n  }: {\n    message?: string;\n    code?: string;\n    url?: string;\n    method?: string;\n    statusCode?: number;\n    context?: JsonValue;\n    severity?: ErrorSeverity;\n    userId?: string;\n    requestId?: string;\n  }) {\n    const superParams: {\n      message: string;\n      code: string;\n      category: ErrorCategory;\n      severity?: ErrorSeverity;\n      context?: JsonValue;\n      userId?: string;\n      requestId?: string;\n    } = {\n      message,\n      code,\n      category: 'network',\n    };\n\n    if (severity !== undefined) {\n      superParams.severity = severity;\n    }\n    if (userId !== undefined) {\n      superParams.userId = userId;\n    }\n    if (requestId !== undefined) {\n      superParams.requestId = requestId;\n    }\n\n    if (url || method || statusCode) {\n      const baseContext = context && typeof context === 'object' && !Array.isArray(context) ? context : {};\n      superParams.context = { url, method, statusCode, ...baseContext } as JsonValue;\n    } else if (context) {\n      superParams.context = context;\n    }\n\n    super(superParams);\n  }\n}\n\n/**\n * 外部服务错误\n */\nexport class ExternalServiceError extends BaseError {\n  constructor({\n    message = '外部服务错误',\n    code = 'EXTERNAL_SERVICE_ERROR',\n    service,\n    endpoint,\n    originalError,\n    context,\n    severity = 'high',\n    userId,\n    requestId,\n  }: {\n    message?: string;\n    code?: string;\n    service?: string;\n    endpoint?: string;\n    originalError?: unknown;\n    context?: JsonValue;\n    severity?: ErrorSeverity;\n    userId?: string;\n    requestId?: string;\n  }) {\n    const superParams: {\n      message: string;\n      code: string;\n      category: ErrorCategory;\n      severity?: ErrorSeverity;\n      context?: JsonValue;\n      userId?: string;\n      requestId?: string;\n    } = {\n      message,\n      code,\n      category: 'external_service',\n    };\n\n    if (severity !== undefined) {\n      superParams.severity = severity;\n    }\n    if (userId !== undefined) {\n      superParams.userId = userId;\n    }\n    if (requestId !== undefined) {\n      superParams.requestId = requestId;\n    }\n\n    const baseContext = context && typeof context === 'object' && !Array.isArray(context) ? context : {};\n    superParams.context = {\n      service,\n      endpoint,\n      originalError: originalError instanceof Error ? {\n        message: originalError.message,\n        name: originalError.name,\n        ...(originalError.stack && { stack: originalError.stack }),\n      } : originalError,\n      ...baseContext,\n    } as JsonValue;\n\n    super(superParams);\n  }\n}\n\n/**\n * 资源错误\n */\nexport class ResourceError extends BaseError {\n  constructor({\n    message = '资源错误',\n    code = 'RESOURCE_ERROR',\n    resourceType,\n    resourceId,\n    operation,\n    context,\n    severity = 'medium',\n    userId,\n    requestId,\n  }: {\n    message?: string;\n    code?: string;\n    resourceType?: string;\n    resourceId?: string;\n    operation?: string;\n    context?: JsonValue;\n    severity?: ErrorSeverity;\n    userId?: string;\n    requestId?: string;\n  }) {\n    const superParams: {\n      message: string;\n      code: string;\n      category: ErrorCategory;\n      severity?: ErrorSeverity;\n      context?: JsonValue;\n      userId?: string;\n      requestId?: string;\n    } = {\n      message,\n      code,\n      category: 'resource',\n    };\n\n    if (severity !== undefined) {\n      superParams.severity = severity;\n    }\n    if (userId !== undefined) {\n      superParams.userId = userId;\n    }\n    if (requestId !== undefined) {\n      superParams.requestId = requestId;\n    }\n\n    if (resourceType || resourceId || operation) {\n      const baseContext = context && typeof context === 'object' && !Array.isArray(context) ? context : {};\n      superParams.context = { resourceType, resourceId, operation, ...baseContext } as JsonValue;\n    } else if (context) {\n      superParams.context = context;\n    }\n\n    super(superParams);\n  }\n}\n\n/**\n * 业务逻辑错误\n */\nexport class BusinessLogicError extends BaseError {\n  constructor({\n    message = '业务逻辑错误',\n    code = 'BUSINESS_LOGIC_ERROR',\n    rule,\n    data,\n    context,\n    severity = 'medium',\n    userId,\n    requestId,\n  }: {\n    message?: string;\n    code?: string;\n    rule?: string;\n    data?: unknown;\n    context?: JsonValue;\n    severity?: ErrorSeverity;\n    userId?: string;\n    requestId?: string;\n  }) {\n    const superParams: {\n      message: string;\n      code: string;\n      category: ErrorCategory;\n      severity?: ErrorSeverity;\n      context?: JsonValue;\n      userId?: string;\n      requestId?: string;\n    } = {\n      message,\n      code,\n      category: 'business_logic',\n    };\n\n    if (severity !== undefined) {\n      superParams.severity = severity;\n    }\n    if (userId !== undefined) {\n      superParams.userId = userId;\n    }\n    if (requestId !== undefined) {\n      superParams.requestId = requestId;\n    }\n\n    if (rule || data) {\n      const baseContext = context && typeof context === 'object' && !Array.isArray(context) ? context : {};\n      superParams.context = { rule, data, ...baseContext } as JsonValue;\n    } else if (context) {\n      superParams.context = context;\n    }\n\n    super(superParams);\n  }\n}\n\n/**\n * 系统错误\n */\nexport class SystemError extends BaseError {\n  constructor({\n    message = '系统内部错误',\n    code = 'SYSTEM_ERROR',\n    component,\n    operation,\n    originalError,\n    context,\n    severity = 'high',\n    userId,\n    requestId,\n  }: {\n    message?: string;\n    code?: string;\n    component?: string;\n    operation?: string;\n    originalError?: unknown;\n    context?: JsonValue;\n    severity?: ErrorSeverity;\n    userId?: string;\n    requestId?: string;\n  }) {\n    const superParams: {\n      message: string;\n      code: string;\n      category: ErrorCategory;\n      severity?: ErrorSeverity;\n      context?: JsonValue;\n      userId?: string;\n      requestId?: string;\n    } = {\n      message,\n      code,\n      category: 'system',\n    };\n\n    if (severity !== undefined) {\n      superParams.severity = severity;\n    }\n    if (userId !== undefined) {\n      superParams.userId = userId;\n    }\n    if (requestId !== undefined) {\n      superParams.requestId = requestId;\n    }\n\n    const baseContext = context && typeof context === 'object' && !Array.isArray(context) ? context : {};\n    superParams.context = {\n      component,\n      operation,\n      originalError: originalError instanceof Error ? {\n        message: originalError.message,\n        name: originalError.name,\n        ...(originalError.stack && { stack: originalError.stack }),\n      } : originalError,\n      ...baseContext,\n    } as JsonValue;\n\n    super(superParams);\n  }\n}\n\n// ============================================================================\n// 错误处理结果类型\n// ============================================================================\n\n/**\n * 结果类型，用于安全地处理可能失败的操作\n */\nexport type Result<T, E extends BaseError = BaseError> =\n  | { success: true; data: T }\n  | { success: false; error: E };\n\n/**\n * 创建成功结果\n */\nexport function createSuccess<T>(data: T): Result<T> {\n  return { success: true, data };\n}\n\n/**\n * 创建失败结果\n */\nexport function createFailure<E extends BaseError>(error: E): Result<never, E> {\n  return { success: false, error };\n}\n\n/**\n * 安全地执行可能抛出错误的函数\n */\nexport function safeExecute<T, E extends BaseError = BaseError>(\n  fn: () => T,\n  errorFactory?: (error: unknown) => E,\n): Result<T, E> {\n  try {\n    const data = fn();\n    return createSuccess(data) as Result<T, E>;\n  } catch (unknownError) {\n    if (errorFactory) {\n      return createFailure(errorFactory(unknownError));\n    }\n\n    if (unknownError instanceof BaseError) {\n      return createFailure(unknownError as E);\n    }\n\n    return createFailure(\n      new SystemError({\n        message: '未知错误',\n        originalError: unknownError,\n      }) as E,\n    );\n  }\n}\n\n/**\n * 安全地执行异步函数\n */\nexport async function safeExecuteAsync<T, E extends BaseError = BaseError>(\n  fn: () => Promise<T>,\n  errorFactory?: (error: unknown) => E,\n): Promise<Result<T, E>> {\n  try {\n    const data = await fn();\n    return createSuccess(data) as Result<T, E>;\n  } catch (unknownError) {\n    if (errorFactory) {\n      return createFailure(errorFactory(unknownError));\n    }\n\n    if (unknownError instanceof BaseError) {\n      return createFailure(unknownError as E);\n    }\n\n    return createFailure(\n      new SystemError({\n        message: '未知错误',\n        originalError: unknownError,\n      }) as E,\n    );\n  }\n}\n\n// ============================================================================\n// 安全的类型转换工具\n// ============================================================================\n\n/**\n * 安全的类型守卫工具\n */\nexport class TypeGuard {\n  /**\n   * 检查是否为字符串\n   */\n  static isString(value: unknown): value is string {\n    return typeof value === 'string';\n  }\n\n  /**\n   * 检查是否为数字\n   */\n  static isNumber(value: unknown): value is number {\n    return typeof value === 'number' && !isNaN(value);\n  }\n\n  /**\n   * 检查是否为布尔值\n   */\n  static isBoolean(value: unknown): value is boolean {\n    return typeof value === 'boolean';\n  }\n\n  /**\n   * 检查是否为对象（非null）\n   */\n  static isObject(value: unknown): value is Record<string, unknown> {\n    return typeof value === 'object' && value !== null && !Array.isArray(value);\n  }\n\n  /**\n   * 检查是否为数组\n   */\n  static isArray<T>(value: unknown, guard?: (item: unknown) => item is T): value is T[] {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n    if (!guard) {\n      return true;\n    }\n    return value.every(guard);\n  }\n\n  /**\n   * 检查是否为函数\n   */\n  static isFunction<TReturn = unknown>(value: unknown): value is (...args: unknown[]) => TReturn {\n    return typeof value === 'function';\n  }\n\n  /**\n   * 检查是否为null或undefined\n   */\n  static isNullOrUndefined(value: unknown): value is null | undefined {\n    return value === null || value === undefined;\n  }\n\n  /**\n   * 检查是否为有效的日期\n   */\n  static isValidDate(value: unknown): value is Date {\n    return value instanceof Date && !isNaN(value.getTime());\n  }\n\n  /**\n   * 检查是否为有效的ISO日期字符串\n   */\n  static isISODateString(value: unknown): value is string {\n    if (!this.isString(value)) {\n      return false;\n    }\n    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z?$/;\n    return isoRegex.test(value) && !isNaN(Date.parse(value));\n  }\n\n  /**\n   * 检查是否为Email格式\n   */\n  static isEmail(value: unknown): value is string {\n    if (!this.isString(value)) {\n      return false;\n    }\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(value);\n  }\n\n  /**\n   * 检查是否为URL格式\n   */\n  static isURL(value: unknown): value is string {\n    if (!this.isString(value)) {\n      return false;\n    }\n    try {\n      new URL(value);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 检查对象是否具有指定的属性\n   */\n  static hasProperty<K extends string | number | symbol>(\n    obj: unknown,\n    key: K,\n  ): obj is Record<K, unknown> {\n    return this.isObject(obj) && key in obj;\n  }\n\n  /**\n   * 检查对象是否具有所有指定的属性\n   */\n  static hasProperties<T extends Record<string, unknown>>(\n    obj: unknown,\n    keys: (keyof T)[],\n  ): obj is T {\n    if (!this.isObject(obj)) {\n      return false;\n    }\n    return keys.every(key => key in obj);\n  }\n}\n\n/**\n * 安全的类型转换工具\n */\nexport class SafeCast {\n  /**\n   * 安全转换为字符串\n   */\n  static toString(value: unknown, defaultValue = ''): string {\n    if (TypeGuard.isString(value)) {\n      return value;\n    }\n    if (TypeGuard.isNumber(value) || TypeGuard.isBoolean(value)) {\n      return String(value);\n    }\n    return defaultValue;\n  }\n\n  /**\n   * 安全转换为数字\n   */\n  static toNumber(value: unknown, defaultValue = 0): number {\n    if (TypeGuard.isNumber(value)) {\n      return value;\n    }\n    if (TypeGuard.isString(value)) {\n      const parsed = Number(value);\n      return !isNaN(parsed) ? parsed : defaultValue;\n    }\n    return defaultValue;\n  }\n\n  /**\n   * 安全转换为布尔值\n   */\n  static toBoolean(value: unknown, defaultValue = false): boolean {\n    if (TypeGuard.isBoolean(value)) {\n      return value;\n    }\n    if (TypeGuard.isString(value)) {\n      return value.toLowerCase() === 'true';\n    }\n    if (TypeGuard.isNumber(value)) {\n      return value !== 0;\n    }\n    return defaultValue;\n  }\n\n  /**\n   * 安全转换为日期\n   */\n  static toDate(value: unknown, defaultValue: Date = new Date()): Date {\n    if (TypeGuard.isValidDate(value)) {\n      return value;\n    }\n    if (TypeGuard.isISODateString(value)) {\n      return new Date(value);\n    }\n    if (TypeGuard.isNumber(value)) {\n      return new Date(value);\n    }\n    return defaultValue;\n  }\n\n  /**\n   * 安全转换为对象\n   */\n  static toObject<T extends Record<string, unknown>>(\n    value: unknown,\n    defaultValue: T = {} as T,\n  ): T {\n    if (TypeGuard.isObject(value)) {\n      return value as T;\n    }\n    return defaultValue;\n  }\n\n  /**\n   * 安全转换为数组\n   */\n  static toArray<T>(\n    value: unknown,\n    guard?: (item: unknown) => item is T,\n    defaultValue: T[] = [],\n  ): T[] {\n    if (TypeGuard.isArray(value, guard)) {\n      return value;\n    }\n    return defaultValue;\n  }\n\n  /**\n   * 安全地从对象中获取属性值\n   */\n  static getProperty<T>(\n    obj: unknown,\n    key: string,\n    guard: (value: unknown) => value is T,\n    defaultValue: T,\n  ): T {\n    if (TypeGuard.hasProperty(obj, key)) {\n      const value = obj[key];\n      if (guard(value)) {\n        return value;\n      }\n    }\n    return defaultValue;\n  }\n}\n\n// ============================================================================\n// 错误处理工具函数\n// ============================================================================\n\n/**\n * 错误处理工厂，根据未知错误创建适当的错误类型\n */\nexport function createErrorFromUnknown(error: unknown, context?: {\n  userId?: string;\n  requestId?: string;\n  component?: string;\n  url?: string;\n  method?: string;\n  statusCode?: number;\n  field?: string;\n  value?: unknown;\n  resource?: string;\n  action?: string;\n  operation?: string;\n  severity?: ErrorSeverity;\n  // 额外的上下文属性，用于控制器和中间件\n  agentId?: string;\n  sessionId?: string;\n  originalError?: string;\n  stack?: string;\n  [key: string]: unknown; // 允许其他自定义属性\n}): BaseError {\n  if (error instanceof BaseError) {\n    return error;\n  }\n\n  if (error instanceof Error) {\n    // 根据错误消息判断错误类型\n    const message = error.message.toLowerCase();\n\n    if (message.includes('network') || message.includes('timeout') || message.includes('fetch')) {\n      const networkParams: {\n        message?: string;\n        code?: string;\n        url?: string;\n        method?: string;\n        statusCode?: number;\n        context?: JsonValue;\n        severity?: ErrorSeverity;\n        userId?: string;\n        requestId?: string;\n      } = {\n        message: error.message,\n      };\n\n      if (context?.url !== undefined) {\n        networkParams.url = context.url;\n      }\n      if (context?.method !== undefined) {\n        networkParams.method = context.method;\n      }\n      if (context?.statusCode !== undefined) {\n        networkParams.statusCode = context.statusCode;\n      }\n      if (context?.severity !== undefined) {\n        networkParams.severity = context.severity;\n      }\n      if (context?.userId !== undefined) {\n        networkParams.userId = context.userId;\n      }\n      if (context?.requestId !== undefined) {\n        networkParams.requestId = context.requestId;\n      }\n\n      const { url: _url, method: _method, statusCode: _statusCode, severity: _severity, userId: _userId, requestId: _requestId, ...restContext } = context ?? {};\n      if (Object.keys(restContext ?? {}).length > 0) {\n        networkParams.context = restContext as JsonValue;\n      }\n\n      return new NetworkError(networkParams);\n    }\n\n    if (message.includes('validation') || message.includes('invalid')) {\n      const validationParams: {\n        message: string;\n        code?: string;\n        field?: string;\n        value?: unknown;\n        context?: JsonValue;\n        severity?: ErrorSeverity;\n        userId?: string;\n        requestId?: string;\n      } = {\n        message: error.message,\n      };\n\n      if (context?.field !== undefined) {\n        validationParams.field = context.field;\n      }\n      if (context?.value !== undefined) {\n        validationParams.value = context.value;\n      }\n      if (context?.severity !== undefined) {\n        validationParams.severity = context.severity;\n      }\n      if (context?.userId !== undefined) {\n        validationParams.userId = context.userId;\n      }\n      if (context?.requestId !== undefined) {\n        validationParams.requestId = context.requestId;\n      }\n\n      const { field: _field, value: _value, severity: _severity, userId: _userId, requestId: _requestId, ...restContext } = context ?? {};\n      if (Object.keys(restContext ?? {}).length > 0) {\n        validationParams.context = restContext as JsonValue;\n      }\n\n      return new ValidationError(validationParams);\n    }\n\n    if (message.includes('unauthorized') || message.includes('auth')) {\n      const authParams: {\n        message: string;\n        code?: string;\n        severity?: ErrorSeverity;\n        userId?: string;\n        requestId?: string;\n      } & Omit<ConstructorParameters<typeof AuthenticationError>[0], 'message' | 'code' | 'category' | 'severity'> = {\n        message: error.message,\n      };\n\n      if (context?.severity !== undefined) {\n        authParams.severity = context.severity;\n      }\n      if (context?.userId !== undefined) {\n        authParams.userId = context.userId;\n      }\n      if (context?.requestId !== undefined) {\n        authParams.requestId = context.requestId;\n      }\n\n      const { severity: _severity, userId: _userId, requestId: _requestId, ...restContext } = context ?? {};\n      return new AuthenticationError({\n        ...authParams,\n        ...restContext,\n      });\n    }\n\n    if (message.includes('forbidden') || message.includes('permission')) {\n      const authzParams: {\n        message?: string;\n        code?: string;\n        resource?: string;\n        action?: string;\n        context?: JsonValue;\n        severity?: ErrorSeverity;\n        userId?: string;\n        requestId?: string;\n      } = {\n        message: error.message,\n      };\n\n      if (context?.resource !== undefined) {\n        authzParams.resource = context.resource;\n      }\n      if (context?.action !== undefined) {\n        authzParams.action = context.action;\n      }\n      if (context?.severity !== undefined) {\n        authzParams.severity = context.severity;\n      }\n      if (context?.userId !== undefined) {\n        authzParams.userId = context.userId;\n      }\n      if (context?.requestId !== undefined) {\n        authzParams.requestId = context.requestId;\n      }\n\n      const { resource: _resource, action: _action, severity: _severity, userId: _userId, requestId: _requestId, ...restContext } = context ?? {};\n      if (Object.keys(restContext ?? {}).length > 0) {\n        authzParams.context = restContext as JsonValue;\n      }\n\n      return new AuthorizationError(authzParams);\n    }\n\n    // 默认为系统错误\n    const systemParams: {\n      message?: string;\n      code?: string;\n      component?: string;\n      operation?: string;\n      originalError?: unknown;\n      context?: JsonValue;\n      severity?: ErrorSeverity;\n      userId?: string;\n      requestId?: string;\n    } = {\n      message: error.message,\n      originalError: error,\n    };\n\n    if (context?.component !== undefined) {\n      systemParams.component = context.component;\n    }\n    if (context?.operation !== undefined) {\n      systemParams.operation = context.operation;\n    }\n    if (context?.severity !== undefined) {\n      systemParams.severity = context.severity;\n    }\n    if (context?.userId !== undefined) {\n      systemParams.userId = context.userId;\n    }\n    if (context?.requestId !== undefined) {\n      systemParams.requestId = context.requestId;\n    }\n\n    const { component: _component, operation: _operation, severity: _severity, userId: _userId, requestId: _requestId, originalError: _originalError, ...restContext } = context ?? {};\n    if (Object.keys(restContext ?? {}).length > 0) {\n      systemParams.context = restContext as JsonValue;\n    }\n\n    return new SystemError(systemParams);\n  }\n\n  // 非Error类型的未知错误\n  const unknownSystemParams: {\n    message?: string;\n    code?: string;\n    component?: string;\n    operation?: string;\n    originalError?: unknown;\n    context?: JsonValue;\n    severity?: ErrorSeverity;\n    userId?: string;\n    requestId?: string;\n  } = {\n    message: '未知错误',\n    originalError: error,\n  };\n\n  if (context?.component !== undefined) {\n    unknownSystemParams.component = context.component;\n  }\n  if (context?.operation !== undefined) {\n    unknownSystemParams.operation = context.operation;\n  }\n  if (context?.severity !== undefined) {\n    unknownSystemParams.severity = context.severity;\n  }\n  if (context?.userId !== undefined) {\n    unknownSystemParams.userId = context.userId;\n  }\n  if (context?.requestId !== undefined) {\n    unknownSystemParams.requestId = context.requestId;\n  }\n\n  const { component: _comp, operation: _oper, severity: _sev, userId: _uid, requestId: _rid, originalError: _origErr, ...restContextUnknown } = context ?? {};\n  if (Object.keys(restContextUnknown ?? {}).length > 0) {\n    unknownSystemParams.context = restContextUnknown as JsonValue;\n  }\n\n  return new SystemError(unknownSystemParams);\n}\n\n/**\n * 包装Express路由处理器的错误处理函数\n */\nexport function wrapAsyncHandler<T extends any[], R>(\n  handler: (...args: T) => Promise<R>,\n  options?: {\n    userId?: string;\n    requestId?: string;\n    component?: string;\n  },\n) {\n  return async (...args: T): Promise<R> => {\n    try {\n      return await handler(...args);\n    } catch (unknownError: unknown) {\n      const typedError = createErrorFromUnknown(unknownError, options);\n      throw typedError;\n    }\n  };\n}\n\n/**\n * 创建标准的错误响应\n */\nexport function createErrorResponse(error: BaseError): {\n  status: number;\n  body: ApiError;\n} {\n  const statusMap: Record<ErrorCategory, number> = {\n    validation: 400,\n    authentication: 401,\n    authorization: 403,\n    network: 503,\n    external_service: 502,\n    resource: 404,\n    business_logic: 422,\n    system: 500,\n  };\n\n  return {\n    status: statusMap[error.category] || 500,\n    body: error.toApiError(),\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/types/express.d.ts","messages":[{"ruleId":null,"fatal":false,"severity":1,"message":"File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override.","nodeType":null}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/types/geoip-lite.d.ts","messages":[{"ruleId":null,"fatal":false,"severity":1,"message":"File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override.","nodeType":null}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3004,3007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3004,3007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3051,3054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3051,3054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5119,5122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5119,5122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":275,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5486,5489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5486,5489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5769,5772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5769,5772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6036,6039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6036,6039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6287,6290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6287,6290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":326,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6510,6513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6510,6513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":353,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7031,7034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7031,7034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":434,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8466,8469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8466,8469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":435,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8485,8488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8485,8488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":441,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":441,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8641,8644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8641,8644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 使用shared-types中的JsonValue，避免循环依赖\nimport type { JsonValue, JsonObject } from '@llmchat/shared-types';\n\n// 重新导出 JsonValue 以便其他模块使用\nexport type { JsonValue, JsonObject };\nimport type { ErrorCategory, ErrorSeverity } from './errors';\n\n/**\n * API响应接口\n */\nexport interface ApiResponse<T = JsonValue> {\n  code: number;\n  message: string;\n  data: T;\n  success?: boolean;\n}\n\n/**\n * 智能体配置接口\n */\nexport interface AgentConfig {\n  id: string;\n  name: string;\n  description: string;\n  endpoint: string;\n  apiKey: string;\n  model: string;\n  appId?: string; // FastGPT 应用的真实 ObjectId（仅 provider=fastgpt 需要）\n  maxTokens?: number;\n  temperature?: number;\n  systemPrompt?: string;\n  capabilities: string[];\n  rateLimit?: {\n    requestsPerMinute: number;\n    tokensPerMinute: number;\n  };\n  provider: 'fastgpt' | 'openai' | 'anthropic' | 'dify' | 'dashscope' | 'custom';\n  type?: string;\n  isActive: boolean;\n  features: {\n    supportsChatId: boolean;\n    supportsStream: boolean;\n    supportsDetail: boolean;\n    supportsFiles: boolean;\n    supportsImages: boolean;\n    streamingConfig: {\n      enabled: boolean;\n      endpoint: 'same' | 'different';\n      statusEvents: boolean;\n      flowNodeStatus: boolean;\n    };\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * 智能体状态\n */\nexport type AgentStatus = 'active' | 'inactive' | 'error' | 'loading';\n\n/**\n * 简化的智能体信息（用于前端显示）\n */\nexport interface Agent {\n  id: string;\n  name: string;\n  description: string;\n  avatar?: string;\n  model: string;\n  status: AgentStatus;\n  capabilities: string[];\n  provider: string;\n}\n\n/**\n * 聊天消息接口\n */\nexport interface ChatMessage {\n  id?: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp?: number;\n  attachments?: ChatAttachmentMetadata[];\n  voiceNote?: VoiceNoteMetadata | null;\n  metadata?: {\n    model?: string;\n    tokens?: number;\n    provider?: string;\n    attachments?: ChatAttachmentMetadata[];\n    voiceNote?: VoiceNoteMetadata | null;\n  };\n}\n\n/**\n * 聊天选项\n */\nexport interface ChatOptions {\n  stream?: boolean;\n  chatId?: string;\n  detail?: boolean;\n  temperature?: number;\n  maxTokens?: number;\n  noCache?: boolean;                 // 禁用缓存\n  // FastGPT 特有参数\n  variables?: Record<string, JsonValue>; // 模块变量，会替换模块中输入框内容里的 [key]\n  responseChatItemId?: string;     // 响应消息的 ID，FastGPT 会自动将该 ID 存入数据库\n  attachments?: ChatAttachmentMetadata[];\n  voiceNote?: VoiceNoteMetadata | null;\n  // Dify 特有参数\n  userId?: string;                 // 用户标识，用于区分不同用户\n  files?: Array<{                  // 文件列表\n    type?: string;\n    transfer_method?: string;\n    url: string;\n  }>;\n}\n\n/**\n * 聊天响应\n */\nexport interface ChatResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    message: ChatMessage;\n    finish_reason: string;\n  }>;\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n  // Provider 特有元数据\n  metadata?: {\n    conversation_id?: string;        // Dify: 会话 ID\n    retriever_resources?: any[];     // Dify: 知识库检索结果\n    [key: string]: any;              // 其他 Provider 特有字段\n  };\n}\n\n/**\n * 流式响应状态\n */\nexport interface StreamStatus {\n  type: 'flowNodeStatus' | 'progress' | 'error' | 'complete';\n  status: 'running' | 'completed' | 'error';\n  moduleName?: string;\n  progress?: number;\n  error?: string;\n}\n\n/**\n * 聊天请求\n */\nexport interface ChatRequest {\n  agentId: string;\n  messages: ChatMessage[];\n  stream?: boolean;\n  options?: ChatOptions;\n  chatId?: string;\n  detail?: boolean;\n  temperature?: number;\n  maxTokens?: number;\n  variables?: Record<string, JsonValue>;\n  responseChatItemId?: string;\n  attachments?: ChatAttachmentMetadata[];\n  voiceNote?: VoiceNoteMetadata | null;\n}\n\n/**\n * 反馈请求\n */\nexport interface FeedbackRequest {\n  agentId: string;\n  chatId: string;\n  dataId: string;\n  userGoodFeedback?: boolean | undefined;\n  userBadFeedback?: boolean | undefined;\n}\n\n/**\n * API错误响应\n */\nexport interface ApiError {\n  code: string;\n  message: string;\n  category?: ErrorCategory;\n  severity?: ErrorSeverity;\n  details?: JsonValue;\n  timestamp: string;\n  userId?: string;\n  requestId?: string;\n}\n\n/**\n * 智能体健康检查响应\n */\nexport interface AgentHealthStatus {\n  agentId: string;\n  status: AgentStatus;\n  responseTime?: number;\n  lastChecked: string;\n  error?: string;\n}\n\n/**\n * 请求头类型\n */\nexport interface RequestHeaders {\n  authorization?: string;\n  'content-type'?: string;\n  'user-agent'?: string;\n  [key: string]: string | undefined;\n}\n\n/**\n * 聊天会话\n */\nexport interface ChatSession {\n  id: string;\n  title: string;\n  agentId: string;\n  messages: ChatMessage[];\n  createdAt: number;\n  updatedAt: number;\n  metadata?: {\n    totalTokens: number;\n    messageCount: number;\n  };\n}\n\nexport interface ChatAttachmentMetadata {\n  id: string;\n  url: string;\n  name: string;\n  size: number;\n  mimeType: string;\n  source?: 'upload' | 'voice' | 'external';\n}\n\nexport interface VoiceNoteMetadata {\n  id: string;\n  url: string;\n  duration: number;\n  mimeType: string;\n  size?: number;\n}\n\n/**\n * FastGPT初始化响应接口\n */\nexport interface FastGPTInitResponse {\n  chatId: string;\n  appId: string;\n  variables: Record<string, any>;\n  app: {\n    chatConfig: {\n      questionGuide: boolean;\n      ttsConfig: { type: string };\n      whisperConfig: {\n        open: boolean;\n        autoSend: boolean;\n        autoTTSResponse: boolean\n      };\n      chatInputGuide: {\n        open: boolean;\n        textList: string[];\n        customUrl: string\n      };\n      instruction: string;\n      variables: any[];\n      fileSelectConfig: {\n        canSelectFile: boolean;\n        canSelectImg: boolean;\n        maxFiles: number\n      };\n      welcomeText: string;\n    };\n    chatModels: string[];\n    name: string;\n    avatar: string;\n    intro: string;\n    type: string;\n    pluginInputs: any[];\n  };\n}\n\n/**\n * FastGPT 会话摘要\n */\nexport interface FastGPTChatHistorySummary {\n  chatId: string;\n  appId?: string | undefined;\n  title: string;\n  createdAt: string;\n  updatedAt: string;\n  messageCount?: number | undefined;\n  tags?: string[] | undefined;\n  raw?: any;\n}\n\n/**\n * FastGPT 历史消息\n */\nexport interface FastGPTChatHistoryMessage {\n  id?: string | undefined;\n  dataId?: string | undefined;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  feedback?: 'good' | 'bad' | null | undefined;\n  raw?: any;\n}\n\n/**\n * FastGPT 会话详情\n */\nexport interface FastGPTChatHistoryDetail {\n  chatId: string;\n  appId?: string | undefined;\n  title?: string | undefined;\n  messages: FastGPTChatHistoryMessage[];\n  metadata?: Record<string, any> | undefined;\n  sessionInfo?: {\n    userId?: string | null;\n  };\n}\n\nexport interface ProductPreviewBoundingBox {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface ProductPreviewRequest {\n  sceneImage: string;\n  productImage?: string;\n  productQuery: string;\n  personalization?: string;\n  boundingBox: ProductPreviewBoundingBox;\n}\n\nexport interface ProductPreviewResult {\n  requestId?: string;\n  traceId?: string;\n  previewImage?: string;\n  imageUrl?: string;\n  status?: string;\n  raw?: any;\n}\n\n/**\n * 增强的会话过滤和查询参数\n */\nexport interface SessionListParams {\n  page?: number;\n  pageSize?: number;\n  startDate?: string; // ISO 8601 日期字符串\n  endDate?: string;   // ISO 8601 日期字符串\n  tags?: string[];    // 标签过滤\n  minMessageCount?: number;\n  maxMessageCount?: number;\n  sortBy?: 'createdAt' | 'updatedAt' | 'messageCount' | 'title';\n  sortOrder?: 'asc' | 'desc';\n  searchKeyword?: string; // 在标题和内容中搜索\n}\n\n/**\n * 分页响应\n */\nexport interface PaginatedResponse<T> {\n  data: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrev: boolean;\n}\n\n/**\n * 批量操作选项\n */\nexport interface BatchOperationOptions {\n  sessionIds: string[];\n  operation: 'delete' | 'archive' | 'addTags' | 'removeTags';\n  tags?: string[]; // 用于标签操作\n}\n\n/**\n * 会话导出选项\n */\nexport interface ExportOptions {\n  format: 'json' | 'csv' | 'excel';\n  includeMessages?: boolean;\n  includeMetadata?: boolean;\n  filters?: SessionListParams;\n  dateRange?: {\n    start: string;\n    end: string;\n  };\n}\n\n/**\n * 会话事件类型\n */\nexport type SessionEventType =\n  | 'created'\n  | 'updated'\n  | 'deleted'\n  | 'archived'\n  | 'restored'\n  | 'feedback_added'\n  | 'feedback_updated'\n  | 'message_added'\n  | 'tags_updated'\n  | 'exported';\n\n/**\n * 会话事件记录\n */\nexport interface SessionEvent {\n  id: string;\n  sessionId: string;\n  agentId: string;\n  eventType: SessionEventType;\n  timestamp: string;\n  userId?: string;\n  metadata?: {\n    oldData?: any;\n    newData?: any;\n    reason?: string;\n    feedbackType?: 'good' | 'bad';\n    feedbackValue?: string;\n    tags?: string[];\n    exportFormat?: string;\n    [key: string]: any;\n  };\n  userAgent?: string;\n  ipAddress?: string;\n}\n\n/**\n * 事件查询参数\n */\nexport interface EventQueryParams {\n  sessionIds?: string[];\n  agentId?: string;\n  eventTypes?: SessionEventType[];\n  startDate?: string;\n  endDate?: string;\n  userId?: string;\n  page?: number;\n  pageSize?: number;\n  sortBy?: 'timestamp';\n  sortOrder?: 'asc' | 'desc';\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/types/lz4.d.ts","messages":[{"ruleId":null,"fatal":false,"severity":1,"message":"File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override.","nodeType":null}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/types/provider.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 114. Maximum allowed is 100.","line":199,"column":1,"nodeType":"Program","messageId":"max","endLine":199,"endColumn":115}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AI 提供商响应类型定义\n *\n * 定义各个 AI 提供商的原始响应格式，用于替换 any 类型\n */\n\nimport type { JsonValue } from './index';\n\n// ============================================================================\n// FastGPT 响应类型\n// ============================================================================\n\nexport interface FastGPTChoice {\n  index: number;\n  message?: {\n    role: string;\n    content: string;\n  };\n  delta?: {\n    content?: string;\n  };\n  finish_reason?: string;\n}\n\nexport interface FastGPTResponse {\n  id?: string;\n  object?: string;\n  created?: number;\n  model?: string;\n  choices?: FastGPTChoice[];\n  usage?: {\n    prompt_tokens?: number;\n    completion_tokens?: number;\n    total_tokens?: number;\n  };\n}\n\nexport interface FastGPTStreamChunk {\n  choices?: Array<{\n    index?: number;\n    delta?: {\n      content?: string;\n      role?: string;\n    };\n    finish_reason?: string | null;\n  }>;\n}\n\n// ============================================================================\n// OpenAI 响应类型\n// ============================================================================\n\nexport interface OpenAIChoice {\n  index: number;\n  message: {\n    role: string;\n    content: string;\n  };\n  finish_reason: string;\n}\n\nexport interface OpenAIResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: OpenAIChoice[];\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport interface OpenAIStreamChunk {\n  id?: string;\n  object?: string;\n  created?: number;\n  model?: string;\n  choices?: Array<{\n    index?: number;\n    delta?: {\n      content?: string;\n      role?: string;\n    };\n    finish_reason?: string | null;\n  }>;\n}\n\n// ============================================================================\n// Anthropic 响应类型\n// ============================================================================\n\nexport interface AnthropicContent {\n  type: 'text';\n  text: string;\n}\n\nexport interface AnthropicResponse {\n  id: string;\n  type: 'message';\n  role: 'assistant';\n  content: AnthropicContent[];\n  model: string;\n  stop_reason: string | null;\n  stop_sequence: string | null;\n  usage?: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n}\n\nexport interface AnthropicStreamChunk {\n  type: 'content_block_start' | 'content_block_delta' | 'content_block_stop' | 'message_start' | 'message_delta' | 'message_stop';\n  index?: number;\n  delta?: {\n    type?: 'text_delta';\n    text?: string;\n  };\n  content_block?: AnthropicContent;\n  message?: Partial<AnthropicResponse>;\n}\n\n// ============================================================================\n// Dify 响应类型\n// ============================================================================\n\nexport interface DifyFile {\n  type: string;\n  transfer_method: 'remote_url' | 'local_file';\n  url: string;\n}\n\nexport interface DifyResponse {\n  message_id: string;\n  conversation_id: string;\n  mode: string;\n  answer: string;\n  created_at: number;\n  metadata?: {\n    usage?: {\n      prompt_tokens: number;\n      completion_tokens: number;\n      total_tokens: number;\n      prompt_unit_price?: string;\n      prompt_price_unit?: string;\n      prompt_price?: string;\n      completion_unit_price?: string;\n      completion_price_unit?: string;\n      completion_price?: string;\n      total_price?: string;\n      currency?: string;\n      latency?: number;\n    };\n    retriever_resources?: Array<{\n      position: number;\n      dataset_id: string;\n      dataset_name: string;\n      document_id: string;\n      document_name: string;\n      segment_id: string;\n      score: number;\n      content: string;\n    }>;\n  };\n}\n\nexport interface DifyStreamChunk {\n  event: 'message' | 'message_end' | 'message_file' | 'error' | 'ping' | 'agent_thought' | 'agent_message';\n  id?: string;\n  conversation_id?: string;\n  message_id?: string;\n  answer?: string;\n  created_at?: number;\n  // message_file 事件字段\n  type?: string;\n  url?: string;\n  belongs_to?: string;\n  // error 事件字段\n  status?: number;\n  code?: string;\n  message?: string;\n  // message_end 事件字段\n  metadata?: DifyResponse['metadata'];\n}\n\n// ============================================================================\n// 通用提供商响应类型\n// ============================================================================\n\n/**\n * 通用提供商响应联合类型\n */\nexport type ProviderResponse = FastGPTResponse | OpenAIResponse | AnthropicResponse | DifyResponse;\n\n/**\n * 通用提供商流式响应联合类型\n */\nexport type ProviderStreamChunk = FastGPTStreamChunk | OpenAIStreamChunk | AnthropicStreamChunk | DifyStreamChunk;\n\n/**\n * SSE 事件数据类型\n */\nexport type SSEEventData = Record<string, JsonValue> | string | null;\n\n/**\n * 推理数据提取结果\n */\nexport type ReasoningPayload = Record<string, JsonValue> | string | null;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/types/queue.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":26,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 消息队列相关类型定义\n */\n\nexport interface QueueMessage {\n  id: string;\n  type: string;\n  payload: Record<string, unknown>;\n  priority: MessagePriority;\n  attempts: number;\n  maxAttempts: number;\n  delay: number;\n  createdAt: Date;\n  scheduledAt?: Date;\n  processedAt?: Date;\n  completedAt?: Date;\n  failedAt?: Date;\n  errorMessage?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport enum MessagePriority {\n  LOW = 1,\n  NORMAL = 5,\n  HIGH = 10,\n  CRITICAL = 20\n}\n\nexport enum QueueStatus {\n  ACTIVE = 'active',\n  PAUSED = 'paused',\n  DRAINING = 'draining',\n  STOPPED = 'stopped'\n}\n\nexport enum JobStatus {\n  WAITING = 'waiting',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  DELAYED = 'delayed'\n}\n\nexport interface QueueConfig {\n  name: string;\n  concurrency: number;\n  maxRetries: number;\n  retryDelay: number;\n  backoffMultiplier: number;\n  removeOnComplete: number;\n  removeOnFail: number;\n  defaultPriority: MessagePriority;\n  stalledInterval: number;\n  maxStalledCount: number;\n  delayOnFail: boolean;\n  deadLetterQueue?: string;\n  paused?: boolean;\n  visibilityTimeout?: number;\n}\n\nexport interface QueueStats {\n  name: string;\n  status: QueueStatus;\n  waiting: number;\n  active: number;\n  completed: number;\n  failed: number;\n  delayed: number;\n  paused: boolean;\n  processing: number;\n  concurrency: number;\n  maxConcurrency: number;\n  throughput: number;\n  avgProcessingTime: number;\n  errorRate: number;\n  lastProcessedAt: Date | undefined;\n  createdAt: Date;\n  total?: number;\n  lastActivity?: Date;\n}\n\nexport interface QueueOptions {\n  priority?: MessagePriority;\n  delay?: number;\n  attempts?: number;\n  removeOnComplete?: boolean;\n  removeOnFail?: boolean;\n  backoff?: BackoffStrategy;\n  metadata?: Record<string, unknown>;\n  deadLetterQueue?: string;\n  maxAttempts?: number;\n  timeout?: number;\n  type?: JobType;\n}\n\nexport enum BackoffStrategy {\n  FIXED = 'fixed',\n  LINEAR = 'linear',\n  EXPONENTIAL = 'exponential',\n  CUSTOM = 'custom'\n}\n\nexport interface BackoffOptions {\n  strategy: BackoffStrategy;\n  delay: number;\n  maxDelay?: number;\n  multiplier?: number;\n  jitter?: boolean;\n  customFn?: (attempt: number, error: Error) => number;\n}\n\nexport interface QueueJob<T = Record<string, unknown>> {\n  id: string;\n  name: string;\n  data: T;\n  opts: QueueOptions;\n  createdAt: Date;\n  processedOn?: Date;\n  finishedOn?: Date;\n  failedAt?: Date;\n  attemptsMade: number;\n  progress?: number;\n  returnvalue?: unknown;\n  failedReason?: string;\n  status?: JobStatus;\n  error?: string;\n  lastAttemptAt?: Date;\n  scheduledAt?: Date;\n  type?: JobType;\n  priority?: MessagePriority;\n  delay?: number;\n  maxAttempts?: number;\n}\n\nexport interface QueueProcessor<T = Record<string, unknown>> {\n  (job: QueueJob<T>): Promise<unknown>;\n}\n\nexport interface QueueMiddleware {\n  name: string;\n  beforeProcess?: (job: QueueJob) => Promise<void> | void;\n  afterProcess?: (job: QueueJob, result: unknown) => Promise<void> | void;\n  onError?: (job: QueueJob, error: Error) => Promise<void> | void;\n  onFailed?: (job: QueueJob, error: Error) => Promise<void> | void;\n  onCompleted?: (job: QueueJob, result: unknown) => Promise<void> | void;\n}\n\nexport interface QueueEvent {\n  type: 'job:active' | 'job:stalled' | 'job:progress' | 'job:completed' | 'job:failed' | 'queue:paused' | 'queue:resumed';\n  jobId: string;\n  queueName: string;\n  timestamp: Date;\n  data?: Record<string, unknown>;\n}\n\nexport interface QueueManagerConfig {\n  redis: {\n    host: string;\n    port: number;\n    password?: string;\n    db?: number;\n    keyPrefix?: string;\n  };\n  defaultConcurrency?: number;\n  stalledInterval?: number;\n  maxStalledCount?: number;\n  settings?: Record<string, QueueConfig>;\n  enableMetrics?: boolean;\n  enableEvents?: boolean;\n  metricsInterval?: number;\n  batchSize?: number;\n  enablePipelining?: boolean;\n  enableTransactions?: boolean;\n  memoryOptimization?: {\n    enabled?: boolean;\n    autoOptimization?: boolean;\n    threshold?: number;\n    intervalMs?: number;\n    maxHeapSizeMB?: number;\n    maxRSSSizeMB?: number;\n  };\n}\n\n// 预定义的队列类型\nexport const QUEUE_TYPES = {\n  CHAT_PROCESSING: 'chat-processing',\n  EMAIL_NOTIFICATION: 'email-notification',\n  WEBHOOK_PROCESSING: 'webhook-processing',\n  DATA_SYNC: 'data-sync',\n  LOG_PROCESSING: 'log-processing',\n  REPORT_GENERATION: 'report-generation',\n  CLEANUP_TASKS: 'cleanup-tasks',\n  AUDIT_LOGS: 'audit-logs',\n  PERFORMANCE_METRICS: 'performance-metrics',\n  HEALTH_CHECKS: 'health-checks',\n} as const;\n\nexport type QueueType = typeof QUEUE_TYPES[keyof typeof QUEUE_TYPES];\n\n// 预定义的任务类型\nexport const JOB_TYPES = {\n  CHAT_MESSAGE: 'chat-message',\n  CHAT_STREAM: 'chat-stream',\n  CHAT_SUMMARY: 'chat-summary',\n  EMAIL_SEND: 'email-send',\n  WEBHOOK_CALL: 'webhook-call',\n  DATA_EXPORT: 'data-export',\n  DATA_IMPORT: 'data-import',\n  REPORT_GENERATE: 'report-generate',\n  CACHE_WARMUP: 'cache-warmup',\n  CACHE_CLEANUP: 'cache-cleanup',\n  LOG_ROTATE: 'log-rotate',\n  AUDIT_CREATE: 'audit-create',\n  METRICS_COLLECT: 'metrics-collect',\n  HEALTH_CHECK: 'health-check',\n  SESSION_CLEANUP: 'session-cleanup',\n  TOKEN_REFRESH: 'token-refresh',\n  PASSWORD_RESET: 'password-reset',\n} as const;\n\nexport type JobType = typeof JOB_TYPES[keyof typeof JOB_TYPES];\n\n// Health status for queue monitoring\nexport enum QueueHealthStatusValue {\n  HEALTHY = 'healthy',\n  WARNING = 'warning',\n  CRITICAL = 'critical',\n  UNKNOWN = 'unknown'\n}\n\n// Queue health status interface\nexport interface QueueHealthStatus {\n  queueName: string;\n  healthy: boolean;\n  status: string;\n  checks: {\n    queueSize: string;\n    processingTime: string;\n    errorRate: string;\n    memoryUsage: string;\n    redisConnection: string;\n    staleJobs: string;\n    deadlockDetection: string;\n    queueConfiguration: string;\n  };\n  metrics: {\n    totalJobs: number;\n    waitingJobs: number;\n    activeJobs: number;\n    completedJobs: number;\n    failedJobs: number;\n    delayedJobs: number;\n    throughput: number;\n    errorRate: number;\n    avgProcessingTime: number;\n    lastActivity: Date | null;\n  };\n  issues: string[];\n  lastCheck: Date;\n  checkDuration: number;\n}\n\n// Queue health check result interface\nexport interface QueueHealthCheckResult {\n  healthy: boolean;\n  message: string;\n}\n\n// Queue metrics for monitoring\nexport interface QueueMetrics {\n  queueName: string;\n  timestamp: number;\n  stats: QueueStats;\n  healthStatus: QueueHealthStatus;\n  performance: {\n    throughput: number;\n    avgProcessingTime: number;\n    p95ProcessingTime: number;\n    p99ProcessingTime: number;\n    memoryUsage: number;\n  };\n  trends: {\n    throughputTrend: 'up' | 'down' | 'stable';\n    errorRateTrend: 'up' | 'down' | 'stable';\n    processingTimeTrend: 'up' | 'down' | 'stable';\n  };\n  alerts: QueueAlert[];\n}\n\n// Queue alert for notifications\nexport interface QueueAlert {\n  type: 'queue_size' | 'error_rate' | 'processing_time' | 'memory_usage' | 'health_status';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  value?: number;\n  threshold?: number;\n  timestamp: Date;\n  details?: string[];\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/types/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/CodeQualityChecker.simple.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":47,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":4},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'checkEssentialFiles' has no 'await' expression.","line":95,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":95,"endColumn":36},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'checkConfigurationFiles' has no 'await' expression.","line":116,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":116,"endColumn":40}],"suppressedMessages":[{"ruleId":"no-useless-constructor","severity":2,"message":"Useless constructor.","line":35,"column":3,"nodeType":"MethodDefinition","messageId":"noUselessConstructor","endLine":35,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 简化的代码质量检查器\n * 只保留基础的质量检查功能，移除复杂的治理、监控、优化功能\n */\n\nimport logger from './logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface QualityIssue {\n  type: 'error' | 'warning' | 'info';\n  message: string;\n  file?: string;\n  line?: number;\n  rule?: string;\n}\n\nexport interface QualityReport {\n  timestamp: string;\n  totalIssues: number;\n  errors: number;\n  warnings: number;\n  info: number;\n  issues: QualityIssue[];\n}\n\n/**\n * 简化的代码质量检查器\n */\nexport class CodeQualityChecker {\n  private static instance: CodeQualityChecker;\n  private isEnabled: boolean = true;\n\n  // 私有构造函数确保单例模式 - 只能通过getInstance()创建实例\n  // eslint-disable-next-line no-useless-constructor\n  private constructor() {}\n\n  public static getInstance(): CodeQualityChecker {\n    if (!CodeQualityChecker.instance) {\n      CodeQualityChecker.instance = new CodeQualityChecker();\n    }\n    return CodeQualityChecker.instance;\n  }\n\n  /**\n   * 运行基础的质量检查\n   */\n  public async runBasicCheck(options?: {\n    includeTests?: boolean;\n    excludePatterns?: string[];\n  }): Promise<QualityReport> {\n    if (!this.isEnabled) {\n      return this.createEmptyReport();\n    }\n\n    try {\n      logger.info('Running basic code quality check...');\n\n      const issues: QualityIssue[] = [];\n\n      // 基础检查：检查关键文件是否存在\n      await this.checkEssentialFiles(issues);\n\n      // 基础检查：检查配置文件\n      await this.checkConfigurationFiles(issues);\n\n      const report: QualityReport = {\n        timestamp: new Date().toISOString(),\n        totalIssues: issues.length,\n        errors: issues.filter(i => i.type === 'error').length,\n        warnings: issues.filter(i => i.type === 'warning').length,\n        info: issues.filter(i => i.type === 'info').length,\n        issues,\n      };\n\n      logger.info('Code quality check completed', {\n        total: report.totalIssues,\n        errors: report.errors,\n        warnings: report.warnings,\n      });\n\n      return report;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'CodeQualityChecker',\n        operation: 'runBasicCheck',\n      });\n      logger.error('Code quality check failed', { error: error.toLogObject() });\n      return this.createErrorReport(error);\n    }\n  }\n\n  /**\n   * 检查关键文件\n   */\n  private async checkEssentialFiles(issues: QualityIssue[]): Promise<void> {\n    const essentialFiles = [\n      'package.json',\n      'tsconfig.json',\n      '.env.example',\n      'README.md',\n    ];\n\n    // 简化实现：假设关键文件都存在\n    essentialFiles.forEach(file => {\n      issues.push({\n        type: 'info',\n        message: `Essential file found: ${file}`,\n        file,\n      });\n    });\n  }\n\n  /**\n   * 检查配置文件\n   */\n  private async checkConfigurationFiles(issues: QualityIssue[]): Promise<void> {\n    const configFiles = [\n      'backend/package.json',\n      'backend/tsconfig.json',\n      'frontend/package.json',\n      'frontend/tsconfig.json',\n    ];\n\n    configFiles.forEach(file => {\n      issues.push({\n        type: 'info',\n        message: `Configuration file found: ${file}`,\n        file,\n      });\n    });\n  }\n\n  /**\n   * 创建空报告\n   */\n  private createEmptyReport(): QualityReport {\n    return {\n      timestamp: new Date().toISOString(),\n      totalIssues: 0,\n      errors: 0,\n      warnings: 0,\n      info: 0,\n      issues: [],\n    };\n  }\n\n  /**\n   * 创建错误报告\n   */\n  private createErrorReport(error: Error): QualityReport {\n    return {\n      timestamp: new Date().toISOString(),\n      totalIssues: 1,\n      errors: 1,\n      warnings: 0,\n      info: 0,\n      issues: [{\n        type: 'error',\n        message: `Quality check failed: ${error.message}`,\n        rule: 'quality-check-error',\n      }],\n    };\n  }\n\n  /**\n   * 启用/禁用质量检查器\n   */\n  public setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled;\n    logger.info(`Code quality checker ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  /**\n   * 检查是否启用\n   */\n  public isCheckerEnabled(): boolean {\n    return this.isEnabled;\n  }\n\n  /**\n   * 获取简单的健康状态\n   */\n  public getHealthStatus(): { status: string; message: string } {\n    return {\n      status: this.isEnabled ? 'healthy' : 'disabled',\n      message: this.isEnabled ? 'Code quality checker is running' : 'Code quality checker is disabled',\n    };\n  }\n}\n\n// 导出单例实例\nexport const codeQualityChecker = CodeQualityChecker.getInstance();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/MigrationManager.ts","messages":[{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'existsSync'.","line":75,"column":10,"nodeType":"MemberExpression","messageId":"noSync","endLine":75,"endColumn":23},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'readdirSync'.","line":80,"column":19,"nodeType":"MemberExpression","messageId":"noSync","endLine":80,"endColumn":33},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'readFileSync'.","line":98,"column":19,"nodeType":"MemberExpression","messageId":"noSync","endLine":98,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据库迁移管理器\n *\n * 功能：\n * - 自动检测并创建数据库\n * - 版本化迁移管理\n * - 表结构自动同步\n * - 事务保证和回滚支持\n */\n\nimport type { Pool, PoolClient } from 'pg';\nimport fs from 'fs';\nimport path from 'path';\nimport logger from './logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface MigrationRecord {\n  id: number;\n  version: number;\n  name: string;\n  executed_at: Date;\n  execution_time_ms: number;\n  checksum: string;\n}\n\nexport interface MigrationFile {\n  version: number;\n  name: string;\n  filepath: string;\n  sql: string;\n  checksum: string;\n}\n\nexport class MigrationManager {\n  private readonly pool: Pool;\n  private readonly migrationsDir: string;\n\n  constructor(pool: Pool, migrationsDir = 'src/migrations') {\n    this.pool = pool;\n    this.migrationsDir = path.resolve(process.cwd(), migrationsDir);\n  }\n\n  /**\n   * 确保迁移表存在\n   */\n  private async ensureMigrationsTable(client: PoolClient): Promise<void> {\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS schema_migrations (\n        id SERIAL PRIMARY KEY,\n        version INTEGER UNIQUE NOT NULL,\n        name VARCHAR(255) NOT NULL,\n        executed_at TIMESTAMPTZ DEFAULT NOW(),\n        execution_time_ms INTEGER,\n        checksum VARCHAR(64)\n      );\n      CREATE INDEX IF NOT EXISTS idx_schema_migrations_version ON schema_migrations(version);\n    `);\n    logger.info('[Migration] ✅ 迁移表已就绪');\n  }\n\n  /**\n   * 获取已执行的迁移\n   */\n  private async getExecutedMigrations(client: PoolClient): Promise<Set<number>> {\n    const result = await client.query<{version: number}>(\n      'SELECT version FROM schema_migrations ORDER BY version',\n    );\n    return new Set(result.rows.map(r => r.version));\n  }\n\n  /**\n   * 读取迁移文件\n   */\n  private async loadMigrationFiles(): Promise<MigrationFile[]> {\n    if (!fs.existsSync(this.migrationsDir)) {\n      logger.warn(`[Migration] 迁移目录不存在: ${this.migrationsDir}`);\n      return [];\n    }\n\n    const files = fs.readdirSync(this.migrationsDir)\n      .filter(f => f.endsWith('.sql'))\n      .sort();\n\n    const migrations: MigrationFile[] = [];\n\n    for (const file of files) {\n      // 解析文件名格式: 001_initial_schema.sql\n      const match = file.match(/^(\\d+)_(.+)\\.sql$/);\n      if (!match?.[1] || !match[2]) {\n        logger.warn(`[Migration] 跳过无效文件名: ${file}`);\n        continue;\n      }\n\n      const versionStr = match[1];\n      const name = match[2];\n      const version = parseInt(versionStr, 10);\n      const filepath = path.join(this.migrationsDir, file);\n      const sql = fs.readFileSync(filepath, 'utf-8');\n\n      // 计算校验和\n      const crypto = await import('crypto');\n      const checksum = crypto.createHash('sha256').update(sql).digest('hex');\n\n      migrations.push({\n        version,\n        name,\n        filepath,\n        sql,\n        checksum,\n      });\n    }\n\n    return migrations;\n  }\n\n  /**\n   * 执行单个迁移\n   */\n  private async executeMigration(\n    client: PoolClient,\n    migration: MigrationFile,\n  ): Promise<number> {\n    const startTime = Date.now();\n\n    try {\n      logger.info(`[Migration] 执行迁移 ${migration.version}: ${migration.name}`);\n\n      // 执行迁移SQL\n      await client.query(migration.sql);\n\n      const executionTime = Date.now() - startTime;\n\n      // 记录迁移\n      await client.query(\n        `INSERT INTO schema_migrations (version, name, execution_time_ms, checksum)\n         VALUES ($1, $2, $3, $4)`,\n        [migration.version, migration.name, executionTime, migration.checksum],\n      );\n\n      logger.info(`[Migration] ✅ 迁移 ${migration.version} 完成 (${executionTime}ms)`);\n      return executionTime;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'MigrationManager',\n        operation: 'executeMigration',\n      });\n      logger.error(`[Migration] ❌ 迁移 ${migration.version} 失败`, { error: error.toLogObject() });\n      throw error;\n    }\n  }\n\n  /**\n   * 运行所有待执行的迁移\n   */\n  public async runMigrations(): Promise<{\n    executed: number;\n    skipped: number;\n    totalTime: number;\n  }> {\n    const client = await this.pool.connect();\n    let executed = 0;\n    let skipped = 0;\n    let totalTime = 0;\n\n    try {\n      // 开始事务\n      await client.query('BEGIN');\n\n      // 确保迁移表存在\n      await this.ensureMigrationsTable(client);\n\n      // 获取已执行的迁移\n      const executedVersions = await this.getExecutedMigrations(client);\n      logger.info(`[Migration] 已执行的迁移数: ${executedVersions.size}`);\n\n      // 加载迁移文件\n      const migrations = await this.loadMigrationFiles();\n      logger.info(`[Migration] 发现迁移文件: ${migrations.length}个`);\n\n      // 执行待处理的迁移\n      for (const migration of migrations) {\n        if (executedVersions.has(migration.version)) {\n          skipped++;\n          logger.debug(`[Migration] 跳过已执行的迁移 ${migration.version}: ${migration.name}`);\n          continue;\n        }\n\n        const execTime = await this.executeMigration(client, migration);\n        totalTime += execTime;\n        executed++;\n      }\n\n      // 提交事务\n      await client.query('COMMIT');\n\n      logger.info('[Migration] 🎉 迁移执行完成', {\n        executed,\n        skipped,\n        totalTimeMs: totalTime,\n      });\n\n      return { executed, skipped, totalTime };\n    } catch (unknownError: unknown) {\n      // 回滚事务\n      await client.query('ROLLBACK');\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'MigrationManager',\n        operation: 'runMigrations',\n      });\n      logger.error('[Migration] ❌ 迁移执行失败，已回滚', { error: error.toLogObject() });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * 获取迁移状态\n   */\n  public async getMigrationStatus(): Promise<{\n    executed: MigrationRecord[];\n    pending: MigrationFile[];\n  }> {\n    const client = await this.pool.connect();\n\n    try {\n      // 确保表存在\n      await this.ensureMigrationsTable(client);\n\n      // 获取已执行的迁移\n      const result = await client.query<MigrationRecord>(\n        'SELECT * FROM schema_migrations ORDER BY version',\n      );\n      const executedVersions = new Set(result.rows.map(r => r.version));\n\n      // 获取待执行的迁移\n      const allMigrations = await this.loadMigrationFiles();\n      const pending = allMigrations.filter(m => !executedVersions.has(m.version));\n\n      return {\n        executed: result.rows,\n        pending,\n      };\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * 验证迁移完整性\n   */\n  public async validateMigrations(): Promise<boolean> {\n    const client = await this.pool.connect();\n\n    try {\n      await this.ensureMigrationsTable(client);\n\n      const result = await client.query<{version: number; checksum: string}>(\n        'SELECT version, checksum FROM schema_migrations ORDER BY version',\n      );\n\n      const migrations = await this.loadMigrationFiles();\n      const migrationsMap = new Map(migrations.map(m => [m.version, m]));\n\n      for (const record of result.rows) {\n        const migration = migrationsMap.get(record.version);\n        if (!migration) {\n          logger.error(`[Migration] ❌ 缺少迁移文件 version ${record.version}`);\n          return false;\n        }\n\n        if (migration.checksum !== record.checksum) {\n          logger.error(`[Migration] ❌ 迁移文件 ${record.version} 校验和不匹配`);\n          return false;\n        }\n      }\n\n      logger.info('[Migration] ✅ 所有迁移文件校验通过');\n      return true;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport default MigrationManager;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/adaptiveCache.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":24,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":24,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60_000.","line":25,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":25,"endColumn":63},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":26,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface AdaptiveCacheOptions {\n  initialTtl: number;\n  minTtl: number;\n  maxTtl: number;\n  step: number;\n  sampleSize?: number;\n  adjustIntervalMs?: number;\n  expandRatio?: number;\n  shrinkRatio?: number;\n}\n\nexport class AdaptiveTtlPolicy {\n  private ttl: number;\n  private hits = 0;\n  private misses = 0;\n  private lastAdjusted = Date.now();\n  private readonly sampleSize: number;\n  private readonly adjustIntervalMs: number;\n  private readonly expandRatio: number;\n  private readonly shrinkRatio: number;\n\n  constructor(private readonly options: AdaptiveCacheOptions) {\n    this.ttl = options.initialTtl;\n    this.sampleSize = options.sampleSize ?? 20;\n    this.adjustIntervalMs = options.adjustIntervalMs ?? 60_000;\n    this.expandRatio = options.expandRatio ?? 0.7;\n    this.shrinkRatio = options.shrinkRatio ?? 0.3;\n  }\n\n  getTtl(): number {\n    return this.ttl;\n  }\n\n  recordHit(): void {\n    this.hits += 1;\n    this.maybeAdjust();\n  }\n\n  recordMiss(): void {\n    this.misses += 1;\n    this.maybeAdjust();\n  }\n\n  reset(): void {\n    this.ttl = this.options.initialTtl;\n    this.hits = 0;\n    this.misses = 0;\n    this.lastAdjusted = Date.now();\n  }\n\n  notifyInvalidation(): void {\n    this.ttl = Math.max(this.options.minTtl, this.ttl - this.options.step);\n    this.hits = 0;\n    this.misses = 0;\n    this.lastAdjusted = Date.now();\n  }\n\n  private maybeAdjust(): void {\n    const total = this.hits + this.misses;\n    const now = Date.now();\n    if (total < this.sampleSize && now - this.lastAdjusted < this.adjustIntervalMs) {\n      return;\n    }\n    const ratio = total === 0 ? 0 : this.hits / total;\n    if (ratio >= this.expandRatio && this.ttl < this.options.maxTtl) {\n      this.ttl = Math.min(this.options.maxTtl, this.ttl + this.options.step);\n    } else if (ratio <= this.shrinkRatio && this.ttl > this.options.minTtl) {\n      this.ttl = Math.max(this.options.minTtl, this.ttl - this.options.step);\n    }\n    this.hits = 0;\n    this.misses = 0;\n    this.lastAdjusted = now;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/apiResponse.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":183,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":183,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4550,4552],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 204.","line":228,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":228,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":357,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":357,"endColumn":18},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":413,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":413,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":414,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":414,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":414,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":414,"endColumn":40},{"ruleId":"max-len","severity":1,"message":"This line has a length of 102. Maximum allowed is 100.","line":433,"column":1,"nodeType":"Program","messageId":"max","endLine":433,"endColumn":103},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":439,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":439,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":442,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":442,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":445,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":445,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":448,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":448,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":451,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":451,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":459,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":459,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":464,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":464,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":467,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":467,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":470,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":470,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":473,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":473,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":503,"column":65,"nodeType":"Literal","messageId":"noMagic","endLine":503,"endColumn":66}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Response } from 'express';\nimport { type ApiSuccessResponse, type JsonObject, type JsonValue, DynamicTypeGuard, DynamicDataConverter } from '@/types/dynamic';\nimport { createErrorFromUnknown } from '@/types/errors';\n\ninterface PaginationMetadata {\n  page: number;\n  pageSize: number;\n  total: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrev: boolean;\n}\n\ninterface SuccessMetadata {\n  pagination?: PaginationMetadata;\n  extra?: unknown;\n}\n\ntype SendSuccessOptions = Exclude<Parameters<typeof ApiResponseHandler.sendSuccess>[2], undefined>;\n\n/**\n * 类型安全的API响应处理工具\n *\n * 特性：\n * - 类型安全的数据验证\n * - 统一的响应格式\n * - 自动序列化处理\n * - 请求ID追踪\n * - 性能监控\n * - 错误边界保护\n */\nexport class ApiResponseHandler {\n  private static readonly API_VERSION = '1.0.0';\n\n  /**\n   * 发送成功响应\n   */\n  static sendSuccess<T = unknown>(\n    res: Response,\n    data: T,\n    options: {\n      message?: string;\n      code?: string;\n      statusCode?: number;\n      requestId?: string;\n      metadata?: SuccessMetadata;\n      startTime?: number;\n    } = {},\n  ): void {\n    const {\n      message = 'success',\n      code = 'OK',\n      statusCode = 200,\n      requestId,\n      metadata,\n      startTime,\n    } = options;\n\n    // 验证响应数据类型\n    const safeData = DynamicDataConverter.toSafeJsonValue(data);\n\n    if (!DynamicTypeGuard.isJsonValue(safeData)) {\n      const error = createErrorFromUnknown(\n        new Error('Response data is not a valid JSON value'),\n        {\n          component: 'ApiResponseHandler',\n          operation: 'sendSuccess',\n          context: { dataType: typeof data },\n        },\n      );\n\n      return this.sendError(res, error, requestId ? { requestId } : {});\n    }\n\n    const metadataPayload: ApiSuccessResponse<JsonValue>['metadata'] = {\n      version: this.API_VERSION,\n      ...(startTime ? { duration: Date.now() - startTime } : {}),\n      ...(metadata?.pagination ? { pagination: metadata.pagination } : {}),\n      ...(metadata?.extra\n        ? this.getMetadataExtra(metadata.extra)\n        : {}),\n    };\n\n    const responseData: ApiSuccessResponse<JsonValue> = {\n      code,\n      message,\n      data: safeData as JsonValue,\n      timestamp: new Date().toISOString(),\n      ...(requestId ? { requestId } : {}),\n      metadata: metadataPayload,\n    };\n\n    // 设置响应头\n    if (requestId) {\n      res.setHeader('X-Request-ID', requestId);\n    }\n\n    res.setHeader('Content-Type', 'application/json');\n    res.status(statusCode).json(responseData);\n  }\n\n  /**\n   * 发送分页响应\n   */\n  static sendPaginated<T = unknown>(\n    res: Response,\n    data: T[],\n    pagination: {\n      page: number;\n      pageSize: number;\n      total: number;\n    },\n    options: {\n      message?: string;\n      requestId?: string;\n      startTime?: number;\n      metadata?: SuccessMetadata;\n    } = {},\n  ): void {\n    const totalPages = Math.ceil(pagination.total / pagination.pageSize);\n    const hasNext = pagination.page < totalPages;\n    const hasPrev = pagination.page > 1;\n\n    const paginationData = {\n      ...pagination,\n      totalPages,\n      hasNext,\n      hasPrev,\n    };\n\n    this.sendSuccess(res, data, {\n      ...(options.message ? { message: options.message } : {}),\n      ...(options.requestId ? { requestId: options.requestId } : {}),\n      ...(options.startTime ? { startTime: options.startTime } : {}),\n      metadata: {\n        pagination: paginationData,\n        ...(options.metadata?.extra\n          ? this.getMetadataExtra(options.metadata.extra)\n          : {}),\n      },\n    });\n  }\n\n  /**\n   * 发送错误响应\n   */\n  static sendError(\n    res: Response,\n    error: unknown,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      includeDetails?: boolean;\n    } = {},\n  ): void {\n    const typedError = createErrorFromUnknown(error, {\n      component: 'ApiResponseHandler',\n      operation: 'sendError',\n      context: { statusCode: options.statusCode },\n    });\n\n    const errorResponse = typedError.toApiError();\n\n    // 开发环境下添加详细信息\n    if (process.env.NODE_ENV === 'development' && options.includeDetails) {\n      errorResponse.details = {\n        originalError: typedError.message,\n        ...(typedError.stack && { stack: typedError.stack }),\n        ...(typedError.context && { context: typedError.context }),\n        errorId: typedError.id,\n      } as JsonValue;\n    }\n\n    // 设置响应头\n    if (options.requestId) {\n      res.setHeader('X-Request-ID', options.requestId);\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      res.setHeader('X-Error-ID', typedError.id);\n    }\n\n    const statusCode = options.statusCode || this.getDefaultErrorStatusCode(typedError);\n    res.status(statusCode).json(errorResponse);\n  }\n\n  /**\n   * 发送创建成功响应 (201)\n   */\n  static sendCreated<T = unknown>(\n    res: Response,\n    data: T,\n    options: Omit<SendSuccessOptions, 'statusCode'> = {},\n  ): void {\n    const nextOptions: SendSuccessOptions = {\n      ...(options ?? {}),\n      statusCode: 201,\n    };\n\n    if (!options?.code) {\n      nextOptions.code = 'CREATED';\n    }\n\n    this.sendSuccess(res, data, nextOptions);\n  }\n\n  private static getMetadataExtra(extra: unknown): Partial<{ extra: JsonObject }> {\n    const safeExtra = DynamicDataConverter.toSafeJsonValue(extra);\n\n    if (safeExtra && typeof safeExtra === 'object' && !Array.isArray(safeExtra)) {\n      return { extra: safeExtra as JsonObject };\n    }\n\n    if (safeExtra === null || safeExtra === undefined) {\n      return {};\n    }\n\n    return { extra: { value: safeExtra } as JsonObject };\n  }\n\n  /**\n   * 发送无内容响应 (204)\n   */\n  static sendNoContent(res: Response, options: { requestId?: string } = {}): void {\n    if (options.requestId) {\n      res.setHeader('X-Request-ID', options.requestId);\n    }\n    res.status(204).end();\n  }\n\n  /**\n   * 发送验证错误响应 (400)\n   */\n  static sendValidationError(\n    res: Response,\n    message: string,\n    options: {\n      details?: JsonValue;\n      requestId?: string;\n    } = {},\n  ): void {\n    const error = createErrorFromUnknown(\n      new Error(message),\n      {\n        component: 'ApiResponseHandler',\n        operation: 'sendValidationError',\n        context: { details: options.details },\n      },\n    );\n\n    this.sendError(res, error, { ...options, statusCode: 400 });\n  }\n\n  /**\n   * 发送未授权响应 (401)\n   */\n  static sendUnauthorized(\n    res: Response,\n    message = '未授权访问',\n    options: { requestId?: string } = {},\n  ): void {\n    const error = createErrorFromUnknown(\n      new Error(message),\n      {\n        component: 'ApiResponseHandler',\n        operation: 'sendUnauthorized',\n      },\n    );\n\n    this.sendError(res, error, { ...options, statusCode: 401 });\n  }\n\n  /**\n   * 发送禁止访问响应 (403)\n   */\n  static sendForbidden(\n    res: Response,\n    message = '禁止访问',\n    options: { requestId?: string } = {},\n  ): void {\n    const error = createErrorFromUnknown(\n      new Error(message),\n      {\n        component: 'ApiResponseHandler',\n        operation: 'sendForbidden',\n      },\n    );\n\n    this.sendError(res, error, { ...options, statusCode: 403 });\n  }\n\n  /**\n   * 发送未找到响应 (404)\n   */\n  static sendNotFound(\n    res: Response,\n    message = '资源不存在',\n    options: { requestId?: string } = {},\n  ): void {\n    const error = createErrorFromUnknown(\n      new Error(message),\n      {\n        component: 'ApiResponseHandler',\n        operation: 'sendNotFound',\n      },\n    );\n\n    this.sendError(res, error, { ...options, statusCode: 404 });\n  }\n\n  /**\n   * 发送方法不允许响应 (405)\n   */\n  static sendMethodNotAllowed(\n    res: Response,\n    message = '方法不允许',\n    options: { requestId?: string } = {},\n  ): void {\n    const error = createErrorFromUnknown(\n      new Error(message),\n      {\n        component: 'ApiResponseHandler',\n        operation: 'sendMethodNotAllowed',\n      },\n    );\n\n    this.sendError(res, error, { ...options, statusCode: 405 });\n  }\n\n  /**\n   * 发送冲突响应 (409)\n   */\n  static sendConflict(\n    res: Response,\n    message = '资源冲突',\n    options: { requestId?: string } = {},\n  ): void {\n    const error = createErrorFromUnknown(\n      new Error(message),\n      {\n        component: 'ApiResponseHandler',\n        operation: 'sendConflict',\n      },\n    );\n\n    this.sendError(res, error, { ...options, statusCode: 409 });\n  }\n\n  /**\n   * 安全的JSON序列化\n   */\n  static safeJsonStringify(data: JsonValue): string {\n    try {\n      return JSON.stringify(data, null, 2);\n    } catch (unknownError: unknown) {\n      // 记录序列化错误\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ApiResponseHandler',\n        operation: 'safeJsonStringify',\n        context: { dataType: typeof data },\n      });\n\n      return JSON.stringify({\n        code: 'SERIALIZATION_ERROR',\n        message: '数据序列化失败',\n        data: null,\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  /**\n   * 批量操作响应\n   */\n  static sendBatchResult(\n    res: Response,\n    results: {\n      success: boolean;\n      data?: JsonValue;\n      error?: string;\n      index: number;\n    }[],\n    options: { requestId?: string; startTime?: number } = {},\n  ): void {\n    const successful = results.filter(r => r.success).length;\n    const failed = results.length - successful;\n\n    const data = {\n      total: results.length,\n      successful,\n      failed,\n      results,\n    };\n\n    const message = failed === 0\n      ? '批量操作全部成功'\n      : successful === 0\n        ? '批量操作全部失败'\n        : `批量操作部分成功 (${successful}/${results.length})`;\n\n    this.sendSuccess(res, data, { ...options, message });\n  }\n\n  /**\n   * 健康检查响应\n   */\n  static sendHealthCheck(\n    res: Response,\n    status: 'healthy' | 'degraded' | 'unhealthy',\n    details?: JsonValue,\n    options: { requestId?: string } = {},\n  ): void {\n    const statusCode = status === 'healthy' ? 200 :\n      status === 'degraded' ? 200 : 503;\n\n    const data = {\n      status,\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      ...(details && { details }),\n    };\n\n    this.sendSuccess(res, data, {\n      ...options,\n      statusCode,\n      message: `服务状态: ${status}`,\n    });\n  }\n\n  /**\n   * 获取默认错误状态码\n   */\n  private static getDefaultErrorStatusCode(error: ReturnType<typeof createErrorFromUnknown>): number {\n    const { code } = error;\n    const message = error.message.toLowerCase();\n\n    // 客户端错误\n    if (code === 'VALIDATION_ERROR') {\n      return 400;\n    }\n    if (code === 'UNAUTHORIZED') {\n      return 401;\n    }\n    if (code === 'FORBIDDEN') {\n      return 403;\n    }\n    if (code === 'NOT_FOUND') {\n      return 404;\n    }\n    if (code === 'CONFLICT') {\n      return 409;\n    }\n\n    // 服务器错误\n    if (code === 'INTERNAL_SERVER_ERROR') {\n      return 500;\n    }\n    if (code === 'SERVICE_UNAVAILABLE') {\n      return 503;\n    }\n\n    // 基于消息判断\n    if (message.includes('not found')) {\n      return 404;\n    }\n    if (message.includes('unauthorized')) {\n      return 401;\n    }\n    if (message.includes('forbidden')) {\n      return 403;\n    }\n    if (message.includes('validation')) {\n      return 400;\n    }\n\n    return 500;\n  }\n}\n\n/**\n * 便捷的响应处理函数\n */\nexport const sendSuccess = <T = JsonValue>(\n  res: Response,\n  data: T,\n  options?: Parameters<typeof ApiResponseHandler.sendSuccess>[2],\n): void => {\n  ApiResponseHandler.sendSuccess(res, data, options);\n};\n\nexport const sendError = (\n  res: Response,\n  error: unknown,\n  options?: Parameters<typeof ApiResponseHandler.sendError>[2],\n): void => {\n  ApiResponseHandler.sendError(res, error, options);\n};\n\nexport const sendPaginated = <T = JsonValue>(\n  res: Response,\n  data: T[],\n  pagination: Parameters<typeof ApiResponseHandler.sendPaginated>[2],\n  options?: Parameters<typeof ApiResponseHandler.sendPaginated>[3],\n): void => {\n  ApiResponseHandler.sendPaginated(res, data, pagination, options);\n};\n\nexport const sendCreated = <T = JsonValue>(\n  res: Response,\n  data: T,\n  options?: Parameters<typeof ApiResponseHandler.sendCreated>[2],\n): void => {\n  ApiResponseHandler.sendCreated(res, data, options);\n};\n\nexport const sendNotFound = (\n  res: Response,\n  message?: string,\n  options?: { requestId?: string },\n): void => {\n  ApiResponseHandler.sendNotFound(res, message, options);\n};\n\nexport const sendValidationError = (\n  res: Response,\n  message: string,\n  options?: Parameters<typeof ApiResponseHandler.sendValidationError>[2],\n): void => {\n  ApiResponseHandler.sendValidationError(res, message, options);\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/appConfig.ts","messages":[{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'existsSync'.","line":55,"column":12,"nodeType":"MemberExpression","messageId":"noSync","endLine":55,"endColumn":25},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'readFileSync'.","line":58,"column":19,"nodeType":"MemberExpression","messageId":"noSync","endLine":58,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5443.","line":69,"column":98,"nodeType":"Literal","messageId":"noMagic","endLine":69,"endColumn":102},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":93,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":95,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2311,2313],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 86400.","line":77,"column":96,"nodeType":"Literal","messageId":"noMagic","endLine":77,"endColumn":101},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 25.","line":99,"column":68,"nodeType":"Literal","messageId":"noMagic","endLine":99,"endColumn":70},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2000.","line":100,"column":77,"nodeType":"Literal","messageId":"noMagic","endLine":100,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":116,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":116,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `ArrayLike<unknown> | { [s: string]: unknown; }`.","line":118,"column":29,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":118,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport { stripJsonComments } from './config';\nimport logger from '@/utils/logger';\nimport { resolveEnvInJsonc, getEnvNumber, getEnvBoolean, getEnvString } from '@/utils/envResolver';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface LoggingExporterConfig {\n  type: 'http' | 'elasticsearch' | 'clickhouse';\n  enabled?: boolean;\n  endpoint?: string;\n  index?: string;\n  table?: string;\n  headers?: Record<string, string>;\n  apiKey?: string;\n  username?: string;\n  password?: string;\n  batchSize?: number;\n  flushIntervalMs?: number;\n}\n\nexport interface AppConfig {\n  logging?: {\n    enabled?: boolean;\n    dir?: string;\n    record?: { normal?: boolean; stream?: boolean };\n    include?: { raw?: boolean; normalized?: boolean };\n    exporters?: LoggingExporterConfig[];\n  };\n  database?: {\n    postgres?: {\n      host: string;\n      port?: number;\n      user: string;\n      password: string;\n      database: string;\n      ssl?: boolean;\n    };\n  };\n  auth?: {\n    tokenTTLSeconds?: number;\n  };\n}\n\nconst projectRoot = path.resolve(__dirname, '../../..');\n\nconst CONFIG_CANDIDATES = [\n  path.join(projectRoot, 'config', 'config.jsonc'),\n  path.join(projectRoot, 'config', 'config.json'),\n];\n\nexport function loadAppConfig(): AppConfig {\n  for (const file of CONFIG_CANDIDATES) {\n    try {\n      if (!fs.existsSync(file)) {\n        continue;\n      }\n      const raw = fs.readFileSync(file, 'utf-8');\n      const stripped = stripJsonComments(raw);\n\n      // 解析环境变量占位符\n      const resolved = resolveEnvInJsonc(stripped);\n\n      const config = JSON.parse(resolved) as AppConfig;\n\n      // 应用环境变量覆盖（环境变量优先级更高）\n      if (config.database?.postgres) {\n        config.database.postgres.host = getEnvString('DB_HOST', config.database.postgres.host);\n        config.database.postgres.port = getEnvNumber('DB_PORT', config.database.postgres.port ?? 5443);\n        config.database.postgres.user = getEnvString('DB_USER', config.database.postgres.user);\n        config.database.postgres.password = getEnvString('DB_PASSWORD', config.database.postgres.password);\n        config.database.postgres.database = getEnvString('DB_NAME', config.database.postgres.database);\n        config.database.postgres.ssl = getEnvBoolean('DB_SSL', config.database.postgres.ssl || false);\n      }\n\n      if (config.auth) {\n        config.auth.tokenTTLSeconds = getEnvNumber('TOKEN_TTL', config.auth.tokenTTLSeconds ?? 86400);\n      }\n\n      return config;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'AppConfig',\n        operation: 'loadAppConfig',\n      });\n      logger.warn('[AppConfig] Failed to parse configuration', { file, error: error.toLogObject() });\n    }\n  }\n  return {};\n}\n\nexport function resolveLoggingExportersFromEnv(): LoggingExporterConfig[] {\n  const exporters: LoggingExporterConfig[] = [];\n  const httpEndpoint = process.env.LOG_EXPORT_HTTP_ENDPOINT;\n  if (httpEndpoint) {\n    const exporter: LoggingExporterConfig = {\n      type: 'http',\n      endpoint: httpEndpoint,\n      batchSize: parseNumberEnv(process.env.LOG_EXPORT_HTTP_BATCH, 25),\n      flushIntervalMs: parseNumberEnv(process.env.LOG_EXPORT_HTTP_INTERVAL, 2000),\n    };\n    const headers = parseHeadersEnv(process.env.LOG_EXPORT_HTTP_HEADERS);\n    if (headers) {\n      exporter.headers = headers;\n    }\n    exporters.push(exporter);\n  }\n  return exporters;\n}\n\nfunction parseHeadersEnv(headers?: string | null): Record<string, string> | undefined {\n  if (!headers) {\n    return undefined;\n  }\n  try {\n    const parsed = JSON.parse(headers);\n    if (parsed && typeof parsed === 'object' && !Array.isArray(parsed)) {\n      return Object.entries(parsed).reduce<Record<string, string>>((acc, [key, value]) => {\n        acc[key] = String(value);\n        return acc;\n      }, {});\n    }\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'AppConfig',\n      operation: 'parseHeadersEnv',\n    });\n    logger.warn('[AppConfig] Failed to parse LOG_EXPORT_HTTP_HEADERS env', { error: error.toLogObject() });\n  }\n  return undefined;\n}\n\nfunction parseNumberEnv(value: string | undefined, fallback: number): number {\n  if (!value) {\n    return fallback;\n  }\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : fallback;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/asyncHandler.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":8,"column":1,"nodeType":"Program","messageId":"max","endLine":8,"endColumn":106},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":60,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 异步处理器工具函数\n * 统一处理异步路由中的错误\n */\n\nimport type { Request, Response, NextFunction } from 'express';\n\nexport function asyncHandler(fn: (req: Request, res: Response, next: NextFunction) => Promise<unknown>) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n}\n\nexport default asyncHandler;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/cadFunctionTools.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[152,155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[152,155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":18,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":18,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":18,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":18,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":18,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":18,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .trim on an `any` value.","line":18,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .replace on an `any` value.","line":18,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Computed name [cleanVarName] resolves to an any value.","line":19,"column":31,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":19,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs/promises';\nimport path from 'path';\n\n/**\n * 读取带注释的 JSONC 配置文件并解析为对象\n * 支持环境变量占位符 ${VAR_NAME}\n */\nexport async function readJsonc<T = any>(configRelativePath: string): Promise<T> {\n  const fullPath = path.isAbsolute(configRelativePath)\n    ? configRelativePath\n    : path.join(__dirname, '../../../', configRelativePath);\n  const raw = await fs.readFile(fullPath, 'utf-8');\n  const stripped = stripJsonComments(raw);\n\n  // 替换环境变量占位符 \"${VAR_NAME}\" 或 ${VAR_NAME}\n  const replaced = stripped.replace(/\"?\\$\\{([^}]+)\\}\"?/g, (match, varName) => {\n    // 清理变量名中的空白字符（包括换行符）\n    const cleanVarName = varName.trim().replace(/\\s+/g, '');\n    const value = process.env[cleanVarName];\n    if (value === undefined) {\n      // 使用logger而非console.warn\n      return match;\n    }\n\n    // 检查原始匹配是否包含引号\n    const hasQuotes = match.startsWith('\"') && match.endsWith('\"');\n\n    // 如果值看起来像数字或布尔值\n    if (value === 'true' || value === 'false' || /^\\d+$/.test(value)) {\n      // 如果原本有引号，移除它们（因为数字和布尔值不需要引号）\n      return value;\n    }\n\n    // 字符串值\n    if (hasQuotes) {\n      // 已经有引号，只替换值\n      return `\"${value.replace(/\"/g, '\\\\\"')}\"`;\n    } else {\n      // 没有引号，直接返回值（通常不会发生）\n      return value;\n    }\n  });\n\n  return JSON.parse(replaced) as T;\n}\n\n/**\n * 简单去除 // 和 /* *\\/ 样式注释\n * 注意：该实现针对配置文件足够，勿用于复杂 JS 代码解析\n */\nexport function stripJsonComments(input: string): string {\n  // 去除多行注释 /* ... */\n  let output = input.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n  // 去除单行注释 //...\n  output = output.replace(/^\\s*\\/\\/.*$/gm, '');\n  return output;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/connectionPoolOptimizer.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30000.","line":128,"column":8,"nodeType":"Literal","messageId":"noMagic","endLine":128,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":163,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":163,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3240,3243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3240,3243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":164,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":164,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .totalCount on an `any` value.","line":164,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":165,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":165,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .idleCount on an `any` value.","line":165,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":166,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":166,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .activeCount on an `any` value.","line":166,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":167,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":167,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .waitingCount on an `any` value.","line":167,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":55},{"ruleId":"max-len","severity":1,"message":"This line has a length of 117. Maximum allowed is 100.","line":171,"column":1,"nodeType":"Program","messageId":"max","endLine":171,"endColumn":118},{"ruleId":"@typescript-eslint/require-await","severity":1,"message":"Async method 'optimizePoolConfig' has no 'await' expression.","line":258,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":258,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":280,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":280,"endColumn":57},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":282,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":282,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":282,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":282,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1.5.","line":282,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":282,"endColumn":63},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":287,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":287,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.6.","line":289,"column":63,"nodeType":"Literal","messageId":"noMagic","endLine":289,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":342,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":342,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":342,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7681,7684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7681,7684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":344,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":344,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .options on an `any` value.","line":344,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":344,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":345,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":345,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .options on an `any` value.","line":345,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":345,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":346,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":346,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .options on an `any` value.","line":346,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":346,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":347,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":347,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .options on an `any` value.","line":347,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":347,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":348,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":348,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .options on an `any` value.","line":348,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":348,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":400,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":400,"endColumn":29},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":405,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":405,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":533,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":533,"endColumn":24}],"suppressedMessages":[{"ruleId":"no-useless-constructor","severity":2,"message":"Useless constructor.","line":89,"column":3,"nodeType":"MethodDefinition","messageId":"noUselessConstructor","endLine":89,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据库连接池优化器\n *\n * 提供连接池监控、动态调整、健康检查等功能\n */\n\nimport type { Pool, PoolClient } from 'pg';\nimport { getPool } from './db';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\n// 连接池配置\nexport interface PoolConfig {\n  /** 最大连接数 */\n  max?: number;\n  /** 最小连接数 */\n  min?: number;\n  /** 空闲超时（毫秒） */\n  idleTimeoutMillis?: number;\n  /** 连接超时（毫秒） */\n  connectionTimeoutMillis?: number;\n  /** 每个连接最大使用次数 */\n  maxUses?: number;\n  /** 连接池名称 */\n  name?: string;\n}\n\n// 连接池统计\nexport interface PoolStats {\n  /** 总连接数 */\n  totalCount: number;\n  /** 空闲连接数 */\n  idleCount: number;\n  /** 活跃连接数 */\n  activeCount: number;\n  /** 等待连接数 */\n  waitingCount: number;\n  /** 总请求数 */\n  totalRequests: number;\n  /** 平均等待时间 */\n  averageWaitTime: number;\n  /** 最大等待时间 */\n  maxWaitTime: number;\n  /** 连接复用率 */\n  reuseRate: number;\n}\n\n// 连接健康状态\nexport interface ConnectionHealth {\n  /** 连接ID */\n  connectionId: string;\n  /** 创建时间 */\n  createdAt: number;\n  /** 最后使用时间 */\n  lastUsedAt: number;\n  /** 使用次数 */\n  useCount: number;\n  /** 是否健康 */\n  isHealthy: boolean;\n  /** 响应时间 */\n  responseTime?: number;\n  /** 错误次数 */\n  errorCount: number;\n}\n\n/**\n * 连接池优化器\n */\nexport class ConnectionPoolOptimizer {\n  private static instance: ConnectionPoolOptimizer;\n  private pool: Pool | null = null;\n  private stats: PoolStats = {\n    totalCount: 0,\n    idleCount: 0,\n    activeCount: 0,\n    waitingCount: 0,\n    totalRequests: 0,\n    averageWaitTime: 0,\n    maxWaitTime: 0,\n    reuseRate: 0,\n  };\n  private readonly connectionHealth = new Map<string, ConnectionHealth>();\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private healthCheckInterval: NodeJS.Timeout | null = null;\n  private isMonitoring = false;\n\n  // 私有构造函数确保单例模式 - 延迟初始化连接池\n  // eslint-disable-next-line no-useless-constructor\n  private constructor() {}\n\n  static getInstance(): ConnectionPoolOptimizer {\n    if (!ConnectionPoolOptimizer.instance) {\n      ConnectionPoolOptimizer.instance = new ConnectionPoolOptimizer();\n    }\n    return ConnectionPoolOptimizer.instance;\n  }\n\n  /**\n   * 获取数据库连接池（延迟初始化）\n   */\n  private getPool(): Pool {\n    if (!this.pool) {\n      this.pool = getPool();\n    }\n    return this.pool;\n  }\n\n  /**\n   * 启动连接池监控\n   */\n  startMonitoring(): void {\n    if (this.isMonitoring) {\n      return;\n    }\n\n    logger.info('🚀 启动连接池监控');\n\n    this.isMonitoring = true;\n\n    // 定期统计连接池状态\n    this.monitoringInterval = setInterval(() => {\n      this.updatePoolStats();\n    }, 5000); // 每5秒更新一次\n\n    // 定期健康检查\n    this.healthCheckInterval = setInterval(() => {\n      void this.performHealthCheck();\n    }, 30000); // 每30秒检查一次\n\n    // 连接池事件监听\n    this.setupPoolEventListeners();\n  }\n\n  /**\n   * 停止连接池监控\n   */\n  stopMonitoring(): void {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    logger.info('⏹️ 停止连接池监控');\n\n    this.isMonitoring = false;\n\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n  }\n\n  /**\n   * 更新连接池统计\n   */\n  private updatePoolStats(): void {\n    try {\n      const pool = this.getPool();\n      const poolStats = pool as any;\n      this.stats.totalCount = poolStats.totalCount ?? 0;\n      this.stats.idleCount = poolStats.idleCount ?? 0;\n      this.stats.activeCount = poolStats.activeCount ?? 0;\n      this.stats.waitingCount = poolStats.waitingCount ?? 0;\n\n      // 计算复用率\n      if (this.stats.totalRequests > 0) {\n        this.stats.reuseRate = ((this.stats.totalRequests - this.stats.totalCount) / this.stats.totalRequests) * 100;\n      }\n\n      logger.debug('连接池状态', {\n        总连接数: this.stats.totalCount,\n        空闲连接数: this.stats.idleCount,\n        活跃连接数: this.stats.activeCount,\n        等待连接数: this.stats.waitingCount,\n        复用率: `${this.stats.reuseRate.toFixed(1)}%`,\n        总请求数: this.stats.totalRequests,\n      });\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ConnectionPoolOptimizer',\n        operation: 'updatePoolStats',\n      });\n      logger.error('更新连接池统计失败', { error: error.toLogObject() });\n    }\n  }\n\n  /**\n   * 执行健康检查\n   */\n  private async performHealthCheck(): Promise<void> {\n    try {\n      const pool = this.getPool();\n      const client = await pool.connect();\n\n      const healthCheckQuery = 'SELECT 1';\n      const startTime = performance.now();\n\n      await client.query(healthCheckQuery);\n\n      const responseTime = performance.now() - startTime;\n\n      client.release();\n\n      logger.debug('连接池健康检查通过', { responseTime: `${responseTime.toFixed(2)}ms` });\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ConnectionPoolOptimizer',\n        operation: 'performHealthCheck',\n      });\n      logger.error('连接池健康检查失败', { error: error.toLogObject() });\n    }\n  }\n\n  /**\n   * 设置连接池事件监听\n   */\n  private setupPoolEventListeners(): void {\n    try {\n      const pool = this.getPool();\n\n      // 连接获取事件\n      pool.on('acquire', () => {\n        this.stats.totalRequests++;\n      });\n\n      // 连接释放事件\n      pool.on('release', () => {\n        // 连接释放时的处理\n      });\n\n      // 连接错误事件\n      pool.on('error', (error: Error) => {\n        logger.error('连接池错误', { error });\n      });\n\n      // 连接移除事件\n      pool.on('remove', () => {\n        logger.info('连接池连接已移除');\n      });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ConnectionPoolOptimizer',\n        operation: 'setupPoolEventListeners',\n      });\n      logger.error('设置连接池事件监听失败', { error: error.toLogObject() });\n    }\n  }\n\n  /**\n   * 动态调整连接池配置\n   */\n  async optimizePoolConfig(): Promise<void> {\n    const stats = this.getPoolStats();\n\n    logger.info('🔧 开始优化连接池配置', { stats });\n\n    // 基于当前统计动态调整\n    const newConfig = this.calculateOptimalConfig(stats);\n\n    logger.info('建议的连接池配置', { newConfig });\n\n    // 注意：实际应用中可能需要重新创建连接池\n    // 这里只记录建议，避免影响正在运行的连接\n  }\n\n  /**\n   * 计算最优配置\n   */\n  private calculateOptimalConfig(stats: PoolStats): PoolConfig {\n    const config: PoolConfig = {};\n\n    // 基于等待队列长度调整最大连接数\n    if (stats.waitingCount > 10) {\n      config.max = Math.min(100, (stats.totalCount ?? 20) * 2);\n    } else if (stats.waitingCount > 5) {\n      config.max = Math.min(50, (stats.totalCount ?? 20) * 1.5);\n    }\n\n    // 基于活跃连接数调整最小连接数\n    if (stats.activeCount > 30) {\n      config.min = Math.min(20, Math.ceil(stats.activeCount * 0.8));\n    } else if (stats.activeCount > 10) {\n      config.min = Math.min(10, Math.ceil(stats.activeCount * 0.6));\n    }\n\n    // 基于空闲连接数调整空闲超时\n    if (stats.idleCount > stats.activeCount * 2) {\n      config.idleTimeoutMillis = 15000; // 15秒\n    } else if (stats.idleCount > stats.activeCount) {\n      config.idleTimeoutMillis = 30000; // 30秒\n    }\n\n    return config;\n  }\n\n  /**\n   * 获取连接池统计\n   */\n  getPoolStats(): PoolStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * 获取连接健康状态\n   */\n  getConnectionHealth(): ConnectionHealth[] {\n    return Array.from(this.connectionHealth.values());\n  }\n\n  /**\n   * 获取连接池详细信息\n   */\n  getPoolDetails(): {\n    stats: PoolStats;\n    health: ConnectionHealth[];\n    isMonitoring: boolean;\n    poolConfig: PoolConfig;\n  } {\n    const stats = this.getPoolStats();\n    const health = this.getConnectionHealth();\n\n    return {\n      stats,\n      health,\n      isMonitoring: this.isMonitoring,\n      poolConfig: this.getCurrentPoolConfig(),\n    };\n  }\n\n  /**\n   * 获取当前连接池配置\n   */\n  private getCurrentPoolConfig(): PoolConfig {\n    try {\n      const pool = this.getPool();\n      const poolOptions = pool as any;\n      return {\n        max: poolOptions.options?.max,\n        min: poolOptions.options?.min,\n        idleTimeoutMillis: poolOptions.options?.idleTimeoutMillis,\n        connectionTimeoutMillis: poolOptions.options?.connectionTimeoutMillis,\n        maxUses: poolOptions.options?.maxUses,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ConnectionPoolOptimizer',\n        operation: 'getCurrentPoolConfig',\n      });\n      logger.error('获取连接池配置失败', { error: error.toLogObject() });\n      return {};\n    }\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats(): void {\n    this.stats = {\n      totalCount: 0,\n      idleCount: 0,\n      activeCount: 0,\n      waitingCount: 0,\n      totalRequests: 0,\n      averageWaitTime: 0,\n      maxWaitTime: 0,\n      reuseRate: 0,\n    };\n\n    this.connectionHealth.clear();\n    logger.info('连接池统计信息已重置');\n  }\n\n  /**\n   * 获取性能建议\n   */\n  getPerformanceRecommendations(): string[] {\n    const recommendations: string[] = [];\n    const stats = this.getPoolStats();\n\n    // 基于等待队列的建议\n    if (stats.waitingCount > 10) {\n      recommendations.push('等待队列过长，建议增加最大连接数');\n    }\n\n    // 基于连接利用率的建议\n    const utilization = stats.totalCount > 0 ? (stats.activeCount / stats.totalCount) * 100 : 0;\n    if (utilization > 90) {\n      recommendations.push('连接利用率过高，建议增加连接池大小');\n    } else if (utilization < 30) {\n      recommendations.push('连接利用率较低，可以考虑减少最小连接数以节省资源');\n    }\n\n    // 基于复用率的建议\n    if (stats.reuseRate < 50) {\n      recommendations.push('连接复用率较低，建议检查是否存在连接泄漏');\n    }\n\n    // 基于空闲连接数的建议\n    if (stats.idleCount > stats.activeCount * 3) {\n      recommendations.push('空闲连接过多，建议减少空闲超时时间');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 生成性能报告\n   */\n  generatePerformanceReport(): string {\n    const stats = this.getPoolStats();\n    const recommendations = this.getPerformanceRecommendations();\n    const health = this.getConnectionHealth();\n\n    const healthyConnections = health.filter(h => h.isHealthy).length;\n    const unhealthyConnections = health.length - healthyConnections;\n\n    return `\n连接池性能报告\n================\n\n📊 基础统计\n- 总连接数: ${stats.totalCount}\n- 空闲连接数: ${stats.idleCount}\n- 活跃连接数: ${stats.activeCount}\n- 等待连接数: ${stats.waitingCount}\n- 总请求数: ${stats.totalRequests}\n- 连接复用率: ${stats.reuseRate.toFixed(1)}%\n\n🏥️ 健康状态\n- 健康连接: ${healthyConnections}\n- 不健康连接: ${unhealthyConnections}\n\n💡 性能建议\n${recommendations.map(rec => `- ${rec}`).join('\\n')}\n\n📈 监控状态\n- 监控中: ${this.isMonitoring ? '是' : '否'}\n- 上次更新: ${new Date().toLocaleString()}\n    `.trim();\n  }\n\n  /**\n   * 强制清理连接池\n   */\n  async forceCleanup(): Promise<void> {\n    try {\n      const pool = this.getPool();\n      logger.info('🧹 开始清理连接池...');\n\n      // 结束所有空闲连接\n      await pool.end();\n\n      // 重新初始化（这里需要重新调用initDB）\n      logger.info('✅ 连接池清理完成');\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ConnectionPoolOptimizer',\n        operation: 'cleanupPool',\n      });\n      logger.error('❌ 连接池清理失败', { error: error.toLogObject() });\n      throw error;\n    }\n  }\n\n  /**\n   * 预热连接池\n   */\n  async warmupPool(connectionCount = 5): Promise<void> {\n    try {\n      const pool = this.getPool();\n      logger.info(`🔥 预热连接池，目标连接数: ${connectionCount}`);\n\n      const connections: PoolClient[] = [];\n\n      // 创建多个连接\n      for (let i = 0; i < connectionCount; i++) {\n        const client = await pool.connect();\n        connections.push(client);\n      }\n\n      // 执行简单查询验证连接\n      await Promise.all(\n        connections.map(async (client) => {\n          await client.query('SELECT 1');\n        }),\n      );\n\n      // 释放所有连接\n      connections.forEach(client => client.release());\n\n      logger.info(`✅ 连接池预热完成，预热连接数: ${connectionCount}`);\n\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'ConnectionPoolOptimizer',\n        operation: 'warmupPool',\n      });\n      logger.error('❌ 连接池预热失败', { error: error.toLogObject() });\n      throw error;\n    }\n  }\n\n  /**\n   * 测试连接池性能\n   */\n  async testPoolPerformance(concurrency = 10): Promise<{\n    success: number;\n    failed: number;\n    averageTime: number;\n    totalTime: number;\n  }> {\n    logger.info(`🧪 测试连接池性能，并发数: ${concurrency}`);\n\n    const startTime = performance.now();\n    const promises: Promise<void>[] = [];\n\n    for (let i = 0; i < concurrency; i++) {\n      promises.push(\n        (async () => {\n          try {\n            const pool = this.getPool();\n            const client = await pool.connect();\n            await client.query('SELECT 1, pg_sleep(0.1)');\n            client.release();\n          } catch (unknownError: unknown) {\n            const error = createErrorFromUnknown(unknownError, {\n              component: 'ConnectionPoolOptimizer',\n              operation: 'testPoolPerformance',\n            });\n            // 记录失败但不抛出异常\n          }\n        })(),\n      );\n    }\n\n    const results = await Promise.allSettled(promises);\n    const totalTime = performance.now() - startTime;\n\n    // 统计结果\n    const success = results.filter(r => r.status === 'fulfilled').length;\n    const failed = results.filter(r => r.status === 'rejected').length;\n    const averageTime = totalTime / concurrency;\n\n    logger.info('🧪 连接池性能测试完成', {\n      成功: success,\n      失败: failed,\n      并发数: concurrency,\n      总时间: `${totalTime.toFixed(2)}ms`,\n      平均时间: `${averageTime.toFixed(2)}ms`,\n    });\n\n    return {\n      success,\n      failed,\n      averageTime,\n      totalTime,\n    };\n  }\n}\n\n// 创建单例实例\nexport const connectionPoolOptimizer = ConnectionPoolOptimizer.getInstance();\n\nexport default connectionPoolOptimizer;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/db.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Async function 'initDB' has a complexity of 23. Maximum allowed is 12.","line":121,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":701,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":176,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":176,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4577,4580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4577,4580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4885,4888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4885,4888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":189,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":189,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":189,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":190,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":190,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":190,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":194,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":205,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":205,"endColumn":71},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5467,5470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5467,5470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5615,5653],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5679,5737],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5822,5871],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5996,5999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5996,5999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6013,6046],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":221,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":221,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6057,6103],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":221,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6114,6163],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":222,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":58},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":226,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":226,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6259,6292],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6333,6336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6333,6336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6348,6390],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6399,6447],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":230,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":230,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":231,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":231,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6456,6507],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":231,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":231,"endColumn":58},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6516,6559],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6649,6683],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6730,6770],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":241,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":241,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6777,6833],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .constructor on an `any` value.","line":241,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":241,"endColumn":56},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":242,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":242,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6840,6879],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6953,6981],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":255,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":255,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7096,7145],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5432.","line":259,"column":22,"nodeType":"Literal","messageId":"noMagic","endLine":259,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":263,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":263,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":263,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7392,7395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7392,7395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":266,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":266,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7483,7485],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":267,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":267,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7567,7569],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":281,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":281,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8085,8116],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8119,8200],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":290,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":290,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8364,8397],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":293,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":293,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8456,8489],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":295,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":295,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8592,8652],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .current_database on an `any` value.","line":295,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":295,"endColumn":63},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":296,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":296,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8657,8712],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .current_user on an `any` value.","line":296,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":296,"endColumn":58},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8717,8775],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .version on an `any` value.","line":297,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":297,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8807,8837],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8861,8864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8861,8864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":301,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":301,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8872,8904],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8909,8966],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .constructor on an `any` value.","line":302,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":302,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":303,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":303,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8971,9016],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .code on an `any` value.","line":303,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":303,"endColumn":48},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":304,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":304,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9021,9069],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":304,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":304,"endColumn":51},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":311,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":311,"endColumn":19,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9208,9209],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":312,"column":13,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":312,"endColumn":18,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9238,9239],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":313,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":313,"endColumn":21,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9270,9271],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":326,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":326,"endColumn":19,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9548,9549],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":327,"column":13,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":327,"endColumn":18,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9578,9579],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":353,"column":6,"nodeType":"Literal","messageId":"noMagic","endLine":353,"endColumn":11},{"ruleId":"@typescript-eslint/no-misused-promises","severity":1,"message":"Promise returned in function argument where a void return was expected.","line":356,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":367,"endColumn":4},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 180_000.","line":367,"column":6,"nodeType":"Literal","messageId":"noMagic","endLine":367,"endColumn":13},{"ruleId":"complexity","severity":1,"message":"Async arrow function has a complexity of 16. Maximum allowed is 12.","line":370,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":667,"endColumn":4},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":653,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":653,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[19883,19885],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 16.","line":659,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":659,"endColumn":47},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":714,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":714,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[21824,21826],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 16.","line":714,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":714,"endColumn":49},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'existsSync'.","line":741,"column":11,"nodeType":"MemberExpression","messageId":"noSync","endLine":741,"endColumn":24},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'readFileSync'.","line":742,"column":23,"nodeType":"MemberExpression","messageId":"noSync","endLine":742,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":758,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":758,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23293,23296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23293,23296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":760,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":760,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":766,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":766,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":766,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":766,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23454,23457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23454,23457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agents on an `any` value.","line":766,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":766,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .agents on an `any` value.","line":766,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":766,"endColumn":70},{"ruleId":"complexity","severity":1,"message":"Async arrow function has a complexity of 13. Maximum allowed is 12.","line":776,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":845,"endColumn":4},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":778,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":778,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[23974,23976],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":819,"column":53,"nodeType":"Property","messageId":"anyAssignment","endLine":819,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":819,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":819,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":819,"column":67,"nodeType":"Property","messageId":"anyAssignment","endLine":819,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":819,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":819,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":821,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":821,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":822,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":822,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":823,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":823,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .provider on an `any` value.","line":824,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":824,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .endpoint on an `any` value.","line":825,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":825,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .apiKey on an `any` value.","line":826,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":826,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .appId on an `any` value.","line":827,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":827,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .model on an `any` value.","line":828,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":828,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .maxTokens on an `any` value.","line":829,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":829,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .temperature on an `any` value.","line":830,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":830,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .systemPrompt on an `any` value.","line":831,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":831,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .capabilities on an `any` value.","line":832,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":832,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .rateLimit on an `any` value.","line":833,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":833,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .features on an `any` value.","line":834,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":834,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .isActive on an `any` value.","line":836,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":836,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":840,"column":56,"nodeType":"Property","messageId":"anyAssignment","endLine":840,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":840,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":840,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":103,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Pool } from 'pg';\nimport crypto from 'crypto';\nimport path from 'path';\nimport fs from 'fs';\nimport { readJsonc } from '@/utils/config';\nimport { deepReplaceEnvVariables } from '@/utils/envHelper';\nimport logger from '@/utils/logger';\nimport MigrationManager from './MigrationManager';\nimport { AppConfig } from '@/config/AppConfig'; // ✅ 统一配置服务\nimport { createErrorFromUnknown } from '@/types/errors';\n\n// ===== 常量定义 =====\n/** PostgreSQL默认端口 */\nconst DEFAULT_POSTGRES_PORT = 5432;\n\nexport interface PgConfig {\n  database?: {\n    postgres?: {\n      host: string;\n      port?: number | string;\n      user: string;\n      password: string;\n      database: string;\n      ssl?: boolean | string;\n    }\n  };\n  auth?: {\n    tokenTTLSeconds?: number;\n  };\n}\n\ntype PostgresConfig = NonNullable<NonNullable<PgConfig['database']>['postgres']>;\nexport type NormalizedPostgresConfig = Omit<PostgresConfig, 'port' | 'ssl'> & {\n  port?: number;\n  ssl?: boolean;\n};\n\nconst PLACEHOLDER_REGEX = /\\$\\{[^}]+\\}/;\n\nfunction isPlaceholder(value: string): boolean {\n  return PLACEHOLDER_REGEX.test(value);\n}\n\nfunction parseOptionalNumber(value: unknown, fieldName: string): number | undefined {\n  if (typeof value === 'number') {\n    return Number.isFinite(value) ? value : undefined;\n  }\n\n  if (typeof value === 'string') {\n    const trimmed = value.trim();\n    if (!trimmed || isPlaceholder(trimmed)) {\n      return undefined;\n    }\n\n    const parsed = Number.parseInt(trimmed, 10);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n\n    logger.warn(`[initDB] 无法解析数据库配置字段 ${fieldName} 为数字`, { value });\n  }\n\n  return undefined;\n}\n\nfunction parseOptionalBoolean(value: unknown, fieldName: string): boolean | undefined {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    const trimmed = value.trim();\n    if (!trimmed || isPlaceholder(trimmed)) {\n      return undefined;\n    }\n\n    const normalized = trimmed.toLowerCase();\n    if (['1', 'true', 'yes', 'on'].includes(normalized)) {\n      return true;\n    }\n    if (['0', 'false', 'no', 'off'].includes(normalized)) {\n      return false;\n    }\n\n    logger.warn(`[initDB] 无法解析数据库配置字段 ${fieldName} 为布尔值`, { value });\n  }\n\n  return undefined;\n}\n\nexport function normalizePostgresConfig(pg: PostgresConfig): NormalizedPostgresConfig {\n  const config: NormalizedPostgresConfig = {\n    host: pg.host,\n    user: pg.user,\n    password: pg.password,\n    database: pg.database,\n  };\n\n  const port = parseOptionalNumber(pg.port, 'port');\n  if (port !== undefined) {\n    config.port = port;\n  }\n\n  const ssl = parseOptionalBoolean(pg.ssl, 'ssl');\n  if (ssl !== undefined) {\n    config.ssl = ssl;\n  }\n\n  return config;\n}\n\nlet pool: Pool | null = null;\n\nexport function getPool(): Pool {\n  if (!pool) {\n    throw new Error('DB_NOT_INITIALIZED');\n  }\n  return pool;\n}\n\nexport async function initDB(): Promise<void> {\n  logger.info('[initDB] 开始初始化数据库...');\n\n  // ✅ 使用统一配置服务（从环境变量读取，无硬编码）\n  const dbConfig = AppConfig.getDatabaseConfig();\n  const rawPg: PostgresConfig = {\n    host: dbConfig.host,\n    port: dbConfig.port,\n    user: dbConfig.user,\n    password: dbConfig.password,\n    database: dbConfig.database,\n    ssl: dbConfig.ssl,\n  };\n\n  // 如果环境变量中的用户名或密码是默认值，尝试读取配置文件作为后备\n  if (rawPg.user === 'postgres' || rawPg.password === '123456' || rawPg.password === 'password') {\n    logger.info('[initDB] 检测到默认配置，尝试从配置文件加载数据库配置...');\n    try {\n      const rawCfg = await readJsonc<PgConfig>('config/config.jsonc');\n      const cfg = deepReplaceEnvVariables(rawCfg);\n      const configPg = cfg.database?.postgres;\n      if (configPg) {\n        Object.assign(rawPg, configPg);\n        logger.info('[initDB] 配置文件加载成功');\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'db',\n        operation: 'initDB.configLoad',\n      });\n      logger.warn('[initDB] 配置文件加载失败，使用环境变量默认值', { error: error.toLogObject() });\n    }\n  }\n\n  const pg = normalizePostgresConfig(rawPg);\n  logger.info('[initDB] 数据库配置详情', {\n    host: pg.host,\n    port: pg.port,\n    user: pg.user,\n    password: pg.password ? '***' : '(empty)',\n    database: pg.database,\n    ssl: pg.ssl,\n  });\n\n  // 尝试连接目标数据库，如果不存在则自动创建\n  logger.info(`[initDB] 尝试连接到目标数据库 \"${pg.database}\"...`);\n\n  // 先创建一个临时连接池测试目标数据库是否存在\n  logger.debug('[initDB] 创建临时连接池测试目标数据库...');\n  const testPool = new Pool({\n    host: pg.host,\n    port: pg.port ?? DEFAULT_POSTGRES_PORT,\n    user: pg.user,\n    password: pg.password,\n    database: pg.database,\n    ssl: pg.ssl ? { rejectUnauthorized: false } as any : undefined,\n    connectionTimeoutMillis: 5000,\n  });\n\n  let databaseExists = false;\n  try {\n    logger.debug('[initDB] 测试连接到目标数据库...');\n    const testClient = await testPool.connect();\n    logger.info('[initDB] ✓ 目标数据库存在且可连接');\n    testClient.release();\n    databaseExists = true;\n  } catch (testError: any) {\n    logger.debug('[initDB] 连接目标数据库失败', {\n      code: testError.code,\n      message: testError.message,\n    });\n\n    // 错误码 3D000 表示数据库不存在\n    if (testError.code === '3D000') {\n      logger.info(`[initDB] 数据库 \"${pg.database}\" 不存在，尝试创建...`);\n\n      // 连接到postgres默认数据库来创建目标数据库\n      logger.debug('[initDB] 连接到postgres默认数据库...');\n      const postgresPool = new Pool({\n        host: pg.host,\n        port: pg.port ?? DEFAULT_POSTGRES_PORT,\n        user: pg.user,\n        password: pg.password,\n        database: 'postgres',\n        ssl: pg.ssl ? { rejectUnauthorized: false } as any : undefined,\n        connectionTimeoutMillis: 5000,\n      });\n\n      try {\n        const postgresClient = await postgresPool.connect();\n        console.log('[DB] ✓ 已连接到postgres数据库');\n\n        try {\n          console.log(`[DB] 执行CREATE DATABASE \"${pg.database}\"...`);\n          await postgresClient.query(`CREATE DATABASE \"${pg.database}\"`);\n          console.log(`[DB] ✓ 数据库 \"${pg.database}\" 创建成功！`);\n          logger.info(`[initDB] 数据库 \"${pg.database}\" 创建成功`);\n          databaseExists = true;\n        } catch (createError: any) {\n          console.error('[DB] ✗ 创建数据库失败！');\n          console.error('[DB] 错误代码:', createError.code);\n          console.error('[DB] 错误消息:', createError.message);\n          throw createError;\n        } finally {\n          postgresClient.release();\n          console.log('[DB] 释放postgres连接');\n        }\n      } catch (postgresError: any) {\n        console.error('[DB] ✗ 无法连接到postgres数据库！');\n        console.error('[DB] 错误代码:', postgresError.code);\n        console.error('[DB] 错误消息:', postgresError.message);\n        console.error('[DB] 完整错误:', postgresError);\n        throw postgresError;\n      } finally {\n        await postgresPool.end();\n        console.log('[DB] 关闭postgres连接池');\n      }\n    } else {\n      // 其他错误，直接抛出\n      console.error('[DB] ✗ 连接失败（非数据库不存在错误）');\n      console.error('[DB] 错误类型:', testError.constructor.name);\n      console.error('[DB] 完整错误:', testError);\n      throw testError;\n    }\n  } finally {\n    await testPool.end();\n    console.log('[DB] 关闭测试连接池');\n  }\n\n  if (!databaseExists) {\n    throw new Error(`数据库 \"${pg.database}\" 不存在且创建失败`);\n  }\n\n  // 现在连接到目标数据库（已确认存在）\n  console.log(`[DB] 创建正式连接池到 \"${pg.database}\"...`);\n  logger.info(`[initDB] 连接到目标数据库 \"${pg.database}\"...`);\n  pool = new Pool({\n    host: pg.host,\n    port: pg.port ?? 5432,\n    user: pg.user,\n    password: pg.password,\n    database: pg.database,\n    ssl: pg.ssl ? { rejectUnauthorized: false } as any : undefined,\n\n    // ✅ T006: 动态连接池配置（环境变量控制）\n    max: parseInt(process.env.DB_POOL_MAX || '20'),          // 最大连接数（优化为20，避免过多连接）\n    min: parseInt(process.env.DB_POOL_MIN || '2'),           // 最小连接数（优化为2）\n    idleTimeoutMillis: 300_000,      // 🔧 5分钟空闲超时（避免长时间空闲导致断开）\n    connectionTimeoutMillis: 10_000, // 10秒连接超时（远程数据库需要更长时间）\n    query_timeout: 30_000,           // 30秒查询超时（复杂查询需要更长时间）\n    maxUses: 5000,                   // 每个连接最多使用5000次后回收\n\n    // 🔧 TCP Keepalive配置（防止远程服务器/防火墙关闭空闲连接）\n    keepAlive: true,                 // 启用TCP keepalive\n    keepAliveInitialDelayMillis: 10_000,  // 🔧 10秒后开始发送keepalive包（更频繁的心跳）\n\n    // ✅ 应用标识\n    application_name: 'llmchat-backend',\n  });\n\n  console.log('[DB] ✓ 正式连接池已创建');\n  console.log('[DB] 连接池配置: min=' + pool.options.min + ', max=' + pool.options.max);\n  logger.info('[initDB] 数据库连接池创建成功', {\n    min: pool.options.min,\n    max: pool.options.max,\n    idleTimeout: pool.options.idleTimeoutMillis,\n  });\n\n  // 最终验证连接\n  console.log('[DB] 最终验证数据库连接...');\n  try {\n    const finalClient = await pool.connect();\n    console.log('[DB] ✓ 数据库连接验证成功！');\n    const result = await finalClient.query('SELECT current_database(), current_user, version()');\n    console.log('[DB] 当前数据库:', result.rows[0].current_database);\n    console.log('[DB] 当前用户:', result.rows[0].current_user);\n    console.log('[DB] PostgreSQL版本:', result.rows[0].version);\n    finalClient.release();\n    console.log('[DB] ✓ 验证连接已释放');\n  } catch (finalError: any) {\n    console.error('[DB] ✗ 最终验证失败！');\n    console.error('[DB] 错误类型:', finalError.constructor.name);\n    console.error('[DB] 错误代码:', finalError.code);\n    console.error('[DB] 错误消息:', finalError.message);\n    throw finalError;\n  }\n\n  // ✅ T006: 连接池事件监听\n  pool.on('connect', (_client) => {\n    logger.info('DB Pool: 新连接已建立', {\n      total: pool!.totalCount,\n      idle: pool!.idleCount,\n      waiting: pool!.waitingCount,\n    });\n  });\n\n  pool.on('acquire', (_client) => {\n    // 仅在debug模式记录（避免日志洪水）\n    if (process.env.LOG_LEVEL === 'debug') {\n      logger.debug('DB Pool: 连接已获取');\n    }\n  });\n\n  pool.on('remove', (_client) => {\n    logger.info('DB Pool: 连接已移除', {\n      total: pool!.totalCount,\n      idle: pool!.idleCount,\n    });\n  });\n\n  pool.on('error', (err, _client) => {\n    logger.error('DB Pool: 意外错误', {\n      error: err.message,\n      stack: err.stack,\n    });\n\n    // 🔧 如果是连接终止错误，尝试恢复连接池\n    if (err.message.includes('Connection terminated') || err.message.includes('ECONNRESET')) {\n      logger.warn('DB Pool: 检测到连接断开，连接池将自动创建新连接');\n      // node-postgres会自动重连，这里只记录日志\n    }\n  });\n\n  // ✅ T006: 定期报告连接池状态（每分钟）\n  setInterval(() => {\n    if (pool && pool.totalCount > 0) {\n      logger.info('DB Pool Status', {\n        total: pool.totalCount,\n        idle: pool.idleCount,\n        waiting: pool.waitingCount,\n      });\n    }\n  }, 60000);\n\n  // 🔧 主动连接健康检查（每3分钟执行一次简单查询保持连接活跃）\n  setInterval(async () => {\n    if (pool) {\n      try {\n        await pool.query('SELECT 1');\n        logger.debug('DB Pool: 连接健康检查通过');\n      } catch (err: unknown) {\n        logger.warn('DB Pool: 健康检查失败，连接池将自动恢复', {\n          error: err instanceof Error ? err.message : String(err),\n        });\n      }\n    }\n  }, 180_000); // 3分钟\n\n  // 建表（若不存在）\n  await withClient(async (client) => {\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        username TEXT UNIQUE NOT NULL,\n        email TEXT UNIQUE,\n        email_verified BOOLEAN DEFAULT false,\n        password_salt TEXT NOT NULL,\n        password_hash TEXT NOT NULL,\n        role TEXT DEFAULT 'user',\n        status TEXT DEFAULT 'active',\n        created_at TIMESTAMPTZ DEFAULT NOW(),\n        updated_at TIMESTAMPTZ DEFAULT NOW()\n      );\n    `);\n\n    // 移除明文密码列（安全修复）\n    try {\n      await client.query('ALTER TABLE users DROP COLUMN IF EXISTS password_plain;');\n      logger.info('[initDB] ✅ 已移除不安全的明文密码列');\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'db',\n        operation: 'initDB.dropColumn',\n      });\n      // 列可能不存在，忽略错误\n      logger.info('[initDB] 明文密码列不存在或已移除', error.toLogObject());\n    }\n\n    // Schema演进：添加缺失的列（兼容旧版本数据库）\n    try {\n      // 检查email列是否存在\n      const emailColumnCheck = await client.query(`\n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = 'users' AND column_name = 'email'\n      `);\n\n      if (emailColumnCheck.rows.length === 0) {\n        await client.query('ALTER TABLE users ADD COLUMN email TEXT;');\n        await client.query('CREATE UNIQUE INDEX IF NOT EXISTS idx_users_email ON users(email) WHERE email IS NOT NULL;');\n        logger.info('[initDB] ✅ 添加email列');\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'db',\n        operation: 'initDB.addEmailColumn',\n      });\n      logger.warn('[initDB] email列添加失败', { error: error.toLogObject() });\n    }\n\n    try {\n      // 检查email_verified列是否存在\n      const emailVerifiedCheck = await client.query(`\n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = 'users' AND column_name = 'email_verified'\n      `);\n\n      if (emailVerifiedCheck.rows.length === 0) {\n        await client.query('ALTER TABLE users ADD COLUMN email_verified BOOLEAN DEFAULT false;');\n        logger.info('[initDB] ✅ 添加email_verified列');\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'db',\n        operation: 'initDB.addEmailVerifiedColumn',\n      });\n      logger.warn('[initDB] email_verified列添加失败', { error: error.toLogObject() });\n    }\n\n    try {\n      // 添加failed_login_attempts列\n      const failedLoginCheck = await client.query(`\n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = 'users' AND column_name = 'failed_login_attempts'\n      `);\n\n      if (failedLoginCheck.rows.length === 0) {\n        await client.query('ALTER TABLE users ADD COLUMN failed_login_attempts INTEGER DEFAULT 0;');\n        logger.info('[initDB] ✅ 添加failed_login_attempts列');\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'db',\n        operation: 'initDB.addFailedLoginAttemptsColumn',\n      });\n      logger.warn('[initDB] failed_login_attempts列添加失败', { error: error.toLogObject() });\n    }\n\n    try {\n      // 添加locked_until列\n      const lockedUntilCheck = await client.query(`\n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = 'users' AND column_name = 'locked_until'\n      `);\n\n      if (lockedUntilCheck.rows.length === 0) {\n        await client.query('ALTER TABLE users ADD COLUMN locked_until TIMESTAMPTZ;');\n        logger.info('[initDB] ✅ 添加locked_until列');\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'db',\n        operation: 'initDB.addLockedUntilColumn',\n      });\n      logger.warn('[initDB] locked_until列添加失败', { error: error.toLogObject() });\n    }\n\n    try {\n      // 添加last_login_at列\n      const lastLoginAtCheck = await client.query(`\n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = 'users' AND column_name = 'last_login_at'\n      `);\n\n      if (lastLoginAtCheck.rows.length === 0) {\n        await client.query('ALTER TABLE users ADD COLUMN last_login_at TIMESTAMPTZ;');\n        logger.info('[initDB] ✅ 添加last_login_at列');\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'db',\n        operation: 'initDB.addLastLoginAtColumn',\n      });\n      logger.warn('[initDB] last_login_at列添加失败', { error: error.toLogObject() });\n    }\n\n    try {\n      // 添加last_login_ip列\n      const lastLoginIpCheck = await client.query(`\n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = 'users' AND column_name = 'last_login_ip'\n      `);\n\n      if (lastLoginIpCheck.rows.length === 0) {\n        await client.query('ALTER TABLE users ADD COLUMN last_login_ip VARCHAR(45);');\n        logger.info('[initDB] ✅ 添加last_login_ip列');\n      }\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'db',\n        operation: 'initDB.addLastLoginIpColumn',\n      });\n      logger.warn('[initDB] last_login_ip列添加失败', { error: error.toLogObject() });\n    }\n\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS logs (\n        id SERIAL PRIMARY KEY,\n        timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        level TEXT NOT NULL,\n        message TEXT NOT NULL\n      );\n    `);\n\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS agent_configs (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        description TEXT,\n        provider TEXT NOT NULL,\n        endpoint TEXT NOT NULL,\n        api_key TEXT NOT NULL,\n        app_id TEXT,\n        model TEXT NOT NULL,\n        max_tokens INTEGER,\n        temperature REAL,\n        system_prompt TEXT,\n        capabilities JSONB DEFAULT '[]'::jsonb,\n        rate_limit JSONB,\n        features JSONB,\n        metadata JSONB,\n        is_active BOOLEAN DEFAULT true,\n        source TEXT DEFAULT 'db',\n        created_at TIMESTAMPTZ DEFAULT NOW(),\n        updated_at TIMESTAMPTZ DEFAULT NOW()\n      );\n    `);\n\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS chat_sessions (\n        id TEXT PRIMARY KEY,\n        agent_id TEXT NOT NULL REFERENCES agent_configs(id) ON DELETE CASCADE,\n        title TEXT,\n        user_id TEXT,\n        created_at TIMESTAMPTZ DEFAULT NOW(),\n        updated_at TIMESTAMPTZ DEFAULT NOW()\n      );\n    `);\n\n    // 审计日志表\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS audit_logs (\n        id SERIAL PRIMARY KEY,\n        timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        user_id TEXT,\n        username TEXT,\n        action TEXT NOT NULL,\n        resource_type TEXT,\n        resource_id TEXT,\n        details JSONB,\n        ip_address TEXT,\n        user_agent TEXT,\n        status TEXT NOT NULL DEFAULT 'SUCCESS',\n        error_message TEXT,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      );\n    `);\n\n    // 审计日志索引\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_audit_logs_timestamp ON audit_logs(timestamp DESC);\n    `);\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON audit_logs(user_id);\n    `);\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action);\n    `);\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_audit_logs_resource ON audit_logs(resource_type, resource_id);\n    `);\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_audit_logs_status ON audit_logs(status);\n    `);\n\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS chat_messages (\n        id TEXT PRIMARY KEY,\n        session_id TEXT NOT NULL REFERENCES chat_sessions(id) ON DELETE CASCADE,\n        role TEXT NOT NULL,\n        content TEXT NOT NULL,\n        metadata JSONB,\n        created_at TIMESTAMPTZ DEFAULT NOW()\n      );\n    `);\n\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_chat_messages_session_created\n        ON chat_messages (session_id, created_at);\n    `);\n\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_agent_configs_provider\n        ON agent_configs (provider);\n    `);\n\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_agent_configs_app\n        ON agent_configs (app_id)\n        WHERE app_id IS NOT NULL;\n    `);\n\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS chat_geo_events (\n        id TEXT PRIMARY KEY,\n        agent_id TEXT NOT NULL REFERENCES agent_configs(id) ON DELETE CASCADE,\n        session_id TEXT,\n        ip TEXT,\n        country TEXT,\n        province TEXT,\n        city TEXT,\n        created_at TIMESTAMPTZ DEFAULT NOW()\n      );\n    `);\n\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_chat_geo_events_created\n        ON chat_geo_events (created_at);\n    `);\n\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_chat_geo_events_agent\n        ON chat_geo_events (agent_id, created_at);\n    `);\n\n    // 首次空库自动种子管理员（仅非生产环境）——使用bcrypt安全哈希\n    const { rows } = await client.query<{ count: string }>('SELECT COUNT(*)::text AS count FROM users');\n    const count = parseInt(rows[0]?.count || '0', 10);\n    if (count === 0) {\n      // 🔧 修复：使用bcrypt而不是SHA-256，与AuthServiceV2保持一致\n      const bcrypt = await import('bcrypt');\n      const SALT_ROUNDS = 12;\n      const passwordHash = await bcrypt.hash('admin', SALT_ROUNDS);\n      const randomSalt = crypto.randomBytes(16).toString('hex'); // 保持字段兼容性\n\n      await client.query(\n        'INSERT INTO users(username, password_salt, password_hash, role, status) VALUES ($1,$2,$3,$4,$5)',\n        ['admin', randomSalt, passwordHash, 'admin', 'active'],\n      );\n      logger.info('[initDB] ✅ 安全管理员账户已创建（用户名:admin 密码:admin，请立即修改）');\n    }\n  });\n\n  // 🔧 种子智能体数据（添加错误处理）\n  try {\n    logger.info('🌱 开始种子智能体数据...');\n    await seedAgentsFromFile();\n    logger.info('✅ 智能体数据种子完成');\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'db',\n      operation: 'seedAgents',\n    });\n    logger.error('❌ 智能体数据种子失败', { error: error.toLogObject() });\n    // 不抛出异常，允许服务继续启动\n  }\n\n  // 🔄 自动运行数据库迁移（版本化管理）\n  try {\n    logger.info('🔄 开始检查数据库迁移...');\n    const migrationManager = new MigrationManager(pool, 'src/migrations');\n    const result = await migrationManager.runMigrations();\n    logger.info('✅ 数据库迁移完成', {\n      executed: result.executed,\n      skipped: result.skipped,\n      totalTimeMs: result.totalTime,\n    });\n  } catch (unknownError: unknown) {\n    const error = createErrorFromUnknown(unknownError, {\n      component: 'db',\n      operation: 'runMigrations',\n    });\n    logger.warn('⚠️  数据库迁移失败，使用现有表结构', { error: error.toLogObject() });\n    // 不抛出异常，允许服务继续启动\n  }\n}\n\nexport async function withClient<T>(fn: (client: import('pg').PoolClient) => Promise<T>): Promise<T> {\n  const p = getPool();\n  const client = await p.connect();\n  try {\n    return await fn(client);\n  } finally {\n    client.release();\n  }\n}\n\nexport function hashPassword(password: string, salt?: string): { salt: string; hash: string } {\n  const realSalt = salt || crypto.randomBytes(16).toString('hex');\n  const hash = crypto.createHash('sha256').update(`${realSalt}:${password}`).digest('hex');\n  return { salt: realSalt, hash };\n}\n\nexport async function closeDB(): Promise<void> {\n  if (pool) {\n    await pool.end();\n    pool = null;\n  }\n}\n\nasync function seedAgentsFromFile(): Promise<void> {\n  logger.info('🌱 [seedAgentsFromFile] 开始执行智能体种子函数...');\n\n  const filePathCandidates = [\n    path.resolve(__dirname, '../../../config/agents.json'),  // 从 backend/src/utils 到根目录 config\n    path.resolve(process.cwd(), 'config/agents.json'),       // 从当前工作目录\n    path.resolve(process.cwd(), '../config/agents.json'),     // 如果 cwd 是 backend\n  ];\n\n  logger.info('[seedAgentsFromFile] 候选文件路径', { paths: filePathCandidates });\n\n  let fileContent: string | null = null;\n  for (const filePath of filePathCandidates) {\n    try {\n      logger.info('[seedAgentsFromFile] 尝试读取文件', { path: filePath });\n      if (fs.existsSync(filePath)) {\n        fileContent = fs.readFileSync(filePath, 'utf-8');\n        logger.info('[seedAgentsFromFile] ✅ 文件读取成功', { path: filePath, length: fileContent.length });\n        break;\n      } else {\n        logger.warn('[seedAgentsFromFile] 文件不存在', { path: filePath });\n      }\n    } catch (e) {\n      logger.error('[seedAgentsFromFile] 读取智能体配置文件失败', { path: filePath, error: e });\n    }\n  }\n\n  if (!fileContent) {\n    logger.error('[seedAgentsFromFile] ❌ 所有候选路径都未找到agents.json文件！');\n    return;\n  }\n\n  let parsed: any;\n  try {\n    parsed = JSON.parse(fileContent);\n  } catch (e) {\n    logger.warn('[initDB] 解析 agents.json 失败', { error: e });\n    return;\n  }\n\n  const agents: any[] = Array.isArray(parsed?.agents) ? parsed.agents : [];\n  if (agents.length === 0) {\n    logger.info('[seedAgentsFromFile] agents.json为空，跳过种子');\n    return;\n  }\n\n  // 🔧 关键修复：替换环境变量占位符\n  const resolvedAgents = deepReplaceEnvVariables(agents);\n  logger.info('[seedAgentsFromFile] 智能体配置环境变量已替换', { count: agents.length });\n\n  await withClient(async (client) => {\n    const { rows } = await client.query<{ count: string }>('SELECT COUNT(*)::text AS count FROM agent_configs');\n    const count = parseInt(rows[0]?.count || '0', 10);\n\n    logger.info(`[seedAgentsFromFile] 数据库现有智能体数量: ${count}`);\n\n    // 🔧 修复：即使有数据也执行UPSERT（使用ON CONFLICT）\n    // if (count > 0) {\n    //   return;\n    // }\n\n    const insertText = `\n      INSERT INTO agent_configs (\n        id, name, description, provider, endpoint, api_key, app_id, model,\n        max_tokens, temperature, system_prompt, capabilities, rate_limit,\n        features, metadata, is_active, source\n      ) VALUES (\n        $1,$2,$3,$4,$5,$6,$7,$8,\n        $9,$10,$11,$12::jsonb,$13::jsonb,\n        $14::jsonb,$15::jsonb,$16,$17\n      )\n      ON CONFLICT (id) DO UPDATE SET\n        name = EXCLUDED.name,\n        description = EXCLUDED.description,\n        provider = EXCLUDED.provider,\n        endpoint = EXCLUDED.endpoint,\n        api_key = EXCLUDED.api_key,\n        app_id = EXCLUDED.app_id,\n        model = EXCLUDED.model,\n        max_tokens = EXCLUDED.max_tokens,\n        temperature = EXCLUDED.temperature,\n        system_prompt = EXCLUDED.system_prompt,\n        capabilities = EXCLUDED.capabilities,\n        rate_limit = EXCLUDED.rate_limit,\n        features = EXCLUDED.features,\n        metadata = EXCLUDED.metadata,\n        is_active = EXCLUDED.is_active,\n        source = 'json',\n        updated_at = NOW();\n    `;\n\n    for (const agent of resolvedAgents) {\n      try {\n        logger.info('[seedAgentsFromFile] 导入智能体', { id: agent.id, name: agent.name });\n        await client.query(insertText, [\n          agent.id,\n          agent.name,\n          agent.description ?? '',\n          agent.provider,\n          agent.endpoint,\n          agent.apiKey,\n          agent.appId ?? null,\n          agent.model,\n          agent.maxTokens ?? null,\n          agent.temperature ?? null,\n          agent.systemPrompt ?? null,\n          JSON.stringify(agent.capabilities ?? []),\n          JSON.stringify(agent.rateLimit ?? null),\n          JSON.stringify(agent.features ?? null),\n          JSON.stringify({ source: 'json' }),\n          agent.isActive ?? true,\n          'json',\n        ]);\n      } catch (e) {\n        logger.error('[seedAgentsFromFile] 导入智能体失败', { agentId: agent?.id, error: e });\n      }\n    }\n\n    logger.info(`✅ [seedAgentsFromFile] 智能体种子完成，共处理 ${resolvedAgents.length} 个智能体`);\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/envHelper.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":27,"column":34,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":27,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":27,"column":59,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":27,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":37,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":48,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":48,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":48,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":48,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toUpperCase on an `any` value.","line":48,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .includes on an `any` value.","line":48,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":51,"column":35,"nodeType":"Property","messageId":"anyAssignment","endLine":51,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":71,"column":28,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":71,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 环境变量处理工具\n * 提供安全的环境变量替换和验证功能\n *\n * 高可用特性:\n * - 使用EnvManager统一管理\n * - 支持降级默认值\n * - 敏感信息自动脱敏\n */\n\nimport logger from '@/utils/logger';\nimport { EnvManager } from '@/config/EnvManager';\n\n/**\n * 替换字符串中的环境变量占位符\n * 支持 ${VARIABLE_NAME} 格式的占位符\n * @param input 包含环境变量占位符的字符串\n * @param defaultValue 当环境变量未定义时的默认值\n * @param silent 是否静默模式（不记录警告）\n * @returns 替换后的字符串\n */\nexport function replaceEnvVariables(input: string, defaultValue?: string, silent = false): string {\n  const envManager = EnvManager.getInstance();\n\n  return input.replace(/\\$\\{([^}]+)\\}/g, (match, envVar) => {\n    // 使用EnvManager获取环境变量\n    const value = envManager.has(envVar) ? envManager.get(envVar) : undefined;\n\n    if (value === undefined || value === '') {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      // 如果没有默认值，返回原始占位符（保持向后兼容）\n      // 只有非静默模式才记录警告\n      if (!silent) {\n        logger.warn('环境变量未定义，保留占位符', {\n          envVar,\n          placeholder: match,\n          suggestion: `请在.env文件中设置 ${envVar}`,\n        });\n      }\n      return match;\n    }\n\n    // 敏感信息脱敏日志\n    if (!silent && !envManager.isDevelopment()) {\n      const isSensitive = ['PASSWORD', 'SECRET', 'KEY', 'TOKEN', 'API_KEY'].some(\n        pattern => envVar.toUpperCase().includes(pattern),\n      );\n      if (isSensitive) {\n        logger.debug('环境变量已替换', { envVar, value: '***REDACTED***' });\n      }\n    }\n\n    return value;\n  });\n}\n\n/**\n * 递归替换对象中的所有环境变量占位符\n * @param obj 需要处理的对象\n * @param silent 是否静默模式（不记录警告）\n * @returns 处理后的对象\n */\nexport function deepReplaceEnvVariables<T>(obj: T, silent = false): T {\n  if (typeof obj === 'string') {\n    return replaceEnvVariables(obj, undefined, silent) as T;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => deepReplaceEnvVariables(item, silent)) as T;\n  }\n\n  if (obj && typeof obj === 'object') {\n    const result: Record<string, unknown> = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = deepReplaceEnvVariables(value, silent);\n    }\n    return result as T;\n  }\n\n  return obj;\n}\n\n/**\n * 验证必需的环境变量\n * @param requiredVars 必需的环境变量列表\n * @throws 如果必需的环境变量未定义\n */\nexport function validateRequiredEnvVars(requiredVars: string[]): void {\n  const envManager = EnvManager.getInstance();\n  const missing: string[] = [];\n\n  for (const varName of requiredVars) {\n    if (!envManager.has(varName)) {\n      missing.push(varName);\n    }\n  }\n\n  if (missing.length > 0) {\n    const error = new Error(\n      `缺少必需的环境变量: ${missing.join(', ')}\\n` +\n      '请在根目录 .env 文件中设置这些变量，参考 .env.example',\n    );\n    logger.error('环境变量验证失败', { missing });\n    throw error;\n  }\n\n  logger.info('环境变量验证通过', { checked: requiredVars.length });\n}\n\n/**\n * 安全获取环境变量 (兼容旧代码)\n * @param key 环境变量键\n * @param defaultValue 默认值\n * @returns 环境变量值或默认值\n * @deprecated 建议使用 EnvManager.getInstance().get(key, defaultValue)\n */\nexport function getEnvVar(key: string, defaultValue?: string): string | undefined {\n  const envManager = EnvManager.getInstance();\n  return envManager.get(key, defaultValue ?? '');\n}\n\n/**\n * 检查字符串中是否包含未替换的环境变量占位符\n * @param str 要检查的字符串\n * @returns 是否包含未替换的占位符\n */\nexport function containsUnresolvedPlaceholders(str: string): boolean {\n  return /\\$\\{[^}]+\\}/.test(str);\n}\n\n/**\n * 获取字符串中的所有环境变量占位符\n * @param str 要分析的字符串\n * @returns 环境变量名数组\n */\nexport function extractEnvPlaceholders(str: string): string[] {\n  const matches = str.match(/\\$\\{([^}]+)\\}/g);\n  return matches ? matches.map(match => match.slice(2, -1)) : [];\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/envResolver.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Computed name [envVarName] resolves to an any value.","line":25,"column":34,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":25,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":34,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":42,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":42,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":68,"column":30,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":68,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":101,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":101,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":101,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":101,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .replace on an `any` value.","line":101,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Computed name [cleanVarName] resolves to an any value.","line":102,"column":34,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":102,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":112,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":112,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":185,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":185,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4079,4081],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import logger from '@/utils/logger';\n\n/**\n * 环境变量解析工具\n *\n * 用于解析配置文件中的环境变量占位符，如 ${ENV_VAR}\n */\n\n/**\n * 解析字符串中的环境变量占位符\n *\n * @param value 包含占位符的字符串，如 \"${DB_HOST}\"\n * @param defaultValue 如果环境变量未设置，使用的默认值\n * @returns 解析后的值\n */\nexport function resolveEnvString(value: string, defaultValue?: string): string {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  // 匹配 ${VAR_NAME} 格式\n  const envVarPattern = /\\$\\{([^}]+)\\}/g;\n\n  return value.replace(envVarPattern, (match, envVarName) => {\n    const envValue = process.env[envVarName];\n\n    if (envValue !== undefined) {\n      return envValue;\n    }\n\n    if (defaultValue !== undefined) {\n      logger.warn(`Environment variable ${envVarName} not set, using default`, {\n        component: 'envResolver',\n        envVarName,\n        defaultValue,\n      });\n      return defaultValue;\n    }\n\n    logger.warn(`Environment variable ${envVarName} not set, keeping placeholder`, {\n      component: 'envResolver',\n      envVarName,\n    });\n    return match; // 保持原样\n  });\n}\n\n/**\n * 解析对象中的所有环境变量占位符（递归）\n *\n * @param obj 需要解析的对象\n * @returns 解析后的对象\n */\nexport function resolveEnvInObject<T>(obj: T): T {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  if (typeof obj === 'string') {\n    return resolveEnvString(obj) as unknown as T;\n  }\n\n  if (typeof obj === 'number' || typeof obj === 'boolean') {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map((item) => resolveEnvInObject(item)) as unknown as T;\n  }\n\n  if (typeof obj === 'object') {\n    const resolved: Record<string, unknown> = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n      resolved[key] = resolveEnvInObject(value);\n    }\n\n    return resolved as T;\n  }\n\n  return obj;\n}\n\n/**\n * 解析 JSONC 配置文件中的环境变量\n *\n * 处理特殊的 JSONC 格式，如数字/布尔值的占位符：\n * - \"port\": ${DB_PORT}  -> 解析为数字\n * - \"ssl\": ${DB_SSL}    -> 解析为布尔值\n *\n * @param configText JSONC 配置文件文本\n * @returns 解析后的配置文本\n */\nexport function resolveEnvInJsonc(configText: string): string {\n  // 匹配 ${VAR_NAME} 格式，只允许字母、数字、下划线\n  // 注意：[\\s\\S] 匹配任意字符（包括换行），但我们只需要变量名\n  const envVarPattern = /\\$\\{([A-Z_][A-Z0-9_]*)\\}/g;\n\n  return configText.replace(envVarPattern, (match, envVarName) => {\n    // 清理变量名（移除所有空白字符，包括换行符）\n    const cleanVarName = envVarName.replace(/\\s+/g, '');\n    const envValue = process.env[cleanVarName];\n\n    if (envValue !== undefined) {\n      // 检查上下文，判断是否应该返回原始值（不带引号）\n      // 这适用于数字和布尔值的情况\n      return envValue;\n    }\n\n    logger.warn(`Environment variable ${cleanVarName} not set, keeping placeholder`, {\n      component: 'envResolver',\n      envVarName: cleanVarName,\n    });\n    return `\"${match}\"`; // 保持为字符串格式\n  });\n}\n\n/**\n * 从环境变量解析数字\n *\n * @param envVar 环境变量名\n * @param defaultValue 默认值\n * @returns 解析后的数字\n */\nexport function getEnvNumber(envVar: string, defaultValue: number): number {\n  const value = process.env[envVar];\n  if (!value) {\n    return defaultValue;\n  }\n\n  const parsed = parseInt(value, 10);\n  if (Number.isNaN(parsed)) {\n    logger.warn(`Invalid number in environment variable ${envVar}, using default`, {\n      component: 'envResolver',\n      envVar,\n      value,\n      defaultValue,\n    });\n    return defaultValue;\n  }\n\n  return parsed;\n}\n\n/**\n * 从环境变量解析布尔值\n *\n * @param envVar 环境变量名\n * @param defaultValue 默认值\n * @returns 解析后的布尔值\n */\nexport function getEnvBoolean(envVar: string, defaultValue: boolean): boolean {\n  const value = process.env[envVar];\n  if (!value) {\n    return defaultValue;\n  }\n\n  const lowerValue = value.toLowerCase().trim();\n\n  if (lowerValue === 'true' || lowerValue === '1' || lowerValue === 'yes') {\n    return true;\n  }\n\n  if (lowerValue === 'false' || lowerValue === '0' || lowerValue === 'no') {\n    return false;\n  }\n\n  logger.warn(`Invalid boolean in environment variable ${envVar}, using default`, {\n    component: 'envResolver',\n    envVar,\n    value,\n    defaultValue,\n  });\n  return defaultValue;\n}\n\n/**\n * 从环境变量获取字符串\n *\n * @param envVar 环境变量名\n * @param defaultValue 默认值\n * @returns 环境变量值或默认值\n */\nexport function getEnvString(envVar: string, defaultValue: string): string {\n  return process.env[envVar] || defaultValue;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/errorHandler.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":89,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":89,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":91,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":91,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":93,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":93,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":95,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":95,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":97,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":97,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":99,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":99,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 422.","line":101,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":101,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 类型安全的错误处理工具\n * 替代catch (error: any)的模式\n */\n\nimport { BaseError, createErrorFromUnknown } from '@/types/errors';\nimport type { ApiError } from '@/types';\n\n/**\n * 类型守卫：检查是否为Error对象\n */\nexport function isError(error: unknown): error is Error {\n  return error instanceof Error;\n}\n\n/**\n * 类型守卫：检查是否为BaseError\n */\nexport function isBaseError(error: unknown): error is BaseError {\n  return error instanceof BaseError;\n}\n\n/**\n * 安全的字符串转换\n */\nexport function safeStringify(value: unknown): string {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (typeof value === 'number' || typeof value === 'boolean') {\n    return String(value);\n  }\n\n  try {\n    return JSON.stringify(value);\n  } catch {\n    return '[Unstringifiable]';\n  }\n}\n\n/**\n * 将unknown错误转换为BaseError\n */\nexport function toEnhancedError(\n  error: unknown,\n  context: {\n    operation?: string;\n    requestId?: string;\n    userId?: string;\n  } = {},\n): BaseError {\n  return createErrorFromUnknown(error, context);\n}\n\n/**\n * 类型安全的错误处理函数\n */\nexport function safeErrorHandler<T>(\n  error: unknown,\n  fallbackValue: T,\n  context?: {\n    operation?: string;\n    requestId?: string;\n    userId?: string;\n  },\n): { error: BaseError; fallback: T } {\n  const enhancedError = toEnhancedError(error, context);\n  return {\n    error: enhancedError,\n    fallback: fallbackValue,\n  };\n}\n\n/**\n * Express错误处理助手\n */\nexport class ExpressErrorHandler {\n  /**\n   * 获取错误状态码\n   */\n  static getStatusCode(error: BaseError): number {\n    switch (error.category) {\n      case 'authentication':\n        return 401;\n      case 'authorization':\n        return 403;\n      case 'validation':\n        return 400;\n      case 'network':\n        return 503;\n      case 'external_service':\n        return 502;\n      case 'resource':\n        return 404;\n      case 'business_logic':\n        return 422;\n      case 'system':\n        return 500;\n      default:\n        return 500;\n    }\n  }\n\n  /**\n   * 获取用户友好的错误消息\n   */\n  static getUserMessage(error: BaseError): string {\n    return error.getUserMessage();\n  }\n\n  /**\n   * 标准化错误响应\n   */\n  static createErrorResponse(\n    error: BaseError,\n    requestId?: string,\n  ): ApiError {\n    const response = error.toApiError();\n\n    if (requestId) {\n      response.requestId = requestId;\n    }\n\n    return response;\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/fastgptEvents.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":1,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":1,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const normalizeEventKey = (name: string) => name.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n// 安全的正则表达式转义函数\nconst escapeRegExp = (string: string): string => {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nconst buildPatternMatcher = (patterns: Array<string | RegExp>) => {\n  const normalizedPatterns = patterns.map((pattern) =>\n    typeof pattern === 'string'\n      ? new RegExp(escapeRegExp(pattern), 'i')\n      : pattern,\n  );\n\n  return (eventName: string): boolean => {\n    if (!eventName) {\n      return false;\n    }\n    const normalized = normalizeEventKey(eventName);\n    return normalizedPatterns.some((pattern) => pattern.test(normalized));\n  };\n};\n\nexport const isReasoningEvent = buildPatternMatcher([\n  /reason/,\n  /thought/,\n  /analysis/,\n  /think/,\n  /chainofthought/,\n]);\n\nexport const isDatasetEvent = buildPatternMatcher([\n  /dataset/,\n  /quote/,\n  /cite/,\n  /reference/,\n  /knowledge/,\n]);\n\nexport const isSummaryEvent = buildPatternMatcher([\n  /summary/,\n  /finalsummary/,\n  /conclusion/,\n  /result/,\n]);\n\nexport const isToolEvent = buildPatternMatcher([\n  /tool/,\n  /plugin/,\n  /function/,\n  /search/,\n  /workflow/,\n]);\n\nexport const isUsageEvent = buildPatternMatcher([\n  /usage/,\n  /token/,\n]);\n\nexport const isEndEvent = buildPatternMatcher([\n  /end/,\n  /finish/,\n  /complete/,\n  /done/,\n]);\n\nexport const isStatusEvent = buildPatternMatcher([\n  /status/,\n  /flownodestatus/,\n  /progress/,\n]);\n\nexport const isInteractiveEvent = buildPatternMatcher([\n  /interactive/,\n  /form/,\n  /select/,\n]);\n\nexport const isChatIdEvent = buildPatternMatcher([\n  /chatid/,\n  /session/,\n]);\n\nexport const isChunkLikeEvent = buildPatternMatcher([\n  /chunk/,\n  /message/,\n  /delta/,\n]);\n\nexport const getNormalizedEventKey = normalizeEventKey;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":34,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":34,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":77,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":77,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":118,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":118,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":125,"column":54,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":125,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":125,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":125,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toUpperCase on an `any` value.","line":125,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { v4 as uuidv4 } from 'uuid';\n\n/**\n * 生成唯一ID\n */\nexport const generateId = (): string => {\n  return uuidv4();\n};\n\n/**\n * 生成时间戳\n */\nexport const generateTimestamp = (): number => {\n  return Math.floor(Date.now() / 1000);\n};\n\n/**\n * 验证URL格式\n */\nexport const isValidUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * 安全地解析JSON\n */\nexport const safeJsonParse = <T>(jsonString: string, defaultValue: T): T => {\n  try {\n    return JSON.parse(jsonString);\n  } catch {\n    return defaultValue;\n  }\n};\n\n/**\n * 延迟函数\n */\nexport const delay = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\n/**\n * 获取错误消息\n */\nexport const getErrorMessage = (error: unknown): string => {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  if (typeof error === 'string') {\n    return error;\n  }\n  return '未知错误';\n};\n\n/**\n * 清理对象中的undefined值\n */\nexport const cleanObject = <T extends Record<string, unknown>>(obj: T): Partial<T> => {\n  const cleaned: Partial<T> = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (value !== undefined && value !== null) {\n      cleaned[key as keyof T] = value as T[keyof T];\n    }\n  }\n  return cleaned;\n};\n\n/**\n * 深拷贝对象\n */\nexport const deepClone = <T>(obj: T): T => {\n  return JSON.parse(JSON.stringify(obj));\n};\n\n/**\n * 检查是否为空对象\n */\nexport const isEmpty = (obj: unknown): boolean => {\n  if (obj === null) {\n    return true;\n  }\n  if (Array.isArray(obj) || typeof obj === 'string') {\n    return obj.length === 0;\n  }\n  if (typeof obj === 'object') {\n    return Object.keys(obj).length === 0;\n  }\n  return false;\n};\n\n/**\n * 格式化文件大小\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * 截断字符串\n */\nexport const truncateString = (str: string, maxLength: number): string => {\n  if (str.length <= maxLength) {\n    return str;\n  }\n  return str.slice(0, maxLength - 3) + '...';\n};\n\n/**\n * 转换为驼峰命名\n */\nexport const toCamelCase = (str: string): string => {\n  return str.replace(/_([a-z])/g, (match, letter) => letter.toUpperCase());\n};\n\n/**\n * 转换为下划线命名\n */\nexport const toSnakeCase = (str: string): string => {\n  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/loadOptionalModule.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":14,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":14,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":15,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":15,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .default on an `any` value.","line":15,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 动态加载可选模块的工具函数\n */\n\nimport { createErrorFromUnknown } from '@/types/errors';\n\n/**\n * 安全地加载可选模块\n * @param moduleName 模块名称\n * @returns 模块实例或null\n */\nexport async function loadOptionalModule<T>(moduleName: string): Promise<T | null> {\n  try {\n    const module = await import(moduleName);\n    return module.default || module;\n  } catch (unknownError: unknown) {\n    const _error = createErrorFromUnknown(unknownError, {\n      component: 'loadOptionalModule',\n      operation: 'loadOptionalModule',\n    });\n    return null;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/logSanitizer.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 102. Maximum allowed is 100.","line":12,"column":1,"nodeType":"Program","messageId":"max","endLine":12,"endColumn":103},{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":15,"column":1,"nodeType":"Program","messageId":"max","endLine":15,"endColumn":106},{"ruleId":"max-len","severity":1,"message":"This line has a length of 102. Maximum allowed is 100.","line":18,"column":1,"nodeType":"Program","messageId":"max","endLine":18,"endColumn":103},{"ruleId":"max-len","severity":1,"message":"This line has a length of 103. Maximum allowed is 100.","line":21,"column":1,"nodeType":"Program","messageId":"max","endLine":21,"endColumn":104}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 日志脱敏工具\n * 用于在日志中屏蔽敏感信息\n *\n * 统一使用logger.ts进行日志输出\n */\n\nimport logger from './logger';\n\nexport const safeLogger = {\n  info: (message: string, meta?: unknown): void => {\n    logger.info(LogSanitizer.sanitize(message), meta ? LogSanitizer.sanitizeObject(meta) : undefined);\n  },\n  error: (message: string, error?: unknown): void => {\n    logger.error(LogSanitizer.sanitize(message), error ? LogSanitizer.sanitizeObject(error) : undefined);\n  },\n  warn: (message: string, meta?: unknown): void => {\n    logger.warn(LogSanitizer.sanitize(message), meta ? LogSanitizer.sanitizeObject(meta) : undefined);\n  },\n  debug: (message: string, meta?: unknown): void => {\n    logger.debug(LogSanitizer.sanitize(message), meta ? LogSanitizer.sanitizeObject(meta) : undefined);\n  },\n};\n\nexport class LogSanitizer {\n  private static readonly sensitivePatterns = [\n    { pattern: /password/i, replacement: '****' },\n    { pattern: /token/i, replacement: '***' },\n    { pattern: /secret/i, replacement: '***' },\n    { pattern: /key/i, replacement: '***' },\n    { pattern: /auth/i, replacement: '***' },\n    { pattern: /Bearer\\s+[A-Za-z0-9\\-._~+/]+=*/g, replacement: 'Bearer ***' },\n    { pattern: /sk-[A-Za-z0-9-]+/g, replacement: 'sk-***' },\n    { pattern: /mongodb:\\/\\/[^:]+:[^@]+@/g, replacement: 'mongodb://***:***@' },\n    { pattern: /postgresql:\\/\\/[^:]+:[^@]+@/g, replacement: 'postgresql://***:***@' },\n    { pattern: /mysql:\\/\\/[^:]+:[^@]+@/g, replacement: 'mysql://***:***@' },\n  ];\n\n  static sanitize(input: string): string {\n    let sanitized = input;\n\n    for (const { pattern, replacement } of this.sensitivePatterns) {\n      sanitized = sanitized.replace(pattern, replacement);\n    }\n\n    return sanitized;\n  }\n\n  static sanitizeObject(obj: unknown): unknown {\n    if (typeof obj !== 'object' || obj === null) {\n      return this.sanitize(String(obj));\n    }\n\n    const sanitized: Record<string, unknown> = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === 'string') {\n        sanitized[key] = this.sanitize(value);\n      } else if (typeof value === 'object' && value !== null) {\n        sanitized[key] = this.sanitizeObject(value);\n      } else {\n        sanitized[key] = value;\n      }\n    }\n\n    return sanitized;\n  }\n\n  static maskConnectionString(connectionString: string): string {\n    return this.sanitize(connectionString);\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/logger.ts","messages":[{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'existsSync'.","line":21,"column":6,"nodeType":"MemberExpression","messageId":"noSync","endLine":21,"endColumn":19},{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'mkdirSync'.","line":22,"column":3,"nodeType":"MemberExpression","messageId":"noSync","endLine":22,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":169,"column":61,"nodeType":"Literal","messageId":"noMagic","endLine":169,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Winston 日志配置\n *\n * 提供结构化日志记录功能：\n * - 多级别日志 (info/warn/error/debug)\n * - 日志文件轮转 (按日期)\n * - 开发环境控制台输出\n * - 异常和拒绝处理\n * - 审计日志和性能日志\n */\n\nimport winston from 'winston';\nimport DailyRotateFile from 'winston-daily-rotate-file';\nimport path from 'path';\nimport fs from 'fs';\n\n// 日志目录\nconst logDir = path.join(__dirname, '../../log');\n\n// 确保日志目录存在\nif (!fs.existsSync(logDir)) {\n  fs.mkdirSync(logDir, { recursive: true });\n}\n\n/**\n * 自定义日志格式 - JSON 结构化\n */\nconst customFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.errors({ stack: true }),\n  winston.format.metadata({ fillWith: ['service', 'component', 'environment'] }),\n  winston.format.json(),\n);\n\n/**\n * 控制台格式 - 彩色可读 (仅开发环境)\n */\nconst consoleFormat = winston.format.combine(\n  winston.format.colorize(),\n  winston.format.timestamp({ format: 'HH:mm:ss' }),\n  winston.format.printf(({ timestamp, level, message, ...meta }) => {\n    let metaStr = '';\n    if (Object.keys(meta).length > 0) {\n      metaStr = '\\n' + JSON.stringify(meta, null, 2);\n    }\n    return `${timestamp} [${level}]: ${message}${metaStr}`;\n  }),\n);\n\n/**\n * 创建日志传输器\n */\n\n// 应用日志 (每日轮转)\nconst appLogTransport = new DailyRotateFile({\n  filename: path.join(logDir, 'app-%DATE%.log'),\n  datePattern: 'YYYY-MM-DD',\n  maxSize: '20m',\n  maxFiles: '14d',\n  level: 'info',\n});\n\n// 错误日志 (单独文件)\nconst errorLogTransport = new DailyRotateFile({\n  filename: path.join(logDir, 'error-%DATE%.log'),\n  datePattern: 'YYYY-MM-DD',\n  maxSize: '20m',\n  maxFiles: '30d',\n  level: 'error',\n});\n\n// 审计日志 (敏感操作, 保留90天)\nconst auditLogTransport = new DailyRotateFile({\n  filename: path.join(logDir, 'audit-%DATE%.log'),\n  datePattern: 'YYYY-MM-DD',\n  maxSize: '50m',\n  maxFiles: '90d',\n  level: 'warn',\n});\n\n/**\n * 创建 Logger 实例\n */\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL ?? 'info',\n  format: customFormat,\n  defaultMeta: {\n    service: 'llmchat-backend',\n    environment: process.env.NODE_ENV ?? 'development',\n  },\n  transports: [\n    appLogTransport,\n    errorLogTransport,\n    auditLogTransport,\n  ],\n  exceptionHandlers: [\n    new winston.transports.File({\n      filename: path.join(logDir, 'exceptions.log'),\n    }),\n  ],\n  rejectionHandlers: [\n    new winston.transports.File({\n      filename: path.join(logDir, 'rejections.log'),\n    }),\n  ],\n});\n\n// 开发环境添加控制台输出\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: consoleFormat,\n    level: process.env.LOG_LEVEL ?? 'info', // ✅ 使用环境变量控制日志级别\n  }));\n}\n\n/**\n * 审计日志便捷方法\n *\n * @param action 操作类型\n * @param details 详细信息\n */\nexport function logAudit(action: string, details: Record<string, unknown>): void {\n  logger.warn('AUDIT', {\n    action,\n    ...details,\n    timestamp: new Date().toISOString(),\n    auditType: 'security',\n  });\n}\n\n/**\n * 性能日志便捷方法\n *\n * @param operation 操作名称\n * @param duration 耗时(ms)\n * @param metadata 额外元数据\n */\nexport function logPerformance(\n  operation: string,\n  duration: number,\n  metadata?: Record<string, unknown>,\n): void {\n  logger.info('PERFORMANCE', {\n    operation,\n    duration,\n    unit: 'ms',\n    ...metadata,\n    timestamp: new Date().toISOString(),\n    performanceType: 'metric',\n  });\n}\n\n/**\n * HTTP 请求日志便捷方法\n *\n * @param method HTTP 方法\n * @param url 请求 URL\n * @param statusCode 状态码\n * @param duration 耗时(ms)\n * @param metadata 额外元数据\n */\nexport function logHttpRequest(\n  method: string,\n  url: string,\n  statusCode: number,\n  duration: number,\n  metadata?: Record<string, unknown>,\n): void {\n  const level = statusCode >= 500 ? 'error' : statusCode >= 400 ? 'warn' : 'info';\n\n  logger.log(level, 'HTTP_REQUEST', {\n    method,\n    url,\n    statusCode,\n    duration,\n    unit: 'ms',\n    ...metadata,\n    timestamp: new Date().toISOString(),\n    requestType: 'http',\n  });\n}\n\n/**\n * 数据库操作日志便捷方法\n *\n * @param operation 操作类型 (SELECT/INSERT/UPDATE/DELETE)\n * @param table 表名\n * @param duration 耗时(ms)\n * @param metadata 额外元数据\n */\nexport function logDatabaseOperation(\n  operation: string,\n  table: string,\n  duration: number,\n  metadata?: Record<string, unknown>,\n): void {\n  logger.debug('DB_OPERATION', {\n    operation,\n    table,\n    duration,\n    unit: 'ms',\n    ...metadata,\n    timestamp: new Date().toISOString(),\n    operationType: 'database',\n  });\n}\n\n/**\n * 外部服务调用日志便捷方法\n *\n * @param service 服务名称\n * @param operation 操作名称\n * @param success 是否成功\n * @param duration 耗时(ms)\n * @param metadata 额外元数据\n */\nexport function logExternalService(\n  service: string,\n  operation: string,\n  success: boolean,\n  duration: number,\n  metadata?: Record<string, unknown>,\n): void {\n  const level = success ? 'info' : 'warn';\n\n  logger.log(level, 'EXTERNAL_SERVICE', {\n    service,\n    operation,\n    success,\n    duration,\n    unit: 'ms',\n    ...metadata,\n    timestamp: new Date().toISOString(),\n    serviceType: 'external',\n  });\n}\n\n// 导出默认实例\nexport default logger;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/migrate.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[685,687],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据库迁移管理工具\n * 提供版本化的数据库schema管理,支持migrate up/down\n */\n\nimport type { Pool, PoolClient } from 'pg';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface Migration {\n  version: string;\n  name: string;\n  up: string;\n  down?: string;\n  timestamp: Date;\n}\n\nexport interface MigrationRecord {\n  version: string;\n  name: string;\n  executed_at: Date;\n}\n\nexport class MigrationManager {\n  private readonly pool: Pool;\n  private readonly migrationsDir: string;\n\n  constructor(pool: Pool, migrationsDir?: string) {\n    this.pool = pool;\n    this.migrationsDir = migrationsDir || path.join(__dirname, '../migrations');\n  }\n\n  /**\n   * 确保迁移跟踪表存在\n   */\n  private async ensureMigrationTable(client: PoolClient): Promise<void> {\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS schema_migrations (\n        version TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        executed_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      );\n    `);\n\n    await client.query(`\n      CREATE INDEX IF NOT EXISTS idx_schema_migrations_executed_at\n        ON schema_migrations(executed_at DESC);\n    `);\n  }\n\n  /**\n   * 获取已执行的迁移列表\n   */\n  private async getExecutedMigrations(client: PoolClient): Promise<string[]> {\n    const result = await client.query<{ version: string }>(\n      'SELECT version FROM schema_migrations ORDER BY version ASC',\n    );\n    return result.rows.map(row => row.version);\n  }\n\n  /**\n   * 记录迁移执行\n   */\n  private async recordMigration(client: PoolClient, migration: Migration): Promise<void> {\n    await client.query(\n      'INSERT INTO schema_migrations (version, name, executed_at) VALUES ($1, $2, NOW())',\n      [migration.version, migration.name],\n    );\n  }\n\n  /**\n   * 删除迁移记录\n   */\n  private async unrecordMigration(client: PoolClient, version: string): Promise<void> {\n    await client.query(\n      'DELETE FROM schema_migrations WHERE version = $1',\n      [version],\n    );\n  }\n\n  /**\n   * 从文件系统加载所有迁移脚本\n   */\n  private async loadMigrations(): Promise<Migration[]> {\n    try {\n      const files = await fs.readdir(this.migrationsDir);\n      const sqlFiles = files.filter(f => f.endsWith('.sql')).sort();\n\n      const migrations: Migration[] = [];\n\n      for (const file of sqlFiles) {\n        // 文件名格式: 001_create_users.sql\n        const match = file.match(/^(\\d+)_(.+)\\.sql$/);\n        if (!match) {\n          logger.warn(`迁移文件名格式不正确,跳过: ${file}`, { component: 'MigrationManager' });\n          continue;\n        }\n\n        const [, version, name] = match;\n\n        if (!version || !name) {\n          logger.warn(`迁移文件解析失败: ${file}`, { component: 'MigrationManager' });\n          continue;\n        }\n\n        const filePath = path.join(this.migrationsDir, file);\n        const content = await fs.readFile(filePath, 'utf-8');\n\n        // 支持 -- UP 和 -- DOWN 分隔符\n        const parts = content.split(/-- DOWN/i);\n        const upPart = parts[0];\n\n        if (!upPart) {\n          logger.warn(`迁移文件缺少 UP 部分: ${file}`, { component: 'MigrationManager' });\n          continue;\n        }\n\n        const upSQL = upPart.replace(/-- UP/i, '').trim();\n        const downSQL = parts[1]?.trim();\n\n        const migration: Migration = {\n          version,\n          name: name.replace(/_/g, ' '),\n          up: upSQL,\n          timestamp: new Date(),\n        };\n\n        if (downSQL) {\n          migration.down = downSQL;\n        }\n\n        migrations.push(migration);\n      }\n\n      return migrations;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'MigrationManager',\n        operation: 'loadMigrations',\n      });\n      logger.error('加载迁移脚本失败', { component: 'MigrationManager', error: error.toLogObject() });\n      throw error;\n    }\n  }\n\n  /**\n   * 执行所有待执行的迁移 (migrate up)\n   */\n  async migrateUp(): Promise<{ executed: Migration[]; skipped: number }> {\n    const client = await this.pool.connect();\n    try {\n      await this.ensureMigrationTable(client);\n      const executedVersions = await this.getExecutedMigrations(client);\n      const allMigrations = await this.loadMigrations();\n\n      const pendingMigrations = allMigrations.filter(\n        m => !executedVersions.includes(m.version),\n      );\n\n      if (pendingMigrations.length === 0) {\n        logger.info('没有待执行的迁移', { component: 'MigrationManager' });\n        return { executed: [], skipped: allMigrations.length };\n      }\n\n      const executed: Migration[] = [];\n\n      for (const migration of pendingMigrations) {\n        logger.info(`执行迁移: ${migration.version} - ${migration.name}`, {\n          component: 'MigrationManager',\n        });\n\n        try {\n          await client.query('BEGIN');\n          await client.query(migration.up);\n          await this.recordMigration(client, migration);\n          await client.query('COMMIT');\n\n          executed.push(migration);\n          logger.info(`迁移成功: ${migration.version} - ${migration.name}`, {\n            component: 'MigrationManager',\n          });\n        } catch (unknownError: unknown) {\n          await client.query('ROLLBACK');\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'MigrationManager',\n            operation: 'migrateUp',\n          });\n          logger.error(`迁移失败: ${migration.version} - ${migration.name}`, {\n            component: 'MigrationManager',\n            error: error.toLogObject(),\n          });\n          throw new Error(\n            `Migration ${migration.version} failed: ${error.message}`,\n          );\n        }\n      }\n\n      return {\n        executed,\n        skipped: allMigrations.length - pendingMigrations.length,\n      };\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * 回滚最后一次迁移 (migrate down)\n   */\n  async migrateDown(steps = 1): Promise<Migration[]> {\n    const client = await this.pool.connect();\n    try {\n      await this.ensureMigrationTable(client);\n      const executedVersions = await this.getExecutedMigrations(client);\n\n      if (executedVersions.length === 0) {\n        logger.info('没有可回滚的迁移', { component: 'MigrationManager' });\n        return [];\n      }\n\n      const allMigrations = await this.loadMigrations();\n      const versionsToRollback = executedVersions.slice(-steps).reverse();\n      const rolledBack: Migration[] = [];\n\n      for (const version of versionsToRollback) {\n        const migration = allMigrations.find(m => m.version === version);\n        if (!migration) {\n          logger.warn(`找不到迁移脚本: ${version}`, { component: 'MigrationManager' });\n          continue;\n        }\n\n        if (!migration.down) {\n          throw new Error(`Migration ${version} does not have a DOWN script`);\n        }\n\n        logger.info(`回滚迁移: ${migration.version} - ${migration.name}`, {\n          component: 'MigrationManager',\n        });\n\n        try {\n          await client.query('BEGIN');\n          await client.query(migration.down);\n          await this.unrecordMigration(client, version);\n          await client.query('COMMIT');\n\n          rolledBack.push(migration);\n          logger.info(`回滚成功: ${migration.version} - ${migration.name}`, {\n            component: 'MigrationManager',\n          });\n        } catch (unknownError: unknown) {\n          await client.query('ROLLBACK');\n          const error = createErrorFromUnknown(unknownError, {\n            component: 'MigrationManager',\n            operation: 'migrateDown',\n          });\n          logger.error(`回滚失败: ${migration.version} - ${migration.name}`, {\n            component: 'MigrationManager',\n            error: error.toLogObject(),\n          });\n          throw new Error(\n            `Migration rollback ${version} failed: ${error.message}`,\n          );\n        }\n      }\n\n      return rolledBack;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * 获取迁移状态\n   */\n  async getStatus(): Promise<{\n    executed: MigrationRecord[];\n    pending: Migration[];\n    total: number;\n  }> {\n    const client = await this.pool.connect();\n    try {\n      await this.ensureMigrationTable(client);\n      const executedVersions = await this.getExecutedMigrations(client);\n      const allMigrations = await this.loadMigrations();\n\n      const executedResult = await client.query<MigrationRecord>(\n        'SELECT version, name, executed_at FROM schema_migrations ORDER BY version ASC',\n      );\n\n      const pending = allMigrations.filter(m => !executedVersions.includes(m.version));\n\n      return {\n        executed: executedResult.rows,\n        pending,\n        total: allMigrations.length,\n      };\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * 强制将特定迁移标记为已执行（危险操作,谨慎使用）\n   */\n  async markAsExecuted(version: string, name: string): Promise<void> {\n    const client = await this.pool.connect();\n    try {\n      await this.ensureMigrationTable(client);\n      await client.query(\n        'INSERT INTO schema_migrations (version, name, executed_at) VALUES ($1, $2, NOW()) ON CONFLICT DO NOTHING',\n        [version, name],\n      );\n      logger.info(`迁移 ${version} 已标记为已执行`, { component: 'MigrationManager' });\n    } finally {\n      client.release();\n    }\n  }\n}\n\n/**\n * 创建迁移管理器实例\n */\nexport function createMigrationManager(pool: Pool, migrationsDir?: string): MigrationManager {\n  return new MigrationManager(pool, migrationsDir);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/queryCache.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 101. Maximum allowed is 100.","line":109,"column":1,"nodeType":"Program","messageId":"max","endLine":109,"endColumn":102},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":194,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":194,"endColumn":32,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3974,3975],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":208,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":208,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":247,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":247,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":368,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":368,"endColumn":65},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":492,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":492,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":511,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":511,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.9.","line":519,"column":22,"nodeType":"Literal","messageId":"noMagic","endLine":519,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":576,"column":10,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":576,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of type any[] to a variable of type (string | number | boolean | null)[].","line":605,"column":9,"nodeType":"AssignmentExpression","messageId":"unsafeAssignment","endLine":605,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据库查询缓存工具\n *\n * 提供查询结果缓存、智能失效、缓存统计等功能\n */\n\nimport { createHash } from 'crypto';\nimport logger from '@/utils/logger';\n\n// 缓存项接口\nexport interface CacheItem<T = unknown> {\n  /** 缓存的数据 */\n  data: T;\n  /** 创建时间 */\n  createdAt: number;\n  /** 过期时间 */\n  expiresAt: number;\n  /** 访问次数 */\n  accessCount: number;\n  /** 最后访问时间 */\n  lastAccessAt: number;\n  /** 缓存键 */\n  key: string;\n  /** 查询语句 */\n  query: string;\n  /** 参数 */\n  params?: Array<string | number | boolean | null>;\n  /** 数据标签（用于失效） */\n  tags?: string[];\n  /** 数据大小（字节） */\n  size: number;\n}\n\n// 缓存配置接口\nexport interface CacheConfig {\n  /** 默认TTL（毫秒） */\n  defaultTtl: number;\n  /** 最大缓存项数量 */\n  maxItems: number;\n  /** 最大缓存大小（字节） */\n  maxSize: number;\n  /** 清理间隔（毫秒） */\n  cleanupInterval: number;\n  /** 是否启用压缩 */\n  enableCompression: boolean;\n  /** 压缩阈值（字节） */\n  compressionThreshold: number;\n}\n\n// 缓存统计接口\nexport interface CacheStats {\n  /** 总缓存项数 */\n  totalItems: number;\n  /** 缓存大小（字节） */\n  totalSize: number;\n  /** 命中次数 */\n  hits: number;\n  /** 未命中次数 */\n  misses: number;\n  /** 命中率 */\n  hitRate: number;\n  /** 过期项数 */\n  expiredItems: number;\n  /** 被驱逐项数 */\n  evictedItems: number;\n  /** 创建项数 */\n  createdItems: number;\n  /** 更新项数 */\n  updatedItems: number;\n}\n\n/**\n * 查询缓存类\n */\nexport class QueryCache {\n  private readonly cache = new Map<string, CacheItem>();\n  private config: CacheConfig;\n  private readonly stats: CacheStats = {\n    totalItems: 0,\n    totalSize: 0,\n    hits: 0,\n    misses: 0,\n    hitRate: 0,\n    expiredItems: 0,\n    evictedItems: 0,\n    createdItems: 0,\n    updatedItems: 0,\n  };\n  private cleanupTimer: NodeJS.Timeout | null = null;\n  private readonly tagIndex = new Map<string, Set<string>>(); // 标签到缓存键的索引\n\n  constructor(config: Partial<CacheConfig> = {}) {\n    this.config = {\n      defaultTtl: 5 * 60 * 1000, // 5分钟\n      maxItems: 1000,\n      maxSize: 100 * 1024 * 1024, // 100MB\n      cleanupInterval: 60 * 1000, // 1分钟\n      enableCompression: false,\n      compressionThreshold: 1024, // 1KB\n      ...config,\n    };\n\n    this.startCleanupTimer();\n  }\n\n  /**\n   * 生成缓存键\n   */\n  private generateCacheKey(query: string, params?: Array<string | number | boolean | null>): string {\n    const keyData = {\n      query: query.trim().toLowerCase(),\n      params: params ?? [],\n    };\n\n    const keyString = JSON.stringify(keyData);\n    return createHash('md5').update(keyString).digest('hex');\n  }\n\n  /**\n   * 计算数据大小\n   */\n  private calculateSize(data: unknown): number {\n    return Buffer.byteLength(JSON.stringify(data), 'utf8');\n  }\n\n  /**\n   * 压缩数据（如果需要）\n   */\n  private compressData<T>(data: T): T {\n    if (!this.config.enableCompression) {\n      return data;\n    }\n\n    const size = this.calculateSize(data);\n    if (size < this.config.compressionThreshold) {\n      return data;\n    }\n\n    // 这里可以添加实际的压缩逻辑\n    // 为了简单起见，暂时返回原数据\n    return data;\n  }\n\n  /**\n   * 解压数据\n   */\n  private decompressData<T>(data: T): T {\n    // 对应压缩逻辑的实现\n    return data;\n  }\n\n  /**\n   * 设置缓存项\n   */\n  set<T = unknown>(\n    query: string,\n    data: T,\n    options: {\n      ttl?: number;\n      tags?: string[];\n      params?: Array<string | number | boolean | null>;\n    } = {},\n  ): void {\n    const cacheKey = this.generateCacheKey(query, options.params);\n    const now = Date.now();\n    const ttl = options.ttl ?? this.config.defaultTtl;\n    const size = this.calculateSize(data);\n\n    // 检查是否需要清理空间\n    this.ensureSpace(size);\n\n    const cacheItem: CacheItem<T> = {\n      data: this.compressData(data),\n      createdAt: now,\n      expiresAt: now + ttl,\n      accessCount: 0,\n      lastAccessAt: now,\n      key: cacheKey,\n      query,\n      params: options.params ?? [],\n      tags: options.tags ?? [],\n      size,\n    };\n\n    const isUpdate = this.cache.has(cacheKey);\n    this.cache.set(cacheKey, cacheItem);\n\n    // 更新标签索引\n    if (options.tags) {\n      options.tags.forEach(tag => {\n        if (!this.tagIndex.has(tag)) {\n          this.tagIndex.set(tag, new Set());\n        }\n        this.tagIndex.get(tag)!.add(cacheKey);\n      });\n    }\n\n    // 更新统计\n    if (isUpdate) {\n      this.stats.updatedItems++;\n    } else {\n      this.stats.createdItems++;\n      this.stats.totalItems++;\n    }\n    this.stats.totalSize = this.getCurrentTotalSize();\n\n    logger.debug('缓存项已设置', {\n      cacheKey: cacheKey.substring(0, 8),\n      isUpdate,\n      size,\n      ttl,\n    });\n  }\n\n  /**\n   * 获取缓存项\n   */\n  get<T = unknown>(query: string, params?: Array<string | number | boolean | null>): T | null {\n    const cacheKey = this.generateCacheKey(query, params);\n    const item = this.cache.get(cacheKey);\n\n    if (!item) {\n      this.stats.misses++;\n      this.updateHitRate();\n      return null;\n    }\n\n    const now = Date.now();\n\n    // 检查是否过期\n    if (now > item.expiresAt) {\n      this.delete(cacheKey);\n      this.stats.misses++;\n      this.stats.expiredItems++;\n      this.updateHitRate();\n      return null;\n    }\n\n    // 更新访问统计\n    item.accessCount++;\n    item.lastAccessAt = now;\n\n    this.stats.hits++;\n    this.updateHitRate();\n\n    logger.debug('缓存命中', {\n      cacheKey: cacheKey.substring(0, 8),\n      accessCount: item.accessCount,\n      age: now - item.createdAt,\n    });\n\n    return this.decompressData(item.data) as T;\n  }\n\n  /**\n   * 删除缓存项\n   */\n  delete(cacheKey: string): boolean {\n    const item = this.cache.get(cacheKey);\n    if (!item) {\n      return false;\n    }\n\n    // 从标签索引中移除\n    if (item.tags) {\n      item.tags.forEach(tag => {\n        const keys = this.tagIndex.get(tag);\n        if (keys) {\n          keys.delete(cacheKey);\n          if (keys.size === 0) {\n            this.tagIndex.delete(tag);\n          }\n        }\n      });\n    }\n\n    this.cache.delete(cacheKey);\n    this.stats.totalItems--;\n    this.stats.totalSize = this.getCurrentTotalSize();\n\n    return true;\n  }\n\n  /**\n   * 按标签删除缓存项\n   */\n  deleteByTag(tag: string): number {\n    const keys = this.tagIndex.get(tag);\n    if (!keys) {\n      return 0;\n    }\n\n    let deletedCount = 0;\n    for (const key of keys) {\n      if (this.delete(key)) {\n        deletedCount++;\n      }\n    }\n\n    logger.info('按标签删除缓存项', { tag, deletedCount });\n    return deletedCount;\n  }\n\n  /**\n   * 按查询模式删除缓存项\n   */\n  deleteByQueryPattern(pattern: RegExp): number {\n    let deletedCount = 0;\n\n    for (const [key, item] of this.cache) {\n      if (pattern.test(item.query)) {\n        if (this.delete(key)) {\n          deletedCount++;\n        }\n      }\n    }\n\n    logger.info('按查询模式删除缓存项', { pattern: pattern.toString(), deletedCount });\n    return deletedCount;\n  }\n\n  /**\n   * 清空所有缓存\n   */\n  clear(): void {\n    const itemCount = this.cache.size;\n    this.cache.clear();\n    this.tagIndex.clear();\n\n    this.stats.totalItems = 0;\n    this.stats.totalSize = 0;\n\n    logger.info('缓存已清空', { itemCount });\n  }\n\n  /**\n   * 确保有足够的空间\n   */\n  private ensureSpace(requiredSize: number): void {\n    // 检查项数限制\n    while (this.cache.size >= this.config.maxItems) {\n      this.evictLeastRecentlyUsed();\n    }\n\n    // 检查大小限制\n    while (this.getCurrentTotalSize() + requiredSize > this.config.maxSize) {\n      this.evictLeastRecentlyUsed();\n    }\n  }\n\n  /**\n   * 驱逐最少使用的缓存项\n   */\n  private evictLeastRecentlyUsed(): void {\n    let lruKey: string | null = null;\n    let lruTime = Date.now();\n\n    for (const [key, item] of this.cache) {\n      if (item.lastAccessAt < lruTime) {\n        lruTime = item.lastAccessAt;\n        lruKey = key;\n      }\n    }\n\n    if (lruKey) {\n      this.delete(lruKey);\n      this.stats.evictedItems++;\n      logger.debug('驱逐LRU缓存项', { cacheKey: lruKey.substring(0, 8) });\n    }\n  }\n\n  /**\n   * 获取当前总大小\n   */\n  private getCurrentTotalSize(): number {\n    let totalSize = 0;\n    for (const item of this.cache.values()) {\n      totalSize += item.size;\n    }\n    return totalSize;\n  }\n\n  /**\n   * 更新命中率\n   */\n  private updateHitRate(): void {\n    const total = this.stats.hits + this.stats.misses;\n    this.stats.hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;\n  }\n\n  /**\n   * 启动清理定时器\n   */\n  private startCleanupTimer(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n\n    this.cleanupTimer = setInterval(() => {\n      this.cleanup();\n    }, this.config.cleanupInterval);\n  }\n\n  /**\n   * 清理过期项\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    const expiredKeys: string[] = [];\n\n    for (const [key, item] of this.cache) {\n      if (now > item.expiresAt) {\n        expiredKeys.push(key);\n      }\n    }\n\n    let cleanedCount = 0;\n    for (const key of expiredKeys) {\n      if (this.delete(key)) {\n        cleanedCount++;\n        this.stats.expiredItems++;\n      }\n    }\n\n    if (cleanedCount > 0) {\n      logger.debug('清理过期缓存项', { cleanedCount });\n    }\n  }\n\n  /**\n   * 获取缓存统计\n   */\n  getStats(): CacheStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * 获取缓存项详情\n   */\n  getCacheItems(limit = 100): CacheItem[] {\n    return Array.from(this.cache.values())\n      .sort((a, b) => b.lastAccessAt - a.lastAccessAt)\n      .slice(0, limit);\n  }\n\n  /**\n   * 获取缓存配置\n   */\n  getConfig(): CacheConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * 更新配置\n   */\n  updateConfig(newConfig: Partial<CacheConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    logger.info('缓存配置已更新', { config: this.config });\n  }\n\n  /**\n   * 生成性能报告\n   */\n  generatePerformanceReport(): string {\n    const stats = this.getStats();\n    const config = this.getConfig();\n    const topItems = this.getCacheItems(10);\n\n    return `\n查询缓存性能报告\n================\n\n📊 基础统计\n- 总缓存项: ${stats.totalItems}\n- 缓存大小: ${(stats.totalSize / 1024 / 1024).toFixed(2)}MB\n- 命中次数: ${stats.hits}\n- 未命中次数: ${stats.misses}\n- 命中率: ${stats.hitRate.toFixed(2)}%\n- 过期项数: ${stats.expiredItems}\n- 驱逐项数: ${stats.evictedItems}\n\n⚙️ 缓存配置\n- 默认TTL: ${(config.defaultTtl / 1000).toFixed(0)}秒\n- 最大项数: ${config.maxItems}\n- 最大大小: ${(config.maxSize / 1024 / 1024).toFixed(0)}MB\n- 清理间隔: ${(config.cleanupInterval / 1000).toFixed(0)}秒\n- 启用压缩: ${config.enableCompression ? '是' : '否'}\n\n🏆 热门缓存项TOP10\n${topItems.length > 0 ?\n  topItems.map((item, index) =>\n    `${index + 1}. ${item.query.substring(0, 50)}... (访问${item.accessCount}次)`,\n  ).join('\\n') :\n  '暂无缓存项'\n}\n\n💡 缓存建议\n${this.generateRecommendations()}\n    `.trim();\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateRecommendations(): string[] {\n    const recommendations: string[] = [];\n    const stats = this.getStats();\n    const config = this.getConfig();\n\n    // 命中率建议\n    if (stats.hitRate < 50) {\n      recommendations.push('命中率较低，建议检查缓存策略或增加TTL时间');\n    } else if (stats.hitRate > 90) {\n      recommendations.push('命中率很高，缓存策略效果良好');\n    }\n\n    // 大小建议\n    const usageRatio = stats.totalSize / config.maxSize;\n    if (usageRatio > 0.9) {\n      recommendations.push('缓存使用率过高，建议增加最大缓存大小');\n    } else if (usageRatio < 0.3) {\n      recommendations.push('缓存使用率较低，可以减少最大缓存大小以节省内存');\n    }\n\n    // 驱逐建议\n    if (stats.evictedItems > stats.createdItems * 0.1) {\n      recommendations.push('驱逐项数较多，建议增加最大缓存大小或优化缓存策略');\n    }\n\n    // 过期建议\n    if (stats.expiredItems > stats.createdItems * 0.3) {\n      recommendations.push('过期项数较多，建议调整TTL时间');\n    }\n\n    return recommendations.length > 0 ? recommendations : ['缓存运行状态良好'];\n  }\n\n  /**\n   * 停止缓存（清理定时器）\n   */\n  stop(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = null;\n    }\n    logger.info('查询缓存已停止');\n  }\n\n  /**\n   * 导出缓存数据\n   */\n  exportData(): {\n    stats: CacheStats;\n    config: CacheConfig;\n    items: CacheItem[];\n  } {\n    return {\n      stats: this.getStats(),\n      config: this.getConfig(),\n      items: this.getCacheItems(),\n    };\n  }\n}\n\n// 创建默认缓存实例\nexport const defaultQueryCache = new QueryCache();\n\n/**\n * 缓存装饰器\n */\nexport function cacheQuery(options: {\n  ttl?: number;\n  tags?: string[];\n  key?: string;\n} = {}) {\n  return function(target: object, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value as (...args: Array<unknown>) => Promise<unknown>;\n\n    descriptor.value = async function(...args: Array<unknown>) {\n      const query = typeof args[0] === 'string' ? args[0] : '';\n      const params = Array.isArray(args[1]) ? args[1] : undefined;\n\n      // 尝试从缓存获取\n      const cached = defaultQueryCache.get(query, params);\n      if (cached !== null) {\n        return cached;\n      }\n\n      // 执行原方法\n      const result = await method.apply(this, args);\n\n      // 存入缓存\n      const cacheOptions: {\n        ttl?: number;\n        tags?: string[];\n        params?: Array<string | number | boolean | null>;\n      } = {};\n      if (options.ttl !== undefined) {\n        cacheOptions.ttl = options.ttl;\n      }\n      if (options.tags) {\n        cacheOptions.tags = options.tags;\n      }\n      if (params) {\n        cacheOptions.params = params;\n      }\n\n      defaultQueryCache.set(query, result, cacheOptions);\n\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n\nexport default QueryCache;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/redisConnectionPool.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":105,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":105,"endColumn":54},{"ruleId":"max-len","severity":1,"message":"This line has a length of 116. Maximum allowed is 100.","line":134,"column":1,"nodeType":"Program","messageId":"max","endLine":134,"endColumn":117},{"ruleId":"max-len","severity":1,"message":"This line has a length of 122. Maximum allowed is 100.","line":135,"column":1,"nodeType":"Program","messageId":"max","endLine":135,"endColumn":123},{"ruleId":"max-len","severity":1,"message":"This line has a length of 104. Maximum allowed is 100.","line":138,"column":1,"nodeType":"Program","messageId":"max","endLine":138,"endColumn":105},{"ruleId":"max-len","severity":1,"message":"This line has a length of 104. Maximum allowed is 100.","line":139,"column":1,"nodeType":"Program","messageId":"max","endLine":139,"endColumn":105},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":203,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":203,"endColumn":55},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":304,"column":60,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":304,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":1,"message":"Unsafe argument of type `any` assigned to a parameter of type `Error`.","line":320,"column":28,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":320,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: -100.","line":345,"column":53,"nodeType":"UnaryExpression","messageId":"noMagic","endLine":345,"endColumn":57},{"ruleId":"max-len","severity":1,"message":"This line has a length of 117. Maximum allowed is 100.","line":349,"column":1,"nodeType":"Program","messageId":"max","endLine":349,"endColumn":118},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":358,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":358,"endColumn":41},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":386,"column":25,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":386,"endColumn":55},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":392,"column":58,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":392,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Redis连接池管理器\n * 提供连接池管理、连接重用、性能监控等功能\n */\n\nimport Redis from 'ioredis';\nimport logger from '@/utils/logger';\nimport { EventEmitter } from 'events';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface RedisPoolConfig {\n  host: string;\n  port: number;\n  password?: string;\n  db?: number;\n  keyPrefix?: string;\n  // 连接池配置\n  maxConnections?: number;\n  minConnections?: number;\n  acquireTimeoutMillis?: number;\n  createTimeoutMillis?: number;\n  destroyTimeoutMillis?: number;\n  idleTimeoutMillis?: number;\n  reapIntervalMillis?: number;\n  // 性能配置\n  enableOfflineQueue?: boolean;\n  maxRetriesPerRequest?: number | null;\n  retryDelayOnFailover?: number;\n  lazyConnect?: boolean;\n  keepAlive?: number;\n  connectTimeout?: number;\n  commandTimeout?: number;\n}\n\nexport interface ConnectionStats {\n  total: number;\n  active: number;\n  idle: number;\n  waiting: number;\n  errors: number;\n  avgResponseTime: number;\n  lastError?: string;\n  lastUsed?: Date;\n}\n\nexport class RedisConnectionPool extends EventEmitter {\n  private readonly config: RedisPoolConfig;\n  private pool: Redis[] = [];\n  private readonly activeConnections: Set<Redis> = new Set();\n  private waitingQueue: Array<{\n    resolve: (connection: Redis) => void;\n    reject: (error: Error) => void;\n    timeout: NodeJS.Timeout;\n  }> = [];\n  private readonly stats: ConnectionStats = {\n    total: 0,\n    active: 0,\n    idle: 0,\n    waiting: 0,\n    errors: 0,\n    avgResponseTime: 0,\n  };\n  private responseTimes: number[] = [];\n  private maintenanceInterval?: NodeJS.Timeout;\n  private isShuttingDown = false;\n  private lastStatsTime = 0; // ✅ 用于记录上次统计日志时间\n\n  constructor(config: RedisPoolConfig) {\n    super();\n    this.config = {\n      maxConnections: 10,\n      minConnections: 2,\n      acquireTimeoutMillis: 30000,\n      createTimeoutMillis: 5000,\n      destroyTimeoutMillis: 5000,\n      idleTimeoutMillis: 30000,\n      reapIntervalMillis: 1000,\n      enableOfflineQueue: true,\n      maxRetriesPerRequest: 3,\n      retryDelayOnFailover: 100,\n      lazyConnect: true, // 修改为延迟连接，避免构造函数中阻塞\n      keepAlive: 30000,\n      connectTimeout: 10000,\n      commandTimeout: 5000,\n      ...config,\n    };\n\n    // 异步初始化，避免阻塞构造函数\n    this.initializePool().catch((error) => {\n      logger.error('RedisConnectionPool: 初始化失败，将以降级模式运行', error);\n      // 不抛出错误，允许服务继续启动\n    });\n    this.startMaintenance();\n  }\n\n  /**\n   * 初始化连接池\n   */\n  private async initializePool(): Promise<void> {\n    logger.info(`RedisConnectionPool: Initializing pool with ${this.config.minConnections} connections`);\n\n    try {\n      // 创建最小连接数\n      const promises = [];\n      for (let i = 0; i < this.config.minConnections!; i++) {\n        promises.push(this.createConnection());\n      }\n\n      await Promise.all(promises);\n      logger.info(`RedisConnectionPool: Pool initialized with ${this.pool.length} connections`);\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisConnectionPool',\n        operation: 'initializePool',\n      });\n      logger.error('RedisConnectionPool: Failed to initialize pool:', error.toLogObject());\n      throw error;\n    }\n  }\n\n  /**\n   * 创建新连接\n   */\n  private async createConnection(): Promise<Redis> {\n    const startTime = Date.now();\n\n    return new Promise((resolve, reject) => {\n      const connection = new Redis({\n        host: this.config.host,\n        port: this.config.port,\n        db: this.config.db ?? 0,\n        keyPrefix: this.config.keyPrefix ?? 'llmchat:',\n        ...(this.config.password !== undefined && { password: this.config.password }),\n        ...(this.config.enableOfflineQueue !== undefined && { enableOfflineQueue: this.config.enableOfflineQueue }),\n        ...(this.config.maxRetriesPerRequest !== undefined && { maxRetriesPerRequest: this.config.maxRetriesPerRequest }),\n        ...(this.config.lazyConnect !== undefined && { lazyConnect: this.config.lazyConnect }),\n        ...(this.config.keepAlive !== undefined && { keepAlive: this.config.keepAlive }),\n        ...(this.config.connectTimeout !== undefined && { connectTimeout: this.config.connectTimeout }),\n        ...(this.config.commandTimeout !== undefined && { commandTimeout: this.config.commandTimeout }),\n      });\n\n      const timeout = setTimeout(() => {\n        reject(new Error('Connection creation timeout'));\n      }, this.config.createTimeoutMillis);\n\n      connection.on('connect', () => {\n        clearTimeout(timeout);\n        const responseTime = Date.now() - startTime;\n        this.updateResponseTime(responseTime);\n\n        // ✅ 移除高频debug日志，改用定时统计\n        this.emit('connection:created', connection);\n        resolve(connection);\n      });\n\n      connection.on('error', (error) => {\n        clearTimeout(timeout);\n        this.stats.errors++;\n        this.stats.lastError = error.message;\n        this.emit('connection:error', connection, error);\n        logger.error('RedisConnectionPool: Connection error:', error);\n\n        // 从池中移除损坏的连接\n        this.removeConnection(connection);\n        reject(error);\n      });\n\n      connection.on('close', () => {\n        this.emit('connection:closed', connection);\n        // ✅ 移除高频debug日志\n        this.removeConnection(connection);\n      });\n\n      // 将连接添加到池中\n      this.pool.push(connection);\n      this.stats.total++;\n    });\n  }\n\n  /**\n   * 获取连接\n   */\n  public async acquire(): Promise<Redis> {\n    if (this.isShuttingDown) {\n      throw new Error('Connection pool is shutting down');\n    }\n\n    // 查找空闲连接\n    const idleConnection = this.pool.find(conn => !this.activeConnections.has(conn));\n\n    if (idleConnection) {\n      this.activeConnections.add(idleConnection);\n      this.stats.active++;\n      this.stats.idle = Math.max(0, this.stats.idle - 1);\n      this.stats.lastUsed = new Date();\n\n      // ✅ 改为定时统计\n      this.logStatsIfNeeded();\n      return idleConnection;\n    }\n\n    // 如果池未满，创建新连接\n    if (this.pool.length < this.config.maxConnections!) {\n      const connection = this.pool[this.pool.length - 1]; // 最近创建的连接\n      if (connection && !this.activeConnections.has(connection)) {\n        this.activeConnections.add(connection);\n        this.stats.active++;\n        this.stats.lastUsed = new Date();\n\n        // ✅ 改为定时统计\n        this.logStatsIfNeeded();\n        return connection;\n      }\n\n      try {\n        const connection = await this.createConnection();\n        this.activeConnections.add(connection);\n        this.stats.active++;\n        this.stats.lastUsed = new Date();\n        this.logStatsIfNeeded(); // ✅ 添加统计调用\n        return connection;\n      } catch (unknownError: unknown) {\n        const error = createErrorFromUnknown(unknownError, {\n          component: 'RedisConnectionPool',\n          operation: 'acquire.createConnection',\n        });\n        logger.error('RedisConnectionPool: Failed to create new connection:', error.toLogObject());\n        throw error;\n      }\n    }\n\n    // 池已满，等待连接释放\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        const index = this.waitingQueue.findIndex(item => item.resolve === resolve);\n        if (index !== -1) {\n          this.waitingQueue.splice(index, 1);\n        }\n        reject(new Error('Connection acquire timeout'));\n      }, this.config.acquireTimeoutMillis);\n\n      this.waitingQueue.push({\n        resolve,\n        reject,\n        timeout,\n      });\n\n      this.stats.waiting++;\n      // ✅ 移除高频debug日志，改用定时统计\n    });\n  }\n\n  /**\n   * 释放连接\n   */\n  public release(connection: Redis): void {\n    if (!this.activeConnections.has(connection)) {\n      return; // 连接不在活跃集合中\n    }\n\n    this.activeConnections.delete(connection);\n    this.stats.active--;\n    this.stats.idle++;\n\n    // 如果有等待的请求，立即分配\n    if (this.waitingQueue.length > 0) {\n      const waiting = this.waitingQueue.shift();\n      if (waiting) {\n        clearTimeout(waiting.timeout);\n\n        this.activeConnections.add(connection);\n        this.stats.active++;\n        this.stats.idle = Math.max(0, this.stats.idle - 1);\n        this.stats.waiting--;\n\n        waiting.resolve(connection);\n        // ✅ 移除重复的debug日志\n      }\n      // ✅ 移除重复的debug日志\n    } else {\n      // 将连接标记为空闲\n      this.stats.lastUsed = new Date();\n      // ✅ 移除高频debug日志\n    }\n\n    // ✅ 添加定时统计\n    this.logStatsIfNeeded();\n  }\n\n  /**\n   * 从池中移除连接\n   */\n  private removeConnection(connection: Redis): void {\n    const index = this.pool.indexOf(connection);\n    if (index !== -1) {\n      this.pool.splice(index, 1);\n      this.stats.total--;\n    }\n\n    this.activeConnections.delete(connection);\n    this.stats.active = Math.max(0, this.stats.active - 1);\n\n    // 如果有等待的请求，尝试创建新连接\n    if (this.waitingQueue.length > 0 && this.pool.length < this.config.maxConnections!) {\n      this.createConnection()\n        .then(newConnection => {\n          const waiting = this.waitingQueue.shift();\n          if (waiting) {\n            clearTimeout(waiting.timeout);\n            this.activeConnections.add(newConnection);\n            this.stats.active++;\n            waiting.resolve(newConnection);\n          }\n        })\n        .catch(error => {\n          logger.error('RedisConnectionPool: Failed to create replacement connection:', error);\n          const waiting = this.waitingQueue.shift();\n          if (waiting) {\n            clearTimeout(waiting.timeout);\n            waiting.reject(error);\n          }\n        });\n    }\n  }\n\n  /**\n   * 获取连接池统计信息\n   */\n  public getStats(): ConnectionStats {\n    return {\n      ...this.stats,\n      total: this.pool.length,\n      idle: this.pool.filter(conn => !this.activeConnections.has(conn)).length,\n    };\n  }\n\n  /**\n   * 更新响应时间统计\n   */\n  private updateResponseTime(responseTime: number): void {\n    this.responseTimes.push(responseTime);\n\n    // 只保留最近100次请求的响应时间\n    if (this.responseTimes.length > 100) {\n      this.responseTimes = this.responseTimes.slice(-100);\n    }\n\n    // 计算平均响应时间\n    this.stats.avgResponseTime = this.responseTimes.reduce((sum, time) => sum + time, 0) / this.responseTimes.length;\n  }\n\n  /**\n   * 记录连接池统计信息（降频：每分钟最多1次）\n   * ✅ 替代原来的高频debug日志\n   */\n  private logStatsIfNeeded(): void {\n    const now = Date.now();\n    if (now - this.lastStatsTime > 60000) { // 60秒\n      const stats = this.getStats();\n      logger.info('RedisConnectionPool stats', {\n        total: stats.total,\n        active: stats.active,\n        idle: stats.idle,\n        waiting: stats.waiting,\n        avgResponseTime: stats.avgResponseTime.toFixed(2) + 'ms',\n      });\n      this.lastStatsTime = now;\n    }\n  }\n\n  /**\n   * 启动维护任务\n   */\n  private startMaintenance(): void {\n    this.maintenanceInterval = setInterval(() => {\n      this.performMaintenance();\n    }, this.config.reapIntervalMillis);\n  }\n\n  /**\n   * 执行维护任务\n   */\n  private performMaintenance(): void {\n    // 关闭长时间空闲的连接\n    const now = Date.now();\n    const idleTimeout = this.config.idleTimeoutMillis!;\n\n    for (let i = this.pool.length - 1; i >= 0; i--) {\n      const connection = this.pool[i];\n      if (connection && !this.activeConnections.has(connection) && this.stats.lastUsed) {\n        const idleTime = now - this.stats.lastUsed.getTime();\n        if (idleTime > idleTimeout && this.pool.length > this.config.minConnections!) {\n          // ✅ 移除高频debug日志，维护操作不需要逐个记录\n          connection.disconnect();\n          this.removeConnection(connection);\n        }\n      }\n    }\n  }\n\n  /**\n   * 健康检查\n   */\n  public async healthCheck(): Promise<boolean> {\n    try {\n      const connection = await this.acquire();\n      await connection.ping();\n      this.release(connection);\n      return true;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'RedisConnectionPool',\n        operation: 'healthCheck',\n      });\n      logger.error('RedisConnectionPool: Health check failed:', error.toLogObject());\n      return false;\n    }\n  }\n\n  /**\n   * 关闭连接池\n   */\n  public async shutdown(): Promise<void> {\n    this.isShuttingDown = true;\n\n    if (this.maintenanceInterval) {\n      clearInterval(this.maintenanceInterval);\n    }\n\n    // 拒绝所有等待的请求\n    this.waitingQueue.forEach(waiting => {\n      clearTimeout(waiting.timeout);\n      waiting.reject(new Error('Connection pool is shutting down'));\n    });\n    this.waitingQueue = [];\n\n    // 关闭所有连接\n    const closePromises = this.pool.map(connection => {\n      return connection.quit().catch(error => {\n        logger.error('RedisConnectionPool: Error closing connection:', error);\n      });\n    });\n\n    await Promise.all(closePromises);\n    this.pool = [];\n    this.activeConnections.clear();\n\n    logger.info('RedisConnectionPool: Pool shutdown complete');\n  }\n}\n\nexport default RedisConnectionPool;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/secureCredentials.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 329_876.","line":20,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":20,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 32.","line":21,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":21,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 16.","line":22,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":22,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":23,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":182,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":182,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":182,"column":72,"nodeType":"Literal","messageId":"noMagic","endLine":182,"endColumn":73}],"suppressedMessages":[{"ruleId":"no-sync","severity":1,"message":"Unexpected sync method: 'pbkdf2Sync'.","line":45,"column":12,"nodeType":"MemberExpression","messageId":"noSync","endLine":45,"endColumn":29,"suppressions":[{"kind":"directive","justification":"Sync key derivation is required for security"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Credentials Manager\n *\n * Provides encryption at rest for sensitive credentials like database passwords\n * and API keys using AES-256-CBC encryption with environment-derived keys.\n */\n\nimport crypto from 'crypto';\nimport logger from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface EncryptedData {\n  data: string;      // Base64 encoded encrypted data\n  iv: string;        // Base64 encoded initialization vector\n  algorithm: string; // Encryption algorithm used\n}\n\nexport class SecureCredentialsManager {\n  private static readonly ALGORITHM = 'aes-256-cbc';\n  private static readonly SALT_ROUNDS = 329_876; // NIST recommended\n  private static readonly KEY_LENGTH = 32; // AES-256 key length in bytes\n  private static readonly IV_LENGTH = 16; // CBC IV length in bytes\n  private static readonly MIN_DATA_LENGTH_FOR_MASK = 8; // Minimum length for masking\n\n  /**\n   * Derives encryption key from environment variables using PBKDF2\n   */\n  private static deriveKey(): Buffer {\n    const secretSources = [\n      process.env.TOKEN_SECRET ?? process.env.JWT_SECRET ?? 'default-secret',\n      process.env.DATABASE_URL ?? '',\n      process.env.NODE_ENV ?? 'development',\n      process.env.HOSTNAME ?? '',\n      'llmchat-credentials-salt-2024', // Fixed salt component\n    ];\n\n    // Create combined secret\n    const combinedSecret = secretSources.join('|');\n\n    // Create consistent salt from environment\n    const saltInput = process.env.CREDENTIALS_SALT ?? 'llmchat-default-salt';\n    const salt = crypto.createHash('sha256').update(saltInput).digest();\n\n    // eslint-disable-next-line no-sync -- Sync key derivation is required for security\n    return crypto.pbkdf2Sync(combinedSecret, salt, this.SALT_ROUNDS, this.KEY_LENGTH, 'sha256');\n  }\n\n  /**\n   * Encrypts sensitive data\n   */\n  static encrypt(plaintext: string): EncryptedData {\n    try {\n      const key = this.deriveKey();\n      const iv = crypto.randomBytes(this.IV_LENGTH); // CBC needs 16-byte IV\n\n      const cipher = crypto.createCipheriv(this.ALGORITHM, key, iv);\n\n      const encrypted = Buffer.concat([\n        cipher.update(plaintext, 'utf8'),\n        cipher.final(),\n      ]);\n\n      return {\n        data: Buffer.from(encrypted).toString('base64'),\n        iv: iv.toString('base64'),\n        algorithm: this.ALGORITHM,\n      };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SecureCredentialsManager',\n        operation: 'encrypt',\n      });\n      logger.error('[SecureCredentialsManager] Encryption failed', { error: error.toLogObject() });\n      throw new Error('Failed to encrypt sensitive data');\n    }\n  }\n\n  /**\n   * Decrypts sensitive data\n   */\n  static decrypt(encryptedData: EncryptedData): string {\n    try {\n      const key = this.deriveKey();\n      const iv = Buffer.from(encryptedData.iv, 'base64');\n\n      const decipher = crypto.createDecipheriv(encryptedData.algorithm, key, iv);\n\n      const encryptedBuffer = Buffer.from(encryptedData.data, 'base64');\n      const decrypted = Buffer.concat([\n        decipher.update(encryptedBuffer),\n        decipher.final(),\n      ]);\n\n      return decrypted.toString('utf8');\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SecureCredentialsManager',\n        operation: 'decrypt',\n      });\n      logger.error('[SecureCredentialsManager] Decryption failed', { error: error.toLogObject() });\n      throw new Error('Failed to decrypt sensitive data');\n    }\n  }\n\n  /**\n   * Encrypts database password for secure storage\n   */\n  static encryptDatabasePassword(password: string): EncryptedData {\n    return this.encrypt(password);\n  }\n\n  /**\n   * Decrypts database password for use in connections\n   */\n  static decryptDatabasePassword(encryptedData: EncryptedData): string {\n    return this.decrypt(encryptedData);\n  }\n\n  /**\n   * Encrypts API keys for secure storage\n   */\n  static encryptApiKey(apiKey: string): EncryptedData {\n    return this.encrypt(apiKey);\n  }\n\n  /**\n   * Decrypts API keys for use in requests\n   */\n  static decryptApiKey(encryptedData: EncryptedData): string {\n    return this.decrypt(encryptedData);\n  }\n\n  /**\n   * Validates encrypted data integrity\n   */\n  static validateEncryptedData(encryptedData: unknown): encryptedData is EncryptedData {\n    if (!encryptedData || typeof encryptedData !== 'object') {\n      return false;\n    }\n\n    const data = encryptedData as Record<string, unknown>;\n    return (\n      typeof data.data === 'string' &&\n      typeof data.iv === 'string' &&\n      typeof data.algorithm === 'string' &&\n      data.data.length > 0 &&\n      data.iv.length > 0\n    );\n  }\n\n  /**\n   * Generates a secure random key for additional entropy\n   */\n  static generateSecureKey(length = 32): string {\n    return crypto.randomBytes(length).toString('hex');\n  }\n\n  /**\n   * Checks if encryption is available (proper environment setup)\n   */\n  static isEncryptionAvailable(): boolean {\n    try {\n      this.deriveKey();\n      return true;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SecureCredentialsManager',\n        operation: 'isEncryptionAvailable',\n      });\n      logger.warn('[SecureCredentialsManager] Encryption not available', { error: error.toLogObject() });\n      return false;\n    }\n  }\n\n  /**\n   * Masks sensitive data for logging\n   */\n  static maskSensitiveData(data: string): string {\n    if (!data || data.length < this.MIN_DATA_LENGTH_FOR_MASK) {\n      return '***';\n    }\n    return data.substring(0, 4) + '***' + data.substring(data.length - 4);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/secureDb.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/secureJwt.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 32.","line":24,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":24,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 安全JWT工具\n * 提供JWT令牌的安全创建和验证功能\n */\n\nimport jwt from 'jsonwebtoken';\nimport { LogSanitizer } from './logSanitizer';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface JWTPayload {\n  userId: string;\n  email: string;\n  sub?: string;\n  username?: string;\n  role?: string;\n  jti?: string;\n  iat?: number;\n  exp?: number;\n}\n\nexport class SecureJWT {\n  private static readonly DEFAULT_ALGORITHM = 'HS256';\n  private static readonly DEFAULT_EXPIRES_IN = '1h';\n  private static readonly MIN_SECRET_LENGTH = 32;\n\n  static getConfig(): {\n    secret: string;\n    algorithm: jwt.Algorithm;\n    expiresIn: string;\n    issuer: string;\n    audience: string;\n    } {\n    const secret = process.env.TOKEN_SECRET;\n    if (!secret || secret.length < this.MIN_SECRET_LENGTH) {\n      throw new Error('TOKEN_SECRET must be at least 32 characters long');\n    }\n\n    return {\n      secret,\n      algorithm: (process.env.JWT_ALGORITHM as jwt.Algorithm) ?? this.DEFAULT_ALGORITHM,\n      expiresIn: process.env.JWT_EXPIRES_IN ?? this.DEFAULT_EXPIRES_IN,\n      issuer: process.env.JWT_ISSUER ?? 'llmchat-backend',\n      audience: process.env.JWT_AUDIENCE ?? 'llmchat-frontend',\n    };\n  }\n\n  static validateConfiguration(): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    const config = this.getConfig();\n\n    try {\n      if (config.secret.length < this.MIN_SECRET_LENGTH) {\n        errors.push('TOKEN_SECRET must be at least 32 characters long');\n      }\n\n      if (!['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512'].includes(config.algorithm)) {\n        errors.push(`Unsupported JWT algorithm: ${config.algorithm}`);\n      }\n\n      // Test token creation\n      const testPayload = { test: 'validation' };\n      jwt.sign(testPayload, config.secret, { algorithm: config.algorithm });\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SecureJWT',\n        operation: 'validateConfiguration',\n      });\n      errors.push(`JWT configuration error: ${error.message}`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n\n  static createToken(payload: JWTPayload): string {\n    const config = this.getConfig();\n\n      const options: jwt.SignOptions = {\n      issuer: config.issuer,\n      audience: config.audience,\n      algorithm: config.algorithm as jwt.Algorithm,\n    };\n\n    if (config.expiresIn) {\n      options.expiresIn = config.expiresIn as string | number;\n    }\n\n    return jwt.sign(payload, config.secret, options);\n  }\n\n  static isTokenRevoked(_token: string): boolean {\n    // 这里可以实现token撤销检查逻辑\n    // 例如检查黑名单或数据库记录\n    return false;\n  }\n\n  static getTokenTTL(token: string): number {\n    const decoded = this.decodeToken(token);\n    if (!decoded?.exp || !decoded.iat) {\n      return 0;\n    }\n    return decoded.exp - decoded.iat;\n  }\n\n  static verifyToken(token: string): JWTPayload {\n    const config = this.getConfig();\n\n    try {\n      const decoded = jwt.verify(token, config.secret, {\n        algorithms: [config.algorithm],\n        issuer: config.issuer,\n        audience: config.audience,\n      }) as JWTPayload;\n\n      return decoded;\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SecureJWT',\n        operation: 'verifyToken',\n      });\n      if (error instanceof jwt.TokenExpiredError) {\n        throw new Error('Token expired');\n      } else if (error instanceof jwt.JsonWebTokenError) {\n        throw new Error('Invalid token');\n      } else {\n        throw new Error('Token verification failed');\n      }\n    }\n  }\n\n  static refreshToken(token: string): string {\n    const decoded = this.verifyToken(token);\n    const { iat: _iat, exp: _exp, ...payload } = decoded;\n    return this.createToken(payload);\n  }\n\n  static decodeToken(token: string): JWTPayload | null {\n    try {\n      return jwt.decode(token) as JWTPayload;\n    } catch {\n      return null;\n    }\n  }\n\n  static isTokenExpired(token: string): boolean {\n    try {\n      const decoded = this.decodeToken(token);\n      if (!decoded?.exp) {\n        return true;\n      }\n\n      return Date.now() >= decoded.exp * 1000;\n    } catch {\n      return true;\n    }\n  }\n\n  static sanitizeLogMessage(message: string): string {\n    return LogSanitizer.sanitize(message);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/secureUpload.ts","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x4D.","line":46,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":46,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":48,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":48,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x7F.","line":49,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":49,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x45.","line":50,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":50,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x4C.","line":51,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":51,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x46.","line":52,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":52,"endColumn":45},{"ruleId":"max-len","severity":1,"message":"This line has a length of 110. Maximum allowed is 100.","line":187,"column":1,"nodeType":"Program","messageId":"max","endLine":187,"endColumn":111}],"suppressedMessages":[{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00, \\x08, \\x0b, \\x0c, \\x0e, \\x1f.","line":141,"column":35,"nodeType":"Literal","messageId":"unexpected","endLine":141,"endColumn":70,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 安全文件上传工具\n * 提供文件上传的安全验证和处理\n */\n\nimport type { Request } from 'express';\nimport type { AuthenticatedRequest } from '@/middleware/jwtAuth';\nimport { LogSanitizer } from './logSanitizer';\nimport { promises as fs } from 'fs';\nimport { logger } from '@/utils/logger';\nimport { createErrorFromUnknown } from '@/types/errors';\n\nexport interface FileValidationOptions {\n  maxSize?: number;\n  allowedTypes?: string[];\n  allowedExtensions?: string[];\n  requireAuth?: boolean;\n}\n\nexport interface ValidationResult {\n  valid: boolean;\n  isValid?: boolean;\n  error?: string;\n  errors?: string[];\n  sanitizedFilename?: string;\n  warnings?: string[];\n}\n\nexport class SecureUpload {\n  private static readonly DEFAULT_MAX_SIZE = 10 * 1024 * 1024; // 10MB\n  private static readonly DEFAULT_ALLOWED_TYPES = [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'application/pdf',\n    'text/plain',\n    'application/json',\n  ];\n\n  private static readonly DANGEROUS_EXTENSIONS = [\n    '.exe', '.bat', '.cmd', '.com', '.pif', '.scr', '.vbs', '.js', '.jar',\n    '.php', '.asp', '.aspx', '.jsp', '.py', '.rb', '.sh', '.ps1',\n  ];\n\n  // 文件签名常量 (File signature constants)\n  private static readonly PE_MAGIC_NUMBER_1 = 0x4D; // 'M' in PE header\n  private static readonly PE_MAGIC_NUMBER_2 = 0x5A; // 'Z' in PE header\n  private static readonly ELF_HEADER_SIZE = 4;\n  private static readonly ELF_MAGIC_0 = 0x7F; // ELF magic byte 0\n  private static readonly ELF_MAGIC_1 = 0x45; // 'E' in ELF header\n  private static readonly ELF_MAGIC_2 = 0x4C; // 'L' in ELF header\n  private static readonly ELF_MAGIC_3 = 0x46; // 'F' in ELF header\n\n  static validateFile(\n    file: Express.Multer.File,\n    options: FileValidationOptions = {},\n  ): ValidationResult {\n    const {\n      maxSize = this.DEFAULT_MAX_SIZE,\n      allowedTypes = this.DEFAULT_ALLOWED_TYPES,\n      allowedExtensions = [],\n      requireAuth = true,\n    } = options;\n\n    // 用户认证检查标记\n    const _authRequired = requireAuth;\n\n    // 检查文件大小\n    if (file.size > maxSize) {\n      return {\n        valid: false,\n        isValid: false,\n        error: `File size exceeds maximum allowed size of ${maxSize} bytes`,\n        errors: [`File size exceeds maximum allowed size of ${maxSize} bytes`],\n      };\n    }\n\n    // 检查文件类型\n    if (allowedTypes.length > 0 && !allowedTypes.includes(file.mimetype)) {\n      return {\n        valid: false,\n        isValid: false,\n        error: `File type ${file.mimetype} is not allowed`,\n        errors: [`File type ${file.mimetype} is not allowed`],\n      };\n    }\n\n    // 检查文件扩展名\n    const fileExtension = this.getFileExtension(file.originalname);\n    if (this.DANGEROUS_EXTENSIONS.includes(fileExtension.toLowerCase())) {\n      return {\n        valid: false,\n        error: `File extension ${fileExtension} is not allowed for security reasons`,\n      };\n    }\n\n    if (allowedExtensions.length > 0 && !allowedExtensions.includes(fileExtension.toLowerCase())) {\n      return {\n        valid: false,\n        error: `File extension ${fileExtension} is not allowed`,\n      };\n    }\n\n    // 生成安全的文件名\n    const sanitizedFilename = this.sanitizeFilename(file.originalname);\n\n    return {\n      valid: true,\n      isValid: true,\n      sanitizedFilename,\n      errors: [],\n      warnings: [],\n    };\n  }\n\n  static validateCADFile(file: Express.Multer.File): ValidationResult {\n    const cadOptions: FileValidationOptions = {\n      maxSize: 10 * 1024 * 1024, // 10MB for CAD files\n      allowedTypes: ['application/dxf', 'image/vnd.dxf', 'text/plain'],\n      allowedExtensions: ['.dxf'],\n      requireAuth: true,\n    };\n\n    return this.validateFile(file, cadOptions);\n  }\n\n  static getFileExtension(filename: string): string {\n    const lastDot = filename.lastIndexOf('.');\n    return lastDot !== -1 ? filename.substring(lastDot) : '';\n  }\n\n  static sanitizeFilename(filename: string): string {\n    // 移除路径分隔符\n    let sanitized = filename.replace(/[/\\\\]/g, '_');\n\n    // 移除特殊字符\n    sanitized = sanitized.replace(/[<>:\"|?*]/g, '_');\n\n    // 移除控制字符 (除了换行符和制表符)\n    // eslint-disable-next-line no-control-regex\n    sanitized = sanitized.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g, '_');\n\n    // 移除连续的下划线\n    sanitized = sanitized.replace(/_+/g, '_');\n\n    // 移除开头和结尾的下划线和点\n    sanitized = sanitized.replace(/^[_\\\\.,]+|[_\\\\.,]+$/g, '');\n\n    // 确保文件名不为空\n    if (!sanitized) {\n      sanitized = `file_${Date.now()}`;\n    }\n\n    // 添加时间戳以避免冲突\n    const extension = this.getFileExtension(filename);\n    const nameWithoutExt = sanitized.substring(0, sanitized.length - extension.length);\n\n    return `${nameWithoutExt}_${Date.now()}${extension}`;\n  }\n\n  static validateUserAuth(req: Request): boolean {\n    // 检查用户是否已认证\n    return !!(req as AuthenticatedRequest).user?.id;\n  }\n\n  static logUpload(filename: string, userId: string, success: boolean): void {\n    const sanitizedFilename = LogSanitizer.sanitize(filename);\n    const status = success ? 'SUCCESS' : 'FAILED';\n    logger.debug(`File upload ${status}: ${sanitizedFilename} by user ${userId}`);\n  }\n\n  static generateSecurePath(userId: string, filename: string): string {\n    const sanitizedUserId = LogSanitizer.sanitize(userId);\n    const sanitizedFilename = LogSanitizer.sanitize(filename);\n    const timestamp = Date.now();\n\n    return `/uploads/${sanitizedUserId}/${timestamp}_${sanitizedFilename}`;\n  }\n\n  static async scanForMalware(filePath: string): Promise<{ safe: boolean; threat?: string }> {\n    // 这里可以集成病毒扫描软件\n    // 目前只做基本的文件签名检查\n    try {\n      const buffer = await fs.readFile(filePath);\n\n      // 检查PE文件头 (Windows可执行文件)\n      if (buffer.length > 2 && buffer[0] === this.PE_MAGIC_NUMBER_1 && buffer[1] === this.PE_MAGIC_NUMBER_2) {\n        return { safe: false, threat: 'PE executable detected' };\n      }\n\n      // 检查ELF文件头 (Linux可执行文件)\n      if (buffer.length > this.ELF_HEADER_SIZE &&\n          buffer[0] === this.ELF_MAGIC_0 &&\n          buffer[1] === this.ELF_MAGIC_1 &&\n          buffer[2] === this.ELF_MAGIC_2 &&\n          buffer[3] === this.ELF_MAGIC_3) {\n        return { safe: false, threat: 'ELF executable detected' };\n      }\n\n      // 检查可疑的脚本内容\n      const content = buffer.toString('utf8', 0, Math.min(1024, buffer.length));\n      const suspiciousPatterns = [\n        /<script/i,\n        /javascript:/i,\n        /vbscript:/i,\n        /onload=/i,\n        /onerror=/i,\n      ];\n\n      for (const pattern of suspiciousPatterns) {\n        if (pattern.test(content)) {\n          return { safe: false, threat: 'Suspicious script content detected' };\n        }\n      }\n\n      return { safe: true };\n    } catch (unknownError: unknown) {\n      const error = createErrorFromUnknown(unknownError, {\n        component: 'SecureUpload',\n        operation: 'scanForMalware',\n      });\n      logger.error('Malware scan failed:', error.toLogObject());\n      return { safe: false, threat: 'Scan failed' };\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/mnt/f/ss/aa/sssss/llmchat/backend/src/utils/sentry.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 110. Maximum allowed is 100.","line":179,"column":1,"nodeType":"Program","messageId":"max","endLine":179,"endColumn":111}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Sentry 后端错误追踪配置\n *\n * 功能：\n * - 自动捕获未处理异常\n * - Express中间件集成\n * - 性能监控\n * - 请求上下文追踪\n *\n * 注意：适配 Sentry v10+ API\n */\n\nimport * as Sentry from '@sentry/node';\nimport { nodeProfilingIntegration } from '@sentry/profiling-node';\nimport type { Express, Request, Response, NextFunction, ErrorRequestHandler } from 'express';\nimport { logger } from '@/utils/logger';\n\n/**\n * 初始化Sentry\n */\nexport function initSentry(_app: Express): void {\n  // 仅在生产环境或明确启用时初始化\n  if (process.env.NODE_ENV === 'production' || process.env.SENTRY_ENABLED === 'true') {\n    const dsn = process.env.SENTRY_DSN;\n\n    if (!dsn) {\n      logger.warn('Sentry DSN未配置，错误追踪已禁用');\n      return;\n    }\n\n    Sentry.init({\n      dsn,\n      environment: process.env.NODE_ENV ?? 'development',\n      release: process.env.APP_VERSION ?? 'unknown',\n\n      // 集成（Sentry v10+ 使用函数式API）\n      integrations: [\n        Sentry.httpIntegration(),\n        Sentry.expressIntegration(),\n        nodeProfilingIntegration(),\n      ],\n\n      // 性能监控\n      tracesSampleRate: process.env.NODE_ENV === 'production' ? 0.1 : 1.0,\n      profilesSampleRate: process.env.NODE_ENV === 'production' ? 0.1 : 1.0,\n\n      // 数据清理\n      beforeSend(event: Sentry.ErrorEvent, _hint: Sentry.EventHint): Sentry.ErrorEvent | null {\n        // 移除敏感数据\n        if (event.request) {\n          delete event.request.cookies;\n\n          // 清理headers中的敏感信息\n          if (event.request.headers) {\n            delete event.request.headers.authorization;\n            delete event.request.headers['x-api-key'];\n            delete event.request.headers.cookie;\n          }\n\n          // 清理URL中的敏感参数\n          if (event.request.url) {\n            try {\n              const url = new URL(event.request.url, 'http://localhost');\n              url.searchParams.delete('apiKey');\n              url.searchParams.delete('token');\n              event.request.url = url.pathname + url.search;\n            } catch (e) {\n              // URL解析失败，保持原样\n            }\n          }\n        }\n\n        // 清理请求体中的敏感数据\n        if (event.request?.data) {\n          const data = event.request.data as Record<string, unknown>;\n          if (data.password) {\n            data.password = '[Filtered]';\n          }\n          if (data.apiKey) {\n            data.apiKey = '[Filtered]';\n          }\n          if (data.token) {\n            data.token = '[Filtered]';\n          }\n          if (data.api_key) {\n            data.api_key = '[Filtered]';\n          }\n        }\n\n        return event;\n      },\n    });\n\n    logger.debug('Sentry错误追踪已启用（后端）');\n  } else {\n    logger.debug('Sentry错误追踪已禁用（开发环境）');\n  }\n}\n\n/**\n * Express请求处理器（必须在所有路由之前）\n * v10中已自动集成到 expressIntegration，这里保留为空中间件以兼容\n */\nexport function sentryRequestHandler() {\n  return (_req: Request, _res: Response, next: NextFunction): void => next();\n}\n\n/**\n * Express追踪处理器（必须在所有路由之前）\n * v10中已集成到 expressIntegration 中\n */\nexport function sentryTracingHandler() {\n  return (_req: Request, _res: Response, next: NextFunction): void => next();\n}\n\n/**\n * Express错误处理器（必须在所有路由之后）\n */\nexport function sentryErrorHandler(): ErrorRequestHandler {\n  return Sentry.expressErrorHandler();\n}\n\n/**\n * 设置用户上下文\n */\nexport function setSentryUser(user: { id: string; email?: string; username?: string }): void {\n  const userData: Sentry.User = {\n    id: user.id,\n  };\n  if (user.email) {\n    userData.email = user.email;\n  }\n  if (user.username) {\n    userData.username = user.username;\n  }\n\n  Sentry.setUser(userData);\n}\n\n/**\n * 清除用户上下文\n */\nexport function clearSentryUser(): void {\n  Sentry.setUser(null);\n}\n\n/**\n * 手动捕获错误\n */\nexport function captureError(error: Error, context?: Record<string, unknown>): void {\n  if (context) {\n    Sentry.captureException(error, {\n      extra: context,\n    });\n  } else {\n    Sentry.captureException(error);\n  }\n}\n\n/**\n * 添加面包屑\n */\nexport function addBreadcrumb(\n  message: string,\n  category: string,\n  level: Sentry.SeverityLevel = 'info',\n): void {\n  Sentry.addBreadcrumb({\n    message,\n    category,\n    level,\n    timestamp: Date.now() / 1000,\n  });\n}\n\n/**\n * 性能追踪中间件（简化版，v10推荐使用自动追踪）\n */\nexport function performanceMiddleware(_name: string): (req: unknown, res: unknown, next: () => void) => void {\n  return (_req: unknown, _res: unknown, next: () => void) => {\n    // v10中由 expressIntegration 自动处理\n    // 这里保留接口兼容性但不做实际操作\n    next();\n  };\n}\n\n// 导出Sentry实例供高级使用\nexport { Sentry };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-process-exit","replacedBy":[]},{"ruleId":"no-sync","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]