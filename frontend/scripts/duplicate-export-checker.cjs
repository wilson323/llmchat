#!/usr/bin/env node

/**
 * ÈáçÂ§çÂØºÂá∫Ê£ÄÊü•Â∑•ÂÖ∑
 * Ê£ÄÊü•Êñá‰ª∂‰∏≠ÊòØÂê¶Â≠òÂú®ÈáçÂ§çÁöÑÂØºÂá∫Â£∞Êòé
 */

const fs = require('fs');
const path = require('path');

const PROJECT_ROOT = process.cwd();
const SRC_DIR = path.join(PROJECT_ROOT, 'src');

// ÈúÄË¶ÅÊ£ÄÊü•ÁöÑÊñá‰ª∂Á±ªÂûã
const CHECK_EXTENSIONS = ['.ts', '.tsx'];

// ÂøΩÁï•ÁöÑÁõÆÂΩï
const IGNORE_DIRS = ['node_modules', 'dist', '.git', '__tests__', 'test'];

/**
 * ÈÄíÂΩíËé∑ÂèñÊâÄÊúâÈúÄË¶ÅÊ£ÄÊü•ÁöÑÊñá‰ª∂
 */
function getAllFiles(dir) {
  const files = [];

  function traverse(currentDir) {
    const items = fs.readdirSync(currentDir);

    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory() && !IGNORE_DIRS.includes(item)) {
        traverse(fullPath);
      } else if (stat.isFile() && CHECK_EXTENSIONS.some(ext => item.endsWith(ext))) {
        files.push(fullPath);
      }
    }
  }

  traverse(dir);
  return files;
}

/**
 * Ê£ÄÊü•Âçï‰∏™Êñá‰ª∂ÁöÑÈáçÂ§çÂØºÂá∫
 */
function checkFileDuplicates(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    const lines = content.split('\n');

    // ÂåπÈÖçÂØºÂá∫Â£∞ÊòéÁöÑÊ≠£ÂàôË°®ËææÂºè
    const exportRegex = /^export\s+(?:const|let|var|class|function|interface|type)\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/gm;
    const exportDefaultRegex = /^export\s+(?:default\s+)?(?:const|let|var|function|class)\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/gm;
    const namedExportRegex = /export\s*{\s*([^}]+)\s*}/g;

    const exports = new Set();
    const duplicates = [];
    let match;

    // Ê£ÄÊü•Â£∞ÊòéÂºèÂØºÂá∫
    while ((match = exportRegex.exec(content)) !== null) {
      const exportName = match[1];
      if (exports.has(exportName)) {
        duplicates.push({
          name: exportName,
          type: 'declaration',
          line: lines.findIndex(line => line.includes(match[0])) + 1
        });
      } else {
        exports.add(exportName);
      }
    }

    // Ê£ÄÊü•ÈªòËÆ§ÂØºÂá∫
    exportRegex.lastIndex = 0; // ÈáçÁΩÆÊ≠£ÂàôË°®ËææÂºè
    while ((match = exportDefaultRegex.exec(content)) !== null) {
      const exportName = match[1];
      if (exports.has(exportName)) {
        duplicates.push({
          name: exportName,
          type: 'default',
          line: lines.findIndex(line => line.includes(match[0])) + 1
        });
      } else {
        exports.add(exportName);
      }
    }

    // Ê£ÄÊü•ÂëΩÂêçÂØºÂá∫
    while ((match = namedExportRegex.exec(content)) !== null) {
      const exportsString = match[1];
      const namedExports = exportsString.split(',').map(e => e.trim().split(' as ')[0]);

      for (const exportName of namedExports) {
        if (exports.has(exportName)) {
          duplicates.push({
            name: exportName,
            type: 'named',
            line: lines.findIndex(line => line.includes(match[0])) + 1
          });
        } else {
          exports.add(exportName);
        }
      }
    }

    return duplicates;
  } catch (error) {
    console.error(`Ê£ÄÊü•Êñá‰ª∂ ${filePath} Êó∂Âá∫Èîô:`, error.message);
    return [];
  }
}

/**
 * Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
 */
function checkFileSize(filePath) {
  try {
    const stat = fs.statSync(filePath);
    const sizeInLines = fs.readFileSync(filePath, 'utf-8').split('\n').length;

    return {
      sizeInBytes: stat.size,
      sizeInLines,
      isTooLarge: sizeInLines > 500
    };
  } catch (error) {
    console.error(`Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è ${filePath} Êó∂Âá∫Èîô:`, error.message);
    return null;
  }
}

/**
 * ‰∏ªÂáΩÊï∞
 */
function main() {
  console.log('üîç ÂºÄÂßãÊ£ÄÊü•‰ª£Á†ÅË¥®Èáè...\n');

  const allFiles = getAllFiles(SRC_DIR);
  let totalDuplicates = 0;
  let totalLargeFiles = 0;
  const problematicFiles = [];

  console.log(`üìÅ ÊâæÂà∞ ${allFiles.length} ‰∏™Êñá‰ª∂ÈúÄË¶ÅÊ£ÄÊü•\n`);

  for (const filePath of allFiles) {
    const relativePath = path.relative(PROJECT_ROOT, filePath);

    // Ê£ÄÊü•ÈáçÂ§çÂØºÂá∫
    const duplicates = checkFileDuplicates(filePath);
    if (duplicates.length > 0) {
      totalDuplicates += duplicates.length;
      problematicFiles.push({
        file: relativePath,
        type: 'duplicate_exports',
        issues: duplicates
      });
    }

    // Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
    const sizeInfo = checkFileSize(filePath);
    if (sizeInfo && sizeInfo.isTooLarge) {
      totalLargeFiles++;
      problematicFiles.push({
        file: relativePath,
        type: 'large_file',
        issues: [{
          line: 0,
          name: 'FILE_SIZE',
          type: 'size',
          details: `Êñá‰ª∂ËøáÂ§ß: ${sizeInfo.sizeInLines} Ë°å (Âª∫ËÆÆ: < 500 Ë°å)`
        }]
      });
    }
  }

  // ËæìÂá∫ÁªìÊûú
  if (problematicFiles.length === 0) {
    console.log('‚úÖ ÊâÄÊúâÊñá‰ª∂Ê£ÄÊü•ÈÄöËøáÔºÅÊ≤°ÊúâÂèëÁé∞ÈáçÂ§çÂØºÂá∫ÊàñË∂ÖÂ§ßÊñá‰ª∂„ÄÇ');
    process.exit(0);
  }

  console.log(`‚ùå ÂèëÁé∞ ${problematicFiles.length} ‰∏™Êñá‰ª∂Â≠òÂú®ÈóÆÈ¢ò:\n`);

  for (const file of problematicFiles) {
    console.log(`üìÑ ${file.file}`);

    if (file.type === 'duplicate_exports') {
      console.log('   ‚ö†Ô∏è  ÈáçÂ§çÂØºÂá∫:');
      for (const issue of file.issues) {
        console.log(`      - Á¨¨ ${issue.line} Ë°å: ${issue.name} (${issue.type})`);
      }
    } else if (file.type === 'large_file') {
      console.log('   üìè Êñá‰ª∂ËøáÂ§ß:');
      for (const issue of file.issues) {
        console.log(`      - ${issue.details}`);
      }
    }
    console.log('');
  }

  console.log(`üìä Ê±áÊÄª:`);
  console.log(`   - ÈáçÂ§çÂØºÂá∫: ${totalDuplicates} ‰∏™`);
  console.log(`   - Ë∂ÖÂ§ßÊñá‰ª∂: ${totalLargeFiles} ‰∏™`);
  console.log(`   - ÈóÆÈ¢òÊñá‰ª∂: ${problematicFiles.length} ‰∏™`);

  console.log('\nüí° Âª∫ËÆÆ:');
  console.log('   1. Âà†Èô§ÈáçÂ§çÁöÑÂØºÂá∫Â£∞Êòé');
  console.log('   2. Â∞ÜË∂ÖÂ§ßÊñá‰ª∂ÊãÜÂàÜ‰∏∫Â§ö‰∏™Â∞èÊñá‰ª∂');
  console.log('   3. ‰ΩøÁî® index.ts Áªü‰∏ÄÁÆ°ÁêÜÊ®°ÂùóÂØºÂá∫');

  process.exit(1);
}

// ËøêË°åÊ£ÄÊü•
if (require.main === module) {
  main();
}

module.exports = { checkFileDuplicates, checkFileSize };