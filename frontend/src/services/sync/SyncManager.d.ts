import { ISyncManager, SyncStatus, SyncResult, BatchSyncResult, SyncConflict, ConflictResolution, SessionUpdate, SyncPolicy, SyncProgress, SyncError, IStorageProvider } from '@/types/hybrid-storage';
export declare class SyncManager implements ISyncManager {
    private memoryProvider;
    private indexedDBProvider;
    private fastgptProvider;
    private syncPolicy;
    private offlineMode;
    private pendingOperations;
    private syncProgressCallbacks;
    private syncConflictCallbacks;
    private syncErrorCallbacks;
    private syncInProgress;
    constructor(memoryProvider: IStorageProvider, indexedDBProvider: IStorageProvider, fastgptProvider: IStorageProvider, syncPolicy?: Partial<SyncPolicy>);
    getSyncStatus(sessionId: string): Promise<SyncStatus>;
    setSyncStatus(sessionId: string, status: SyncStatus): Promise<void>;
    getPendingSyncSessions(): Promise<string[]>;
    syncSession(sessionId: string): Promise<SyncResult>;
    syncAgentSessions(agentId: string): Promise<BatchSyncResult>;
    syncAllSessions(): Promise<BatchSyncResult>;
    detectConflicts(sessionId: string): Promise<SyncConflict[]>;
    resolveConflict(sessionId: string, resolution: ConflictResolution): Promise<boolean>;
    getIncrementalUpdates(agentId: string, since?: number): Promise<SessionUpdate[]>;
    applyIncrementalUpdates(updates: SessionUpdate[]): Promise<void>;
    enableOfflineMode(): Promise<void>;
    disableOfflineMode(): Promise<void>;
    isOfflineMode(): Promise<boolean>;
    setSyncPolicy(policy: SyncPolicy): void;
    getSyncPolicy(): SyncPolicy;
    onSyncProgress(callback: (progress: SyncProgress) => void): () => void;
    onSyncConflict(callback: (conflict: SyncConflict) => void): () => void;
    onSyncError(callback: (error: SyncError) => void): () => void;
    private initializeAutoSync;
    private syncPendingSessions;
    private getLocalSession;
    private getRemoteSession;
    private getLocalAgentSessions;
    private getRemoteAgentSessions;
    private getAllAgents;
    private performSync;
    private convertRemoteToLocal;
    private convertRemoteMessages;
    private mergeSessionData;
    private extractVersionFromRemoteData;
    private calculateChecksum;
    private getLocalSyncStatus;
    private handleConflict;
    private applyLocalResolution;
    private applyRemoteResolution;
    private applyMergedResolution;
    private markConflictResolved;
    private getRemoteIncrementalUpdates;
    private applySingleUpdate;
    private reportProgress;
    private reportError;
    forceSyncAll(): Promise<BatchSyncResult>;
    getSyncStats(): Promise<{
        totalSessions: number;
        syncedSessions: number;
        pendingSessions: number;
        conflictedSessions: number;
        lastSyncTime: number;
    }>;
}
//# sourceMappingURL=SyncManager.d.ts.map