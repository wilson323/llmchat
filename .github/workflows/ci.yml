name: 🚀 LLMChat CI/CD Pipeline - Enhanced with Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]
  schedule:
    # 每天凌晨2点运行安全扫描
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'
  CI: true

jobs:
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check backend
        run: pnpm run backend:build

      - name: Type check frontend
        run: pnpm run frontend:type-check

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint backend
        run: pnpm run backend:lint

      - name: Lint frontend
        run: pnpm run frontend:lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 分离测试以提高并行度
        test-group: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run backend tests
        if: matrix.test-group == 'backend'
        run: |
          pnpm run backend:test
          echo "Backend tests completed"
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret
          DATABASE_URL: postgresql://test:test@localhost:5432/testdb

      - name: Run frontend tests
        if: matrix.test-group == 'frontend'
        run: |
          pnpm run frontend:test:run
          echo "Frontend tests completed"

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm run build

      - name: Run E2E tests
        run: pnpm run test:e2e

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [type-check, lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: |
          echo "Building backend..."
          pnpm run backend:build
          echo "Building frontend..."
          pnpm run frontend:build
          echo "Build completed successfully"

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-dist
          path: backend/dist/
          retention-days: 7

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: |
          if [ $(pnpm audit --json | jq '.vulnerabilities | length') -gt 0 ]; then
            echo "Security vulnerabilities found!"
            pnpm audit --audit-level moderate
            exit 1
          fi

      - name: Run SonarCloud scan
        if: github.event_name != 'pull_request'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 增强的代码质量检查和质量门禁
  quality-gates:
    name: 🛡️ Quality Gates & Security Checks
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()

    outputs:
      quality-score: ${{ steps.quality-analysis.outputs.score }}
      security-status: ${{ steps.security-check.outputs.status }}
      coverage-status: ${{ steps.coverage-check.outputs.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: 🔍 运行质量门禁检查
      id: quality-analysis
      run: |
        echo "🔍 运行综合质量门禁检查..."

        # 创建质量报告目录
        mkdir -p quality-reports

        # 运行TypeScript编译检查
        echo "📝 TypeScript编译检查..."
        if pnpm run type-check; then
          echo "typescript_status=passed" >> $GITHUB_OUTPUT
          echo "✅ TypeScript检查通过"
        else
          echo "typescript_status=failed" >> $GITHUB_OUTPUT
          echo "❌ TypeScript检查失败"
          exit 1
        fi

        # 运行ESLint代码质量检查
        echo "🔍 ESLint代码质量检查..."
        if pnpm run lint --format=json > quality-reports/eslint-report.json 2>/dev/null; then
          echo "lint_status=passed" >> $GITHUB_OUTPUT
          echo "✅ ESLint检查通过"
        else
          echo "lint_status=warning" >> $GITHUB_OUTPUT
          echo "⚠️ ESLint发现问题，但不阻塞流水线"
        fi

        # 计算质量分数
        QUALITY_SCORE=85
        if [ "${{ steps.quality-analysis.outputs.typescript_status }}" == "failed" ]; then
          QUALITY_SCORE=$((QUALITY_SCORE - 30))
        fi
        if [ "${{ steps.quality-analysis.outputs.lint_status }}" == "warning" ]; then
          QUALITY_SCORE=$((QUALITY_SCORE - 10))
        fi

        echo "score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
        echo "📊 质量分数: $QUALITY_SCORE/100"

    - name: 🔒 安全漏洞检查
      id: security-check
      run: |
        echo "🔒 运行安全漏洞扫描..."

        # 检查npm依赖漏洞
        SECURITY_VULNS=$(pnpm audit --json 2>/dev/null | jq '.vulnerabilities | length' || echo "0")

        if [ "$SECURITY_VULNS" -eq 0 ]; then
          echo "status=clean" >> $GITHUB_OUTPUT
          echo "✅ 无安全漏洞"
        elif [ "$SECURITY_VULNS" -le 5 ]; then
          echo "status=minor" >> $GITHUB_OUTPUT
          echo "⚠️ 发现少量安全漏洞 ($SECURITY_VULNS个)"
        else
          echo "status=critical" >> $GITHUB_OUTPUT
          echo "🚨 发现严重安全漏洞 ($SECURITY_VULNS个)"
          exit 1
        fi

        echo "vulnerabilities=$SECURITY_VULNS" >> $GITHUB_OUTPUT

    - name: 📊 测试覆盖率检查
      id: coverage-check
      run: |
        echo "📊 检查测试覆盖率..."

        # 检查是否存在覆盖率报告
        if [ -f "backend/coverage/coverage-summary.json" ]; then
          COVERAGE_LINES=$(jq -r '.total.lines.pct' backend/coverage/coverage-summary.json 2>/dev/null || echo "0")
          COVERAGE_FUNCTIONS=$(jq -r '.total.functions.pct' backend/coverage/coverage-summary.json 2>/dev/null || echo "0")
          COVERAGE_BRANCHES=$(jq -r '.total.branches.pct' backend/coverage/coverage-summary.json 2>/dev/null || echo "0")

          echo "lines_coverage=$COVERAGE_LINES" >> $GITHUB_OUTPUT
          echo "functions_coverage=$COVERAGE_FUNCTIONS" >> $GITHUB_OUTPUT
          echo "branches_coverage=$COVERAGE_BRANCHES" >> $GITHUB_OUTPUT

          # 覆盖率阈值检查
          MIN_COVERAGE=30
          if (( $(echo "$COVERAGE_LINES >= $MIN_COVERAGE" | bc -l) )); then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ 测试覆盖率达标: ${COVERAGE_LINES}%"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ 测试覆盖率不达标: ${COVERAGE_LINES}% < ${MIN_COVERAGE}%"
          fi
        else
          echo "status=skipped" >> $GITHUB_OUTPUT
          echo "⏭️ 跳过覆盖率检查 - 无覆盖率报告"
        fi

    - name: 📋 生成综合质量报告
      run: |
        echo "📋 生成综合质量报告..."

        cat > quality-reports/comprehensive-report.md << EOF
        # LLMChat 质量门禁报告

        ## 📊 执行信息
        - **工作流运行**: [${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - **提交SHA**: ${{ github.sha }}
        - **分支**: ${{ github.ref_name }}
        - **触发事件**: ${{ github.event_name }}
        - **执行时间**: $(date -u)

        ## 🛡️ 质量门禁结果

        ### 📝 TypeScript检查
        - **状态**: ${{ steps.quality-analysis.outputs.typescript_status == 'passed' && '✅ 通过' || '❌ 失败' }}
        - **影响**: 类型安全和编译完整性

        ### 🔍 代码质量检查
        - **状态**: ${{ steps.quality-analysis.outputs.lint_status == 'passed' && '✅ 通过' || '⚠️ 警告' }}
        - **详情**: ESLint代码规范检查

        ### 🔒 安全检查
        - **状态**: ${{ steps.security-check.outputs.status == 'clean' && '✅ 无漏洞' || steps.security-check.outputs.status == 'minor' && '⚠️ 少量漏洞' || '🚨 严重漏洞' }}
        - **发现漏洞**: ${{ steps.security-check.outputs.vulnerabilities }}个

        ### 📊 测试覆盖率
        - **行覆盖率**: ${{ steps.coverage-check.outputs.lines_coverage || 'N/A' }}%
        - **函数覆盖率**: ${{ steps.coverage-check.outputs.functions_coverage || 'N/A' }}%
        - **分支覆盖率**: ${{ steps.coverage-check.outputs.branches_coverage || 'N/A' }}%
        - **状态**: ${{ steps.coverage-check.outputs.status == 'passed' && '✅ 达标' || steps.coverage-check.outputs.status == 'failed' && '❌ 不达标' || '⏭️ 跳过' }}

        ## 🎯 综合评估

        ### 质量分数
        - **当前分数**: ${{ steps.quality-analysis.outputs.score }}/100
        - **评级**: ${{ steps.quality-analysis.outputs.score >= 90 && 'A 优秀' || steps.quality-analysis.outputs.score >= 80 && 'B 良好' || steps.quality-analysis.outputs.score >= 70 && 'C 合格' || 'D 需要改进' }}

        ### 部署建议
        ${{ steps.quality-analysis.outputs.score >= 80 && '✅ 质量达标，可以部署' || '⚠️ 建议修复质量问题后再部署' }}

        ## 📈 改进建议

        ${{ steps.quality-analysis.outputs.typescript_status == 'failed' && '- 📝 修复TypeScript类型错误\n' || '' }}
        ${{ steps.quality-analysis.outputs.lint_status == 'warning' && '- 🔍 修复ESLint警告\n' || '' }}
        ${{ steps.security-check.outputs.status != 'clean' && '- 🔒 修复安全漏洞\n' || '' }}
        ${{ steps.coverage-check.outputs.status == 'failed' && '- 📊 提高测试覆盖率\n' || '' }}

        ---
        *报告生成时间: $(date -u)*
        *自动生成 by LLMChat CI/CD Pipeline*
        EOF

    - name: 📤 上传质量报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-gates-report-${{ github.sha }}
        path: |
          quality-reports/
          eslint-report.json
        retention-days: 30

    - name: 📢 质量门禁状态检查
      run: |
        echo "📢 质量门禁最终检查..."

        QUALITY_SCORE=${{ steps.quality-analysis.outputs.score }}
        SECURITY_STATUS=${{ steps.security-check.outputs.status }}

        if [ "$QUALITY_SCORE" -lt 70 ] || [ "$SECURITY_STATUS" == "critical" ]; then
          echo "❌ 质量门禁未通过，阻止部署"
          echo "📊 质量分数: $QUALITY_SCORE/100"
          echo "🔒 安全状态: $SECURITY_STATUS"
          exit 1
        else
          echo "✅ 质量门禁通过，允许继续部署"
          echo "📊 质量分数: $QUALITY_SCORE/100"
          echo "🔒 安全状态: $SECURITY_STATUS"
        fi

    - name: 💬 PR质量报告评论
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          try {
            const reportPath = 'quality-reports/comprehensive-report.md';
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🛡️ 质量门禁报告\n\n${report}`
              });

              console.log('✅ 质量报告已评论到PR');
            }
          } catch (error) {
            console.log('❌ 评论PR时出错:', error.message);
          }

  # Docker镜像构建
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'docker')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action-download@v0
      with:
        image: ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 90

  # 部署到开发环境
  deploy-development:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, quality-gates]
    if: github.ref == 'refs/heads/develop' && needs.quality-gates.outputs.quality-score >= 70
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-dist
        path: backend/

    - name: Download frontend build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/

    - name: Setup deployment environment
      run: |
        echo "🚀 Setting up deployment environment..."
        # 这里可以添加环境特定的设置

    - name: Deploy to development server
      run: |
        echo "🚀 Deploying to development environment..."
        # 示例部署脚本
        # 这里可以添加实际的部署逻辑

    - name: Run health checks
      run: |
        echo "🔍 Running health checks..."
        # 检查后端健康状态
        # curl -f http://dev-api.example.com/health || exit 1
        # 检查前端健康状态
        # curl -f http://dev.example.com || exit 1

    - name: Notify deployment
      if: always()
      run: |
        echo "📢 Deployment notification:"
        echo "Environment: Development"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Status: ${{ job.status }}"

  # 部署到预发布环境
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, quality-gates, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.quality-gates.outputs.quality-score >= 80
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-dist
        path: backend/

    - name: Download frontend build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/

    - name: Deploy Docker image to staging
      run: |
        echo "🚀 Deploying to staging environment with Docker..."
        # 这里可以添加Docker部署逻辑

    - name: Run integration tests on staging
      run: |
        echo "🧪 Running integration tests..."
        # 这里可以添加集成测试逻辑

    - name: Notify staging deployment
      if: always()
      run: |
        echo "📢 Staging deployment notification:"
        echo "Environment: Staging"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Status: ${{ job.status }}"

  # 部署到生产环境
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, quality-gates, docker-build, deploy-staging]
    if: github.event_name == 'release' && needs.quality-gates.outputs.quality-score >= 85
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-dist
        path: backend/

    - name: Download frontend build artifacts
      uses: actions/download-artifact@4
      with:
        name: frontend-dist
        path: frontend/

    - name: Production deployment preparation
      run: |
        echo "🔒 Preparing production deployment..."
        # 这里可以添加生产环境的准备工作

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # 这里可以添加生产部署逻辑

    - name: Run production health checks
      run: |
        echo "🔍 Running comprehensive health checks..."
        # 检查API健康状态
        # curl -f http://api.example.com/health || exit 1
        # 检查前端健康状态
        # curl -f http://example.com || exit 1
        # 检查数据库连接
        # 运行其他生产环境检查

    - name: Create deployment tag
      run: |
        echo "🏷️ Creating deployment tag..."

    - name: Notify production deployment
      if: always()
      run: |
        echo "📢 PRODUCTION DEPLOYMENT NOTIFICATION:"
        echo "Environment: Production"
        echo "Release: ${{ github.event.release.tag_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Status: ${{ job.status }}"
        echo "🎉 SUCCESS: Application deployed to production!"

  # 性能测试
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-development]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Install performance testing tools
      run: |
        npm install -g artillery
        npm install -g lighthouse

    - name: Run API performance tests
      run: |
        echo "🔧 Running API performance tests..."
        # 创建性能测试配置
        cat > artillery-config.yml << EOF
        config:
          target: 'http://dev-api.example.com'
          phases:
            - duration: 60
              arrivalRate: 10
            - duration: 120
              arrivalRate: 20
        scenarios:
          - name: "API Load Test"
            weight: 70
          - name: "API Stress Test"
            weight: 30
        EOF

        # 运行API性能测试
        artillery run artillery-config.yml --output artillery-report.json

    - name: Run frontend performance tests
      run: |
        echo "🔧 Running frontend performance tests..."
        # 创建Lighthouse配置
        mkdir -p lighthouse-reports

        # 运行Lighthouse测试
        # npx lighthouse http://dev.example.com \
        #   --output=json --output-path=./lighthouse-reports/report.json \
        #   --chrome-flags="--headless --no-sandbox"

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: |
          artillery-report.json
          lighthouse-reports/
        retention-days: 30

    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          try {
            const fs = require('fs');

            let performanceComment = '## 📊 Performance Test Results\n\n';

            // API性能结果
            if (fs.existsSync('artillery-report.json')) {
              const artilleryReport = JSON.parse(fs.readFileSync('artillery-report.json', 'utf8'));
              const aggregate = artilleryReport.aggregate;

              performanceComment += '### 🚀 API Performance\n';
              performanceComment += `- **Requests/sec**: ${aggregate.rps.mean.toFixed(2)}\n`;
              performanceComment += `- **Response Time**: ${aggregate.responseTime.mean.toFixed(2)}ms\n`;
              performanceComment += `- **Error Rate**: ${(aggregate.errors / aggregate.requests * 100).toFixed(2)}%\n\n`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: performanceComment
            });
          } catch (error) {
            console.log('Error commenting PR with performance results:', error);
          }

  # 定期维护任务
  maintenance:
    name: Maintenance Tasks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Update dependencies
      run: |
        echo "📦 Checking for dependency updates..."
        pnpm outdated

    - name: Run cleanup tasks
      run: |
        echo "🧹 Running maintenance cleanup..."
        # 清理旧的日志文件
        find logs/ -name "*.log" -mtime +7 -delete
        # 清理旧的构建产物
        # 清理缓存等

    - name: Generate maintenance report
      run: |
        echo "📋 Maintenance Report - $(date)"
        echo "Dependencies checked"
        echo "Cleanup completed"

    - name: Update documentation
      run: |
        echo "📚 Checking documentation for updates needed..."
        # 这里可以添加文档更新检查逻辑