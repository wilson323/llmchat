name: 质量检查流水线

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  quality-check:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 设置 Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: 安装 pnpm
      run: |
        corepack enable
        pnpm --version

    - name: 安装依赖
      run: pnpm install --frozen-lockfile

    - name: TypeScript 类型检查
      run: |
        echo "🔍 执行严格的 TypeScript 类型检查..."

        # 首先检查 shared-types
        echo "📦 检查 shared-types..."
        cd shared-types && pnpm run build
        cd ..

        # 检查后端 TypeScript (严格模式)
        echo "🔧 检查后端 TypeScript..."
        cd backend
        # 设置严格模式环境变量
        export TS_NODE_COMPILER_OPTIONS='{"strict":true,"noImplicitAny":true,"strictNullChecks":true}'
        pnpm run type-check
        if [ $? -ne 0 ]; then
          echo "❌ 后端 TypeScript 类型检查失败"
          echo "🔍 运行详细错误检查..."
          npx tsc --noEmit --pretty --listFiles | head -50
          exit 1
        fi
        cd ..

        # 检查前端 TypeScript (严格模式)
        echo "🎨 检查前端 TypeScript..."
        cd frontend
        pnpm run type-check
        if [ $? -ne 0 ]; then
          echo "❌ 前端 TypeScript 类型检查失败"
          echo "🔍 运行详细错误检查..."
          npx tsc --noEmit --pretty --listFiles | head -50
          exit 1
        fi
        cd ..

        echo "✅ 所有 TypeScript 类型检查通过"

    - name: TypeScript 严格质量门禁检查
      run: |
        echo "🔒 执行 TypeScript 严格质量门禁检查..."

        # 使用专门的质量门禁脚本
        pnpm run typescript:quality-gates:ci
        if [ $? -ne 0 ]; then
          echo "❌ TypeScript 质量门禁检查失败"
          echo "🚨 零容忍政策: 所有类型错误必须修复才能合并到主分支"
          echo ""
          echo "📋 快速修复建议:"
          echo "1. 运行 'pnpm run typescript:quality-gates' 查看详细错误"
          echo "2. 修复所有 TypeScript 类型错误"
          echo "3. 确保严格模式检查通过"
          echo "4. 重新提交代码"
          exit 1
        fi

        echo "✅ TypeScript 严格质量门禁检查通过"

    - name: 代码质量检查
      run: |
        echo "🔍 执行 ESLint 检查..."
        pnpm run lint

    - name: 运行测试
      run: |
        echo "🧪 执行单元测试..."
        pnpm test

    - name: 构建项目
      run: |
        echo "🏗️ 构建项目..."
        pnpm run build

    - name: 安全审计
      run: |
        echo "🔒 执行安全审计..."
        pnpm audit --audit-level high

    - name: 运行质量检查脚本
      run: |
        echo "📊 执行完整质量检查..."
        pnpm run quality-check

    - name: 生成质量报告
      if: always()
      run: |
        echo "📈 生成质量报告..."
        pnpm run quality-metrics:ci

    - name: 生成 TypeScript 类型检查报告
      if: always()
      run: |
        echo "📊 生成 TypeScript 类型检查报告..."

        # 创建报告目录
        mkdir -p reports/typescript

        # 生成详细的类型检查报告
        echo "🔍 分析 TypeScript 编译结果..."

        # 后端类型检查报告
        echo "📝 生成后端 TypeScript 报告..."
        cd backend
        npx tsc --noEmit --pretty --listEmittedFiles > ../reports/typescript/backend-typecheck.log 2>&1 || true
        echo "Backend TypeScript check completed at $(date)" > ../reports/typescript/backend-summary.txt
        cd ..

        # 前端类型检查报告
        echo "📝 生成前端 TypeScript 报告..."
        cd frontend
        npx tsc --noEmit --pretty --listEmittedFiles > ../reports/typescript/frontend-typecheck.log 2>&1 || true
        echo "Frontend TypeScript check completed at $(date)" > ../reports/typescript/frontend-summary.txt
        cd ..

        # 生成汇总报告
        cat > reports/typescript/typecheck-summary.json << 'EOF'
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "project": "llmchat",
          "checks": {
            "backend": {
              "status": "completed",
              "config": "tsconfig.json",
              "strict_mode": true
            },
            "frontend": {
              "status": "completed",
              "config": "tsconfig.json",
              "strict_mode": true
            },
            "shared_types": {
              "status": "completed",
              "config": "tsconfig.json"
            }
          },
          "quality_gates": {
            "zero_type_errors": true,
            "strict_mode_enabled": true,
            "ci_blocking": true
          }
        }
        EOF

        echo "✅ TypeScript 类型检查报告生成完成"

    - name: 上传质量报告
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quality-report-${{ matrix.node-version }}
        path: |
          quality-report.json
          coverage/
          reports/
          reports/typescript/
        retention-days: 30

    - name: 覆盖率报告
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 运行 Trivy 漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 上传 Trivy 扫描结果
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-check:
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'pull_request'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'

    - name: 安装依赖
      run: pnpm install --frozen-lockfile

    - name: 构建项目
      run: pnpm run build

    - name: 分析包大小
      run: |
        echo "📦 分析前端包大小..."
        cd frontend
        pnpm run build
        npx bundlesize

    - name: Lighthouse CI
      run: |
        echo "🚀 执行 Lighthouse 性能检查..."
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: always()

    steps:
    - name: 发送通知
      if: failure()
      run: |
        echo "❌ 质量检查失败，请查看详细日志"
        # 这里可以添加 Slack、邮件等通知逻辑