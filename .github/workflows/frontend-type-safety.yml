name: 🔒 前端类型安全检查流程

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - 'shared-types/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - 'shared-types/**'
  schedule:
    # 每天早上8点运行完整检查
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      strict_mode:
        description: '启用严格模式检查'
        required: false
        default: true
        type: boolean
      performance_test:
        description: '运行性能测试'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: 8

jobs:
  # 类型安全预检查
  type-safety-precheck:
    name: 🔍 类型安全预检查
    runs-on: ubuntu-latest

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: 📦 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📚 安装依赖
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: 🔍 快速类型检查
        id: quick-typecheck
        working-directory: frontend
        run: |
          echo "::group::快速TypeScript类型检查"

          # 增量类型检查（如果存在tsbuildinfo）
          if [ -f ".tsbuildinfo" ]; then
            echo "📊 使用增量类型检查..."
            npx tsc --noEmit --incremental --tsBuildInfoFile .tsbuildinfo
          else
            echo "📊 运行完整类型检查..."
            npx tsc --noEmit
          fi

          TS_EXIT_CODE=$?

          if [ $TS_EXIT_CODE -ne 0 ]; then
            echo "::error::TypeScript类型检查失败"
            echo "typecheck_status=failed" >> $GITHUB_OUTPUT
            echo "typecheck_errors=true" >> $GITHUB_OUTPUT
          else
            echo "✅ TypeScript类型检查通过"
            echo "typecheck_status=passed" >> $GITHUB_OUTPUT
            echo "typecheck_errors=false" >> $GITHUB_OUTPUT
          fi

          echo "::endgroup::"
          exit $TS_EXIT_CODE

      - name: 🏷️ 类型覆盖率检查
        id: type-coverage
        working-directory: frontend
        run: |
          echo "::group::类型覆盖率分析"

          # 安装type-coverage（如果未安装）
          if ! pnpm list type-coverage > /dev/null 2>&1; then
            pnpm add -D type-coverage
          fi

          # 运行类型覆盖率检查
          COVERAGE_RESULT=$(pnpm exec type-coverage --strict --detail --at-least 90)
          COVERAGE_EXIT_CODE=$?

          echo "$COVERAGE_RESULT"

          # 提取覆盖率百分比
          COVERAGE_PERCENTAGE=$(echo "$COVERAGE_RESULT" | grep -o '[0-9]\+\.[0-9]\+%' | head -1 | sed 's/%//')

          if [ -z "$COVERAGE_PERCENTAGE" ]; then
            COVERAGE_PERCENTAGE="0"
          fi

          echo "type_coverage_percentage=$COVERAGE_PERCENTAGE" >> $GITHUB_OUTPUT

          if [ $COVERAGE_EXIT_CODE -ne 0 ]; then
            echo "::warning::类型覆盖率低于90%"
            echo "type_coverage_status=warning" >> $GITHUB_OUTPUT
          else
            echo "✅ 类型覆盖率达标 (≥90%)"
            echo "type_coverage_status=passed" >> $GITHUB_OUTPUT
          fi

          echo "::endgroup::"

  # 完整类型安全检查
  type-safety-comprehensive:
    name: 🔬 完整类型安全检查
    runs-on: ubuntu-latest
    needs: type-safety-precheck
    if: needs.type-safety-precheck.outputs.typecheck_errors != 'true'

    strategy:
      matrix:
        environment: [development, staging, production]

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: 📦 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📚 安装依赖
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: 🔧 环境配置
        run: |
          echo "::group::配置${{ matrix.environment }}环境"

          # 创建环境特定配置
          cp .env.example .env.${{ matrix.environment }}

          # 根据环境设置不同的TypeScript配置
          if [ "${{ matrix.environment }}" = "production" ]; then
            echo "NODE_ENV=production" >> .env.${{ matrix.environment }}
            echo "TSCONFIG_STRICNESS=true" >> .env.${{ matrix.environment }}
          elif [ "${{ matrix.environment }}" = "staging" ]; then
            echo "NODE_ENV=staging" >> .env.${{ matrix.environment }}
            echo "TSCONFIG_STRICTNESS=true" >> .env.${{ matrix.environment }}
          else
            echo "NODE_ENV=development" >> .env.${{ matrix.environment }}
            echo "TSCONFIG_STRICTNESS=false" >> .env.${{ matrix.environment }}
          fi

          echo "::endgroup::"

      - name: 🏗️ 构建检查
        id: build-check
        working-directory: frontend
        run: |
          echo "::group::${{ matrix.environment }}环境构建检查"

          # 根据环境使用不同的构建配置
          if [ "${{ matrix.environment }}" = "production" ]; then
            pnpm run build
          else
            pnpm run build
          fi

          BUILD_EXIT_CODE=$?

          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "::error::${{ matrix.environment }}环境构建失败"
            echo "build_status=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ ${{ matrix.environment }}环境构建成功"
            echo "build_status=passed" >> $GITHUB_OUTPUT

            # 检查构建产物大小
            BUILD_SIZE=$(du -sh dist | cut -f1)
            echo "build_size=$BUILD_SIZE" >> $GITHUB_OUTPUT
          fi

          echo "::endgroup::"
          exit $BUILD_EXIT_CODE

      - name: 🔍 严格模式类型检查
        id: strict-typecheck
        working-directory: frontend
        run: |
          echo "::group::严格模式TypeScript检查"

          # 使用更严格的TypeScript配置
          npx tsc --noEmit --strict --exactOptionalPropertyTypes --noUncheckedIndexedAccess

          TS_EXIT_CODE=$?

          if [ $TS_EXIT_CODE -ne 0 ]; then
            echo "::error::严格模式类型检查失败"
            echo "strict_typecheck_status=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ 严格模式类型检查通过"
            echo "strict_typecheck_status=passed" >> $GITHUB_OUTPUT
          fi

          echo "::endgroup::"
          exit $TS_EXIT_CODE

      - name: 🧪 ESLint类型规则检查
        id: eslint-typecheck
        working-directory: frontend
        run: |
          echo "::group::ESLint类型规则检查"

          # 运行专门的类型相关ESLint规则
          npx eslint src --ext .ts,.tsx \
            --config .eslintrc.cjs \
            --rule '@typescript-eslint/no-explicit-any:error' \
            --rule '@typescript-eslint/no-unsafe-assignment:error' \
            --rule '@typescript-eslint/no-unsafe-call:error' \
            --rule '@typescript-eslint/no-unsafe-member-access:error' \
            --rule '@typescript-eslint/no-unsafe-return:error' \
            --rule '@typescript-eslint/prefer-nullish-coalescing:error' \
            --rule '@typescript-eslint/prefer-optional-chain:error' \
            --format json > eslint-type-report.json

          ESLINT_EXIT_CODE=$?

          # 统计错误数量
          TYPE_ERRORS=$(cat eslint-type-report.json | jq '[.[] | select(.severity == 2)] | length')
          TYPE_WARNINGS=$(cat eslint-type-report.json | jq '[.[] | select(.severity == 1)] | length')

          echo "eslint_type_errors=$TYPE_ERRORS" >> $GITHUB_OUTPUT
          echo "eslint_type_warnings=$TYPE_WARNINGS" >> $GITHUB_OUTPUT

          if [ $ESLINT_EXIT_CODE -ne 0 ]; then
            echo "::error::ESLint类型规则检查失败"
            echo "eslint_typecheck_status=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ ESLint类型规则检查通过"
            echo "eslint_typecheck_status=passed" >> $GITHUB_OUTPUT
          fi

          echo "::endgroup::"
          exit $ESLINT_EXIT_CODE

      - name: 🔄 类型回归测试
        id: type-regression
        working-directory: frontend
        run: |
          echo "::group::类型回归测试"

          # 检查是否有类型定义的破坏性变更
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # 对比主分支，检查类型错误数量变化
            git fetch origin main
            MAIN_BRANCH_HASH=$(git rev-parse origin/main)
            CURRENT_BRANCH_HASH=$(git rev-parse HEAD)

            echo "🔍 检查相对于main分支的类型变更..."

            # 创建基线类型报告
            git checkout $MAIN_BRANCH_HASH
            npx tsc --noEmit --pretty false 2> ../baseline-type-errors.txt || true
            BASELINE_ERRORS=$(cat ../baseline-type-errors.txt | grep -c "error TS" || echo "0")

            # 检查当前分支的类型错误
            git checkout $CURRENT_BRANCH_HASH
            npx tsc --noEmit --pretty false 2> ../current-type-errors.txt || true
            CURRENT_ERRORS=$(cat ../current-type-errors.txt | grep -c "error TS" || echo "0")

            # 计算误差变化
            ERROR_DIFF=$((CURRENT_ERRORS - BASELINE_ERRORS))

            echo "baseline_errors=$BASELINE_ERRORS" >> $GITHUB_OUTPUT
            echo "current_errors=$CURRENT_ERRORS" >> $GITHUB_OUTPUT
            echo "error_diff=$ERROR_DIFF" >> $GITHUB_OUTPUT

            if [ $ERROR_DIFF -gt 0 ]; then
              echo "::error::检测到类型错误回归 (+$ERROR_DIFF)"
              echo "type_regression_status=failed" >> $GITHUB_OUTPUT
            else
              echo "✅ 未检测到类型错误回归"
              echo "type_regression_status=passed" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️ 非PR请求，跳过类型回归测试"
            echo "type_regression_status=skipped" >> $GITHUB_OUTPUT
          fi

          echo "::endgroup::"

  # 性能影响评估
  type-safety-performance:
    name: ⚡ 类型安全性能影响评估
    runs-on: ubuntu-latest
    needs: type-safety-comprehensive
    if: |
      always() &&
      needs.type-safety-comprehensive.result == 'success' &&
      (github.event.inputs.performance_test == 'true' || github.event_name == 'schedule')

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔧 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: 📦 安装依赖
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: 🚀 性能基准测试
        id: performance-benchmark
        working-directory: frontend
        run: |
          echo "::group::类型安全性能基准测试"

          # TypeScript编译性能测试
          echo "📊 TypeScript编译性能测试..."
          TS_COMPILE_TIME=$(time (npx tsc --noEmit) 2>&1 | grep real | awk '{print $2}')
          echo "ts_compile_time=$TS_COMPILE_TIME" >> $GITHUB_OUTPUT

          # ESLint检查性能测试
          echo "📊 ESLint检查性能测试..."
          ESLINT_TIME=$(time (npx eslint src --ext .ts,.tsx) 2>&1 | grep real | awk '{print $2}')
          echo "eslint_check_time=$ESLINT_TIME" >> $GITHUB_OUTPUT

          # 构建性能测试
          echo "📊 构建性能测试..."
          BUILD_TIME=$(time (pnpm run build) 2>&1 | grep real | awk '{print $2}')
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT

          # 内存使用监控
          echo "📊 内存使用监控..."
          MEMORY_USAGE=$(ps -o pid,ppid,cmd,%mem,%cpu --sort=-%mem -C node | head -2 | tail -1 | awk '{print $4}')
          echo "memory_usage=$MEMORY_USAGE" >> $GITHUB_OUTPUT

          echo "::endgroup::"

      - name: 📈 性能报告生成
        run: |
          echo "::group::生成性能报告"

          cat > performance-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ matrix.environment || 'default' }}",
            "performance": {
              "typescript": {
                "compile_time": "${{ steps.performance-benchmark.outputs.ts_compile_time }}"
              },
              "eslint": {
                "check_time": "${{ steps.performance-benchmark.outputs.eslint_check_time }}"
              },
              "build": {
                "time": "${{ steps.performance-benchmark.outputs.build_time }}"
              },
              "memory": {
                "usage": "${{ steps.performance-benchmark.outputs.memory_usage }}%"
              }
            }
          }
          EOF

          echo "::endgroup::"

      - name: 📤 上传性能报告
        uses: actions/upload-artifact@v4
        with:
          name: type-safety-performance-report-${{ github.sha }}
          path: performance-report.json
          retention-days: 30

  # 质量门禁检查
  quality-gate:
    name: 🚪 类型安全质量门禁
    runs-on: ubuntu-latest
    needs: [type-safety-precheck, type-safety-comprehensive]
    if: always()

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔍 质量门禁检查
        run: |
          echo "::group::类型安全质量门禁检查"

          # 检查所有前置作业状态
          TYPECHECK_STATUS="${{ needs.type-safety-precheck.result }}"
          COMPREHENSIVE_STATUS="${{ needs.type-safety-comprehensive.result }}"

          echo "📊 作业状态检查:"
          echo "- 类型预检查: $TYPECHECK_STATUS"
          echo "- 完整类型检查: $COMPREHENSIVE_STATUS"

          # 质量门禁规则
          GATE_PASSED=true

          if [ "$TYPECHECK_STATUS" != "success" ]; then
            echo "::error::❌ 类型预检查失败，阻止合并"
            GATE_PASSED=false
          fi

          if [ "$COMPREHENSIVE_STATUS" != "success" ]; then
            echo "::error::❌ 完整类型检查失败，阻止合并"
            GATE_PASSED=false
          fi

          if [ "$GATE_PASSED" = "true" ]; then
            echo "✅ 🎉 类型安全质量门禁通过！"
            echo "quality_gate_status=passed" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "::error::🚫 类型安全质量门禁失败，请修复类型问题后重试"
            echo "quality_gate_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "::endgroup::"

  # 报告生成和通知
  type-safety-report:
    name: 📋 类型安全报告生成
    runs-on: ubuntu-latest
    needs: [type-safety-precheck, type-safety-comprehensive, quality-gate]
    if: always()

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📊 生成综合报告
        id: generate-report
        run: |
          echo "::group::生成类型安全综合报告"

          # 创建综合报告
          cat > type-safety-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "event": "${{ github.event_name }}",
            "quality_gate": {
              "status": "${{ needs.quality-gate.result }}",
              "passed": "${{ needs.quality-gate.result == 'success' }}"
            },
            "checks": {
              "precheck": {
                "status": "${{ needs.type-safety-precheck.result }}",
                "typecheck": "${{ needs.type-safety-precheck.outputs.typecheck_status }}",
                "type_coverage": "${{ needs.type-safety-precheck.outputs.type_coverage_percentage }}%"
              },
              "comprehensive": {
                "status": "${{ needs.type-safety-comprehensive.result }}",
                "build": "${{ needs.type-safety-comprehensive.outputs.build_status }}",
                "strict_typecheck": "${{ needs.type-safety-comprehensive.outputs.strict_typecheck_status }}",
                "eslint_typecheck": "${{ needs.type-safety-comprehensive.outputs.eslint_typecheck_status }}",
                "type_regression": "${{ needs.type-safety-comprehensive.outputs.type_regression_status }}"
              }
            },
            "metrics": {
              "type_errors": "${{ needs.type-safety-comprehensive.outputs.eslint_type_errors || 0 }}",
              "type_warnings": "${{ needs.type-safety-comprehensive.outputs.eslint_type_warnings || 0 }}",
              "build_size": "${{ needs.type-safety-comprehensive.outputs.build_size || 'unknown' }}"
            }
          }
          EOF

          echo "✅ 类型安全综合报告生成完成"
          echo "::endgroup::"

      - name: 📤 上传报告
        uses: actions/upload-artifact@v4
        with:
          name: type-safety-report-${{ github.sha }}
          path: type-safety-report.json
          retention-days: 30

      - name: 💬 PR评论
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('type-safety-report.json', 'utf8'));

            const statusEmoji = report.quality_gate.passed ? '✅' : '❌';
            const statusText = report.quality_gate.passed ? '通过' : '失败';

            const body = `
            ## 🔒 类型安全检查报告

            **质量门禁状态**: ${statusEmoji} ${statusText}

            ### 📊 检查结果

            | 检查项 | 状态 | 详情 |
            |--------|------|------|
            | TypeScript类型检查 | ${report.checks.precheck.typecheck === 'passed' ? '✅' : '❌'} | 零错误策略 |
            | 类型覆盖率 | ${report.checks.precheck.type_coverage} | 目标: ≥90% |
            | 严格模式检查 | ${report.checks.comprehensive.strict_typecheck === 'passed' ? '✅' : '❌'} | 严格类型检查 |
            | ESLint类型规则 | ${report.checks.comprehensive.eslint_typecheck === 'passed' ? '✅' : '❌'} | ${report.metrics.type_errors} 错误, ${report.metrics.type_warnings} 警告 |
            | 构建检查 | ${report.checks.comprehensive.build === 'passed' ? '✅' : '❌'} | 构建大小: ${report.metrics.build_size} |
            | 类型回归测试 | ${report.checks.comprehensive.type_regression === 'passed' ? '✅' : report.checks.comprehensive.type_regression === 'skipped' ? '⏭️' : '❌'} | 防止类型退化 |

            ${report.quality_gate.passed ?
              '🎉 **类型安全检查全部通过！** 代码质量优秀，可以安全合并。' :
              '🚫 **类型安全检查失败！** 请修复上述问题后重新提交检查。'
            }

            ---
            *报告生成时间: ${new Date(report.timestamp).toLocaleString('zh-CN')}*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: 📧 通知
        if: failure() && github.event_name != 'pull_request'
        run: |
          echo "::group::发送失败通知"
          echo "类型安全检查失败，请检查CI/CD日志"
          echo "这里可以集成Slack、钉钉等通知系统"
          echo "::endgroup::"

  # 类型安全监控仪表板更新
  update-dashboard:
    name: 📈 更新类型安全监控仪表板
    runs-on: ubuntu-latest
    needs: [type-safety-precheck, type-safety-comprehensive, quality-gate]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📊 更新监控数据
        run: |
          echo "::group::更新类型安全监控数据"

          # 这里可以集成到监控系统
          echo "更新类型安全监控指标..."
          echo "- 类型错误数量: ${{ needs.type-safety-comprehensive.outputs.eslint_type_errors || 0 }}"
          echo "- 类型覆盖率: ${{ needs.type-safety-precheck.outputs.type_coverage_percentage }}%"
          echo "- 质量门禁状态: ${{ needs.quality-gate.result }}"

          # 可以发送到Prometheus、Grafana等监控系统
          echo "::endgroup::"