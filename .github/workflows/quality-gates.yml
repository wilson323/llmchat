name: Code Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  quality-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Run TypeScript type checking
        run: |
          pnpm run type-check

      - name: Run ESLint (Backend)
        run: |
          cd backend && pnpm run lint

      - name: Run ESLint (Frontend)
        run: |
          cd frontend && pnpm run lint

      - name: Run Quality Monitor
        run: |
          pnpm run quality-monitor

      - name: Upload Quality Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-report
          path: |
            quality-reports/
            quality-baseline.json
          retention-days: 30

      - name: Quality Gate Check
        run: |
          # 检查是否超出质量门禁阈值
          node scripts/quality-monitor.js
          if [ $? -ne 0 ]; then
            echo "❌ 质量门禁检查失败！"
            exit 1
          else
            echo "✅ 质量门禁检查通过！"
          fi

      - name: Security Audit
        run: |
          pnpm audit --audit-level high

  test:
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Run tests
        run: |
          pnpm test

  build:
    runs-on: ubuntu-latest
    needs: [quality-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Build project
        run: |
          pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/dist/
            frontend/dist/
          retention-days: 7
  pull_request:
    branches: [ main, develop ]

jobs:
  # 质量门禁检查
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于分析

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🚀 Enhanced Quality Gates
        run: pnpm run quality-gates:ci

      - name: 📊 Generate Quality Dashboard
        run: pnpm run quality-dashboard

      - name: 🔍 Type checking
        run: pnpm run type-check

      - name: 🔍 ESLint checking
        run: pnpm run lint

      - name: 🧪 Unit tests
        run: pnpm test

      - name: 🏗️ Build validation
        run: pnpm run build

      - name: 🔒 Security audit
        run: pnpm audit --audit-level high

  # 代码质量分析
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📊 Generate quality report
        run: |
          mkdir -p reports

          # 生成ESLint报告
          pnpm run lint --format=json --output-file=reports/eslint-report.json || true

          # 生成测试覆盖率报告
          pnpm run test:coverage || pnpm test || true

          # 生成构建分析报告
          du -sh node_modules/ > reports/dependencies-size.txt
          du -sh backend/dist/ frontend/dist/ > reports/build-size.txt 2>/dev/null || echo "Build artifacts not found" > reports/build-size.txt

      - name: 📈 Upload quality reports
        uses: actions/upload-artifact@v3
        with:
          name: quality-reports
          path: reports/
          retention-days: 30

  # 集成测试
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-checks

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Setup database
        run: |
          pnpm run migrate:up
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/test_db

      - name: 🧪 Run integration tests
        run: pnpm run test:integration || echo "Integration tests not configured"

      - name: 🌐 Run E2E tests
        run: pnpm run test:e2e || echo "E2E tests not configured"

  # 质量门禁结果汇总
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, code-quality, integration-tests]
    if: always()

    steps:
      - name: Download quality reports
        uses: actions/download-artifact@v3
        with:
          name: quality-reports
          path: reports/

      - name: 📋 Generate quality summary
        run: |
          echo "# 📊 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Passed Checks" >> $GITHUB_STEP_SUMMARY
          echo "- Type checking: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build validation: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security audit: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Quality Metrics" >> $GITHUB_STEP_SUMMARY

          if [ -f "reports/eslint-report.json" ]; then
            echo "- ESLint issues found: $(cat reports/eslint-report.json | jq '. | length' 2>/dev/null || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "reports/dependencies-size.txt" ]; then
            echo "- Dependencies size: $(cat reports/dependencies-size.txt)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚦 Overall Status" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.quality-checks.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "✅ **All quality checks passed!** Code is ready for production." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quality checks failed.** Please review and fix the issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # 通知和质量趋势
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-checks, code-quality, integration-tests]
    if: always()

    steps:
      - name: 📧 Notify on failure
        if: needs.quality-checks.result == 'failure' || needs.code-quality.result == 'failure'
        run: |
          echo "🚨 Quality checks failed! Please review the logs above."
          echo "Failed jobs:"
          echo "- Quality checks: ${{ needs.quality-checks.result }}"
          echo "- Code quality: ${{ needs.code-quality.result }}"
          echo "- Integration tests: ${{ needs.integration-tests.result }}"